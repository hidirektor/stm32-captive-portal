
stm32-captive-portal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067e4  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  080069d4  080069d4  000079d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d68  08006d68  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d68  08006d68  00007d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d70  08006d70  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d70  08006d70  00007d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d74  08006d74  00007d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006d78  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f54  2000006c  08006de4  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fc0  08006de4  00008fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016dae  00000000  00000000  00008095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003482  00000000  00000000  0001ee43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  000222c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000106e  00000000  00000000  000237f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdbd  00000000  00000000  0002485e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016efc  00000000  00000000  0004061b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4a6a  00000000  00000000  00057517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbf81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006148  00000000  00000000  000fbfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0010210c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000006c 	.word	0x2000006c
 800020c:	00000000 	.word	0x00000000
 8000210:	080069bc 	.word	0x080069bc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000070 	.word	0x20000070
 800022c:	080069bc 	.word	0x080069bc

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <Wifi_RxClear>:
static uint8_t RxBuffer[_WIFI_RX_SIZE];   // RX size
static uint8_t TxBuffer[_WIFI_TX_SIZE];   // TX size
static uint8_t RxBufferForData[_WIFI_RX_FOR_DATA_SIZE]; // Response için boyutlandırma
static volatile uint16_t RxIndex = 0;

void Wifi_RxClear(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
    memset(RxBuffer, 0, sizeof(RxBuffer));
 8000244:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000248:	2100      	movs	r1, #0
 800024a:	4804      	ldr	r0, [pc, #16]	@ (800025c <Wifi_RxClear+0x1c>)
 800024c:	f005 fcdc 	bl	8005c08 <memset>
    RxIndex = 0;
 8000250:	4b03      	ldr	r3, [pc, #12]	@ (8000260 <Wifi_RxClear+0x20>)
 8000252:	2200      	movs	r2, #0
 8000254:	801a      	strh	r2, [r3, #0]
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000088 	.word	0x20000088
 8000260:	20000488 	.word	0x20000488

08000264 <Wifi_SendString>:

int Wifi_SendString(UART_HandleTypeDef *huart, char *data) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	6039      	str	r1, [r7, #0]
    // WiFi üzerinden komut gönderme
    return HAL_UART_Transmit(huart, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
 800026e:	6838      	ldr	r0, [r7, #0]
 8000270:	f7ff ffde 	bl	8000230 <strlen>
 8000274:	4603      	mov	r3, r0
 8000276:	b29a      	uxth	r2, r3
 8000278:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800027c:	6839      	ldr	r1, [r7, #0]
 800027e:	6878      	ldr	r0, [r7, #4]
 8000280:	f002 f884 	bl	800238c <HAL_UART_Transmit>
 8000284:	4603      	mov	r3, r0
}
 8000286:	4618      	mov	r0, r3
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <Wifi_WaitForString>:

int Wifi_WaitForString(UART_HandleTypeDef *huart, uint32_t TimeOut_ms, uint8_t *result, uint8_t CountOfParameter, ...) {
 8000290:	b408      	push	{r3}
 8000292:	b580      	push	{r7, lr}
 8000294:	b089      	sub	sp, #36	@ 0x24
 8000296:	af00      	add	r7, sp, #0
 8000298:	60f8      	str	r0, [r7, #12]
 800029a:	60b9      	str	r1, [r7, #8]
 800029c:	607a      	str	r2, [r7, #4]
    va_list args;
    va_start(args, CountOfParameter);
 800029e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002a2:	613b      	str	r3, [r7, #16]

    uint32_t startTime = HAL_GetTick();
 80002a4:	f000 fc4a 	bl	8000b3c <HAL_GetTick>
 80002a8:	61b8      	str	r0, [r7, #24]
    while ((HAL_GetTick() - startTime) < TimeOut_ms) {
 80002aa:	e01c      	b.n	80002e6 <Wifi_WaitForString+0x56>
        for (int i = 0; i < CountOfParameter; i++) {
 80002ac:	2300      	movs	r3, #0
 80002ae:	61fb      	str	r3, [r7, #28]
 80002b0:	e014      	b.n	80002dc <Wifi_WaitForString+0x4c>
            char *expectedString = va_arg(args, char*);
 80002b2:	693b      	ldr	r3, [r7, #16]
 80002b4:	1d1a      	adds	r2, r3, #4
 80002b6:	613a      	str	r2, [r7, #16]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	617b      	str	r3, [r7, #20]
            if (strstr((char*)RxBuffer, expectedString) != NULL) {
 80002bc:	6979      	ldr	r1, [r7, #20]
 80002be:	4812      	ldr	r0, [pc, #72]	@ (8000308 <Wifi_WaitForString+0x78>)
 80002c0:	f005 fc8c 	bl	8005bdc <strstr>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d005      	beq.n	80002d6 <Wifi_WaitForString+0x46>
                *result = i;
 80002ca:	69fb      	ldr	r3, [r7, #28]
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	701a      	strb	r2, [r3, #0]
                va_end(args);
                return 1; // Beklenen string bulundu
 80002d2:	2301      	movs	r3, #1
 80002d4:	e010      	b.n	80002f8 <Wifi_WaitForString+0x68>
        for (int i = 0; i < CountOfParameter; i++) {
 80002d6:	69fb      	ldr	r3, [r7, #28]
 80002d8:	3301      	adds	r3, #1
 80002da:	61fb      	str	r3, [r7, #28]
 80002dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80002e0:	69fa      	ldr	r2, [r7, #28]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	dbe5      	blt.n	80002b2 <Wifi_WaitForString+0x22>
    while ((HAL_GetTick() - startTime) < TimeOut_ms) {
 80002e6:	f000 fc29 	bl	8000b3c <HAL_GetTick>
 80002ea:	4602      	mov	r2, r0
 80002ec:	69bb      	ldr	r3, [r7, #24]
 80002ee:	1ad3      	subs	r3, r2, r3
 80002f0:	68ba      	ldr	r2, [r7, #8]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d8da      	bhi.n	80002ac <Wifi_WaitForString+0x1c>
            }
        }
    }
    va_end(args);
    return 0; // Beklenen string bulunamadı
 80002f6:	2300      	movs	r3, #0
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3724      	adds	r7, #36	@ 0x24
 80002fc:	46bd      	mov	sp, r7
 80002fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000302:	b001      	add	sp, #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	20000088 	.word	0x20000088

0800030c <Wifi_Init>:

void Wifi_ProcessReceivedData(uint8_t* buffer, uint16_t length) {
    // Response parse function
}

int Wifi_Init(UART_HandleTypeDef *huart) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
    Wifi_RxClear();
 8000314:	f7ff ff94 	bl	8000240 <Wifi_RxClear>
    return Wifi_SendString(huart, AT_CMD); // "AT" komutu gönder
 8000318:	4904      	ldr	r1, [pc, #16]	@ (800032c <Wifi_Init+0x20>)
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f7ff ffa2 	bl	8000264 <Wifi_SendString>
 8000320:	4603      	mov	r3, r0
}
 8000322:	4618      	mov	r0, r3
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	080069d4 	.word	0x080069d4

08000330 <Wifi_Station_ConnectToAp>:
int Wifi_GetMyIp(UART_HandleTypeDef *huart) {
    return Wifi_SendString(huart, AT_CIFSR_CMD); // "AT+CIFSR" komutu
}

// Station Modu İşlemleri
int Wifi_Station_ConnectToAp(UART_HandleTypeDef *huart, char *SSID, char *Pass) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b0a4      	sub	sp, #144	@ 0x90
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
    char cmd[128];
    sprintf(cmd, AT_CWJAP_CMD, SSID, Pass);
 800033c:	f107 0010 	add.w	r0, r7, #16
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	4906      	ldr	r1, [pc, #24]	@ (8000360 <Wifi_Station_ConnectToAp+0x30>)
 8000346:	f005 fb09 	bl	800595c <siprintf>

    return Wifi_SendString(huart, cmd);
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	4619      	mov	r1, r3
 8000350:	68f8      	ldr	r0, [r7, #12]
 8000352:	f7ff ff87 	bl	8000264 <Wifi_SendString>
 8000356:	4603      	mov	r3, r0
}
 8000358:	4618      	mov	r0, r3
 800035a:	3790      	adds	r7, #144	@ 0x90
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	08006a54 	.word	0x08006a54

08000364 <Wifi_SoftAp_Create>:
    return Wifi_SendString(huart, cmd);
}

// SoftAP Modu İşlemleri
int Wifi_SoftAp_Create(UART_HandleTypeDef *huart, char *SSID, char *password, uint8_t channel,
        WifiEncryptionType_t WifiEncryptionType, uint8_t MaxConnections_1_to_4, bool HiddenSSID) {
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b0a9      	sub	sp, #164	@ 0xa4
 8000368:	af04      	add	r7, sp, #16
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	70fb      	strb	r3, [r7, #3]

    char cmd[128];
    sprintf(cmd, AT_CWSAP_CMD, SSID, password, channel, WifiEncryptionType, MaxConnections_1_to_4, HiddenSSID ? 1 : 0);
 8000372:	78fb      	ldrb	r3, [r7, #3]
 8000374:	f897 20a0 	ldrb.w	r2, [r7, #160]	@ 0xa0
 8000378:	f897 10a4 	ldrb.w	r1, [r7, #164]	@ 0xa4
 800037c:	f897 00a8 	ldrb.w	r0, [r7, #168]	@ 0xa8
 8000380:	4604      	mov	r4, r0
 8000382:	f107 0010 	add.w	r0, r7, #16
 8000386:	9403      	str	r4, [sp, #12]
 8000388:	9102      	str	r1, [sp, #8]
 800038a:	9201      	str	r2, [sp, #4]
 800038c:	9300      	str	r3, [sp, #0]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	68ba      	ldr	r2, [r7, #8]
 8000392:	4907      	ldr	r1, [pc, #28]	@ (80003b0 <Wifi_SoftAp_Create+0x4c>)
 8000394:	f005 fae2 	bl	800595c <siprintf>

    return Wifi_SendString(huart, cmd);
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	4619      	mov	r1, r3
 800039e:	68f8      	ldr	r0, [r7, #12]
 80003a0:	f7ff ff60 	bl	8000264 <Wifi_SendString>
 80003a4:	4603      	mov	r3, r0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3794      	adds	r7, #148	@ 0x94
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd90      	pop	{r4, r7, pc}
 80003ae:	bf00      	nop
 80003b0:	08006ab8 	.word	0x08006ab8

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b8:	f000 fb68 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003bc:	f000 f828 	bl	8000410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c0:	f000 f8e8 	bl	8000594 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003c4:	f000 f86a 	bl	800049c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80003c8:	f000 f8ba 	bl	8000540 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003cc:	f002 fdb2 	bl	8002f34 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003d0:	4a09      	ldr	r2, [pc, #36]	@ (80003f8 <main+0x44>)
 80003d2:	2100      	movs	r1, #0
 80003d4:	4809      	ldr	r0, [pc, #36]	@ (80003fc <main+0x48>)
 80003d6:	f002 fe13 	bl	8003000 <osThreadNew>
 80003da:	4603      	mov	r3, r0
 80003dc:	4a08      	ldr	r2, [pc, #32]	@ (8000400 <main+0x4c>)
 80003de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  wifiTaskHandle = osThreadNew(StartWifiTask, NULL, &wifiTask_attributes);
 80003e0:	4a08      	ldr	r2, [pc, #32]	@ (8000404 <main+0x50>)
 80003e2:	2100      	movs	r1, #0
 80003e4:	4808      	ldr	r0, [pc, #32]	@ (8000408 <main+0x54>)
 80003e6:	f002 fe0b 	bl	8003000 <osThreadNew>
 80003ea:	4603      	mov	r3, r0
 80003ec:	4a07      	ldr	r2, [pc, #28]	@ (800040c <main+0x58>)
 80003ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003f0:	f002 fdd2 	bl	8002f98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003f4:	bf00      	nop
 80003f6:	e7fd      	b.n	80003f4 <main+0x40>
 80003f8:	08006cc0 	.word	0x08006cc0
 80003fc:	080006fd 	.word	0x080006fd
 8000400:	2000051c 	.word	0x2000051c
 8000404:	08006ce4 	.word	0x08006ce4
 8000408:	08000605 	.word	0x08000605
 800040c:	20000520 	.word	0x20000520

08000410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b090      	sub	sp, #64	@ 0x40
 8000414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	f107 0318 	add.w	r3, r7, #24
 800041a:	2228      	movs	r2, #40	@ 0x28
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f005 fbf2 	bl	8005c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000432:	2301      	movs	r3, #1
 8000434:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000436:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800043a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000440:	2301      	movs	r3, #1
 8000442:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000444:	2302      	movs	r3, #2
 8000446:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000448:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800044c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800044e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000452:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000454:	f107 0318 	add.w	r3, r7, #24
 8000458:	4618      	mov	r0, r3
 800045a:	f000 ff5d 	bl	8001318 <HAL_RCC_OscConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000464:	f000 f952 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000468:	230f      	movs	r3, #15
 800046a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046c:	2302      	movs	r3, #2
 800046e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000474:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2102      	movs	r1, #2
 8000482:	4618      	mov	r0, r3
 8000484:	f001 f9ca 	bl	800181c <HAL_RCC_ClockConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800048e:	f000 f93d 	bl	800070c <Error_Handler>
  }
}
 8000492:	bf00      	nop
 8000494:	3740      	adds	r7, #64	@ 0x40
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a2:	f107 0308 	add.w	r3, r7, #8
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b0:	463b      	mov	r3, r7
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000538 <MX_TIM1_Init+0x9c>)
 80004ba:	4a20      	ldr	r2, [pc, #128]	@ (800053c <MX_TIM1_Init+0xa0>)
 80004bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80004be:	4b1e      	ldr	r3, [pc, #120]	@ (8000538 <MX_TIM1_Init+0x9c>)
 80004c0:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80004c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000538 <MX_TIM1_Init+0x9c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80004cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000538 <MX_TIM1_Init+0x9c>)
 80004ce:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80004d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d4:	4b18      	ldr	r3, [pc, #96]	@ (8000538 <MX_TIM1_Init+0x9c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004da:	4b17      	ldr	r3, [pc, #92]	@ (8000538 <MX_TIM1_Init+0x9c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e0:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <MX_TIM1_Init+0x9c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004e6:	4814      	ldr	r0, [pc, #80]	@ (8000538 <MX_TIM1_Init+0x9c>)
 80004e8:	f001 fb26 	bl	8001b38 <HAL_TIM_Base_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80004f2:	f000 f90b 	bl	800070c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004fc:	f107 0308 	add.w	r3, r7, #8
 8000500:	4619      	mov	r1, r3
 8000502:	480d      	ldr	r0, [pc, #52]	@ (8000538 <MX_TIM1_Init+0x9c>)
 8000504:	f001 fc6f 	bl	8001de6 <HAL_TIM_ConfigClockSource>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800050e:	f000 f8fd 	bl	800070c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000512:	2300      	movs	r3, #0
 8000514:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800051a:	463b      	mov	r3, r7
 800051c:	4619      	mov	r1, r3
 800051e:	4806      	ldr	r0, [pc, #24]	@ (8000538 <MX_TIM1_Init+0x9c>)
 8000520:	f001 fe66 	bl	80021f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800052a:	f000 f8ef 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800052e:	bf00      	nop
 8000530:	3718      	adds	r7, #24
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	2000048c 	.word	0x2000048c
 800053c:	40012c00 	.word	0x40012c00

08000540 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000544:	4b11      	ldr	r3, [pc, #68]	@ (800058c <MX_USART1_UART_Init+0x4c>)
 8000546:	4a12      	ldr	r2, [pc, #72]	@ (8000590 <MX_USART1_UART_Init+0x50>)
 8000548:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800054a:	4b10      	ldr	r3, [pc, #64]	@ (800058c <MX_USART1_UART_Init+0x4c>)
 800054c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000550:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000552:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <MX_USART1_UART_Init+0x4c>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000558:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <MX_USART1_UART_Init+0x4c>)
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800055e:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <MX_USART1_UART_Init+0x4c>)
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000564:	4b09      	ldr	r3, [pc, #36]	@ (800058c <MX_USART1_UART_Init+0x4c>)
 8000566:	220c      	movs	r2, #12
 8000568:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056a:	4b08      	ldr	r3, [pc, #32]	@ (800058c <MX_USART1_UART_Init+0x4c>)
 800056c:	2200      	movs	r2, #0
 800056e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <MX_USART1_UART_Init+0x4c>)
 8000572:	2200      	movs	r2, #0
 8000574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000576:	4805      	ldr	r0, [pc, #20]	@ (800058c <MX_USART1_UART_Init+0x4c>)
 8000578:	f001 feb8 	bl	80022ec <HAL_UART_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000582:	f000 f8c3 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200004d4 	.word	0x200004d4
 8000590:	40013800 	.word	0x40013800

08000594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059a:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <MX_GPIO_Init+0x68>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a17      	ldr	r2, [pc, #92]	@ (80005fc <MX_GPIO_Init+0x68>)
 80005a0:	f043 0320 	orr.w	r3, r3, #32
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <MX_GPIO_Init+0x68>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f003 0320 	and.w	r3, r3, #32
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <MX_GPIO_Init+0x68>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a11      	ldr	r2, [pc, #68]	@ (80005fc <MX_GPIO_Init+0x68>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <MX_GPIO_Init+0x68>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  // PA_1 pinini ESP8266'nın güç kontrolü için yapılandırma
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0308 	add.w	r3, r7, #8
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005d8:	2302      	movs	r3, #2
 80005da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2302      	movs	r3, #2
 80005e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	4619      	mov	r1, r3
 80005ee:	4804      	ldr	r0, [pc, #16]	@ (8000600 <MX_GPIO_Init+0x6c>)
 80005f0:	f000 fcfe 	bl	8000ff0 <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005f4:	bf00      	nop
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010800 	.word	0x40010800

08000604 <StartWifiTask>:

/* USER CODE BEGIN 4 */
void StartWifiTask(void *argument) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b0a8      	sub	sp, #160	@ 0xa0
 8000608:	af04      	add	r7, sp, #16
 800060a:	6078      	str	r0, [r7, #4]
    uint8_t result;

    // WiFi Bağlantısı
    Wifi_Init(&huart1);
 800060c:	482e      	ldr	r0, [pc, #184]	@ (80006c8 <StartWifiTask+0xc4>)
 800060e:	f7ff fe7d 	bl	800030c <Wifi_Init>
    if (Wifi_Station_ConnectToAp(&huart1, WIFI_SSID, WIFI_PASSWORD) == HAL_OK) {
 8000612:	4a2e      	ldr	r2, [pc, #184]	@ (80006cc <StartWifiTask+0xc8>)
 8000614:	492e      	ldr	r1, [pc, #184]	@ (80006d0 <StartWifiTask+0xcc>)
 8000616:	482c      	ldr	r0, [pc, #176]	@ (80006c8 <StartWifiTask+0xc4>)
 8000618:	f7ff fe8a 	bl	8000330 <Wifi_Station_ConnectToAp>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d10f      	bne.n	8000642 <StartWifiTask+0x3e>
        if (Wifi_WaitForString(&huart1, 5000, &result, 1, "OK")) {
 8000622:	f107 028f 	add.w	r2, r7, #143	@ 0x8f
 8000626:	4b2b      	ldr	r3, [pc, #172]	@ (80006d4 <StartWifiTask+0xd0>)
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2301      	movs	r3, #1
 800062c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000630:	4825      	ldr	r0, [pc, #148]	@ (80006c8 <StartWifiTask+0xc4>)
 8000632:	f7ff fe2d 	bl	8000290 <Wifi_WaitForString>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <StartWifiTask+0x3e>
            printf("Connected to WiFi\n");
 800063c:	4826      	ldr	r0, [pc, #152]	@ (80006d8 <StartWifiTask+0xd4>)
 800063e:	f005 fac5 	bl	8005bcc <puts>
        }
    }

    // Access Point Oluştur
    Wifi_SoftAp_Create(&huart1, AP_SSID, AP_PASSWORD, AP_CHANNEL, AP_ENCRYPTION, AP_MAX_CONN, AP_HIDDEN);
 8000642:	2300      	movs	r3, #0
 8000644:	9302      	str	r3, [sp, #8]
 8000646:	2304      	movs	r3, #4
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2303      	movs	r3, #3
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2305      	movs	r3, #5
 8000650:	4a22      	ldr	r2, [pc, #136]	@ (80006dc <StartWifiTask+0xd8>)
 8000652:	4923      	ldr	r1, [pc, #140]	@ (80006e0 <StartWifiTask+0xdc>)
 8000654:	481c      	ldr	r0, [pc, #112]	@ (80006c8 <StartWifiTask+0xc4>)
 8000656:	f7ff fe85 	bl	8000364 <Wifi_SoftAp_Create>
    if (Wifi_WaitForString(&huart1, 5000, &result, 1, "OK")) {
 800065a:	f107 028f 	add.w	r2, r7, #143	@ 0x8f
 800065e:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <StartWifiTask+0xd0>)
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2301      	movs	r3, #1
 8000664:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000668:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <StartWifiTask+0xc4>)
 800066a:	f7ff fe11 	bl	8000290 <Wifi_WaitForString>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d002      	beq.n	800067a <StartWifiTask+0x76>
        printf("AP created\n");
 8000674:	481b      	ldr	r0, [pc, #108]	@ (80006e4 <StartWifiTask+0xe0>)
 8000676:	f005 faa9 	bl	8005bcc <puts>
    }

    // Kullanıcı bağlandığında yönlendirme
    while (1) {
        Wifi_SendString(&huart1, AT_CWLIF_CMD);
 800067a:	491b      	ldr	r1, [pc, #108]	@ (80006e8 <StartWifiTask+0xe4>)
 800067c:	4812      	ldr	r0, [pc, #72]	@ (80006c8 <StartWifiTask+0xc4>)
 800067e:	f7ff fdf1 	bl	8000264 <Wifi_SendString>
        if (Wifi_WaitForString(&huart1, 1000, &result, 1, ".")) {
 8000682:	f107 028f 	add.w	r2, r7, #143	@ 0x8f
 8000686:	4b19      	ldr	r3, [pc, #100]	@ (80006ec <StartWifiTask+0xe8>)
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2301      	movs	r3, #1
 800068c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000690:	480d      	ldr	r0, [pc, #52]	@ (80006c8 <StartWifiTask+0xc4>)
 8000692:	f7ff fdfd 	bl	8000290 <Wifi_WaitForString>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d00f      	beq.n	80006bc <StartWifiTask+0xb8>
            printf("User connected, redirecting...\n");
 800069c:	4814      	ldr	r0, [pc, #80]	@ (80006f0 <StartWifiTask+0xec>)
 800069e:	f005 fa95 	bl	8005bcc <puts>
            // Login sayfasına yönlendirme
            char redirectCmd[128];
            sprintf(redirectCmd, "AT+CIPSTART=\"TCP\",\"%s\",80\r\n", LOGIN_URL);
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	4a13      	ldr	r2, [pc, #76]	@ (80006f4 <StartWifiTask+0xf0>)
 80006a8:	4913      	ldr	r1, [pc, #76]	@ (80006f8 <StartWifiTask+0xf4>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f005 f956 	bl	800595c <siprintf>
            Wifi_SendString(&huart1, redirectCmd);
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	4619      	mov	r1, r3
 80006b6:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <StartWifiTask+0xc4>)
 80006b8:	f7ff fdd4 	bl	8000264 <Wifi_SendString>
        }
        osDelay(1000);  // Her saniye kontrol et
 80006bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006c0:	f002 fd48 	bl	8003154 <osDelay>
        Wifi_SendString(&huart1, AT_CWLIF_CMD);
 80006c4:	e7d9      	b.n	800067a <StartWifiTask+0x76>
 80006c6:	bf00      	nop
 80006c8:	200004d4 	.word	0x200004d4
 80006cc:	08006bd8 	.word	0x08006bd8
 80006d0:	08006be4 	.word	0x08006be4
 80006d4:	08006bf0 	.word	0x08006bf0
 80006d8:	08006bf4 	.word	0x08006bf4
 80006dc:	08006c08 	.word	0x08006c08
 80006e0:	08006c18 	.word	0x08006c18
 80006e4:	08006c24 	.word	0x08006c24
 80006e8:	08006c30 	.word	0x08006c30
 80006ec:	08006c3c 	.word	0x08006c3c
 80006f0:	08006c40 	.word	0x08006c40
 80006f4:	08006c60 	.word	0x08006c60
 80006f8:	08006c8c 	.word	0x08006c8c

080006fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f002 fd25 	bl	8003154 <osDelay>
 800070a:	e7fb      	b.n	8000704 <StartDefaultTask+0x8>

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <Error_Handler+0x8>

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800071e:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <HAL_MspInit+0x68>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a17      	ldr	r2, [pc, #92]	@ (8000780 <HAL_MspInit+0x68>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <HAL_MspInit+0x68>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <HAL_MspInit+0x68>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a11      	ldr	r2, [pc, #68]	@ (8000780 <HAL_MspInit+0x68>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <HAL_MspInit+0x68>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	210f      	movs	r1, #15
 8000752:	f06f 0001 	mvn.w	r0, #1
 8000756:	f000 fad2 	bl	8000cfe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800075a:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <HAL_MspInit+0x6c>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	4a04      	ldr	r2, [pc, #16]	@ (8000784 <HAL_MspInit+0x6c>)
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000
 8000784:	40010000 	.word	0x40010000

08000788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0d      	ldr	r2, [pc, #52]	@ (80007cc <HAL_TIM_Base_MspInit+0x44>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d113      	bne.n	80007c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <HAL_TIM_Base_MspInit+0x48>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4a0c      	ldr	r2, [pc, #48]	@ (80007d0 <HAL_TIM_Base_MspInit+0x48>)
 80007a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007a4:	6193      	str	r3, [r2, #24]
 80007a6:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <HAL_TIM_Base_MspInit+0x48>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2105      	movs	r1, #5
 80007b6:	2019      	movs	r0, #25
 80007b8:	f000 faa1 	bl	8000cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80007bc:	2019      	movs	r0, #25
 80007be:	f000 faba 	bl	8000d36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40012c00 	.word	0x40012c00
 80007d0:	40021000 	.word	0x40021000

080007d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a20      	ldr	r2, [pc, #128]	@ (8000870 <HAL_UART_MspInit+0x9c>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d139      	bne.n	8000868 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000874 <HAL_UART_MspInit+0xa0>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000874 <HAL_UART_MspInit+0xa0>)
 80007fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b1c      	ldr	r3, [pc, #112]	@ (8000874 <HAL_UART_MspInit+0xa0>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <HAL_UART_MspInit+0xa0>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a18      	ldr	r2, [pc, #96]	@ (8000874 <HAL_UART_MspInit+0xa0>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <HAL_UART_MspInit+0xa0>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000824:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000828:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	4619      	mov	r1, r3
 8000838:	480f      	ldr	r0, [pc, #60]	@ (8000878 <HAL_UART_MspInit+0xa4>)
 800083a:	f000 fbd9 	bl	8000ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800083e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000842:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	4619      	mov	r1, r3
 8000852:	4809      	ldr	r0, [pc, #36]	@ (8000878 <HAL_UART_MspInit+0xa4>)
 8000854:	f000 fbcc 	bl	8000ff0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2105      	movs	r1, #5
 800085c:	2025      	movs	r0, #37	@ 0x25
 800085e:	f000 fa4e 	bl	8000cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000862:	2025      	movs	r0, #37	@ 0x25
 8000864:	f000 fa67 	bl	8000d36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40013800 	.word	0x40013800
 8000874:	40021000 	.word	0x40021000
 8000878:	40010800 	.word	0x40010800

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <NMI_Handler+0x4>

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <MemManage_Handler+0x4>

08000894 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b4:	f000 f930 	bl	8000b18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008b8:	f004 f87a 	bl	80049b0 <xTaskGetSchedulerState>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d001      	beq.n	80008c6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008c2:	f004 fde9 	bl	8005498 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008d0:	4802      	ldr	r0, [pc, #8]	@ (80008dc <TIM1_UP_IRQHandler+0x10>)
 80008d2:	f001 f980 	bl	8001bd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000048c 	.word	0x2000048c

080008e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <USART1_IRQHandler+0x10>)
 80008e6:	f001 fdd5 	bl	8002494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200004d4 	.word	0x200004d4

080008f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	e00a      	b.n	800091c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000906:	f3af 8000 	nop.w
 800090a:	4601      	mov	r1, r0
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	60ba      	str	r2, [r7, #8]
 8000912:	b2ca      	uxtb	r2, r1
 8000914:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	3301      	adds	r3, #1
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	429a      	cmp	r2, r3
 8000922:	dbf0      	blt.n	8000906 <_read+0x12>
  }

  return len;
 8000924:	687b      	ldr	r3, [r7, #4]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	e009      	b.n	8000954 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	60ba      	str	r2, [r7, #8]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	3301      	adds	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697a      	ldr	r2, [r7, #20]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	429a      	cmp	r2, r3
 800095a:	dbf1      	blt.n	8000940 <_write+0x12>
  }
  return len;
 800095c:	687b      	ldr	r3, [r7, #4]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <_close>:

int _close(int file)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800098c:	605a      	str	r2, [r3, #4]
  return 0;
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <_isatty>:

int _isatty(int file)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr

080009ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b085      	sub	sp, #20
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
	...

080009c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d0:	4a14      	ldr	r2, [pc, #80]	@ (8000a24 <_sbrk+0x5c>)
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <_sbrk+0x60>)
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009dc:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e4:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <_sbrk+0x64>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	@ (8000a30 <_sbrk+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d207      	bcs.n	8000a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f8:	f005 f90e 	bl	8005c18 <__errno>
 80009fc:	4603      	mov	r3, r0
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a06:	e009      	b.n	8000a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	4a05      	ldr	r2, [pc, #20]	@ (8000a2c <_sbrk+0x64>)
 8000a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000c000 	.word	0x2000c000
 8000a28:	00000400 	.word	0x00000400
 8000a2c:	20000524 	.word	0x20000524
 8000a30:	20001fc0 	.word	0x20001fc0

08000a34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a40:	f7ff fff8 	bl	8000a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480b      	ldr	r0, [pc, #44]	@ (8000a74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a46:	490c      	ldr	r1, [pc, #48]	@ (8000a78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a48:	4a0c      	ldr	r2, [pc, #48]	@ (8000a7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a09      	ldr	r2, [pc, #36]	@ (8000a80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a5c:	4c09      	ldr	r4, [pc, #36]	@ (8000a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f005 f8db 	bl	8005c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6e:	f7ff fca1 	bl	80003b4 <main>
  bx lr
 8000a72:	4770      	bx	lr
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a7c:	08006d78 	.word	0x08006d78
  ldr r2, =_sbss
 8000a80:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a84:	20001fc0 	.word	0x20001fc0

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <HAL_Init+0x28>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	@ (8000ab4 <HAL_Init+0x28>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f923 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fe36 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f93b 	bl	8000d52 <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000af4:	f000 f903 	bl	8000cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	@ (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <HAL_IncTick+0x1c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a03      	ldr	r2, [pc, #12]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000528 	.word	0x20000528

08000b3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b02      	ldr	r3, [pc, #8]	@ (8000b4c <HAL_GetTick+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000528 	.word	0x20000528

08000b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	@ (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	db0b      	blt.n	8000bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f003 021f 	and.w	r2, r3, #31
 8000bcc:	4906      	ldr	r1, [pc, #24]	@ (8000be8 <__NVIC_EnableIRQ+0x34>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	095b      	lsrs	r3, r3, #5
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	@ (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	@ (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	@ 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	@ 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cc8:	f7ff ff90 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff2d 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff42 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff90 	bl	8000c40 <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5f 	bl	8000bec <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff35 	bl	8000bb4 <__NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffa2 	bl	8000ca4 <SysTick_Config>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d008      	beq.n	8000d94 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2204      	movs	r2, #4
 8000d86:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e020      	b.n	8000dd6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 020e 	bic.w	r2, r2, #14
 8000da2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0201 	bic.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d005      	beq.n	8000e04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	73fb      	strb	r3, [r7, #15]
 8000e02:	e0d6      	b.n	8000fb2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 020e 	bic.w	r2, r2, #14
 8000e12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0201 	bic.w	r2, r2, #1
 8000e22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b64      	ldr	r3, [pc, #400]	@ (8000fbc <HAL_DMA_Abort_IT+0x1dc>)
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d958      	bls.n	8000ee2 <HAL_DMA_Abort_IT+0x102>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a62      	ldr	r2, [pc, #392]	@ (8000fc0 <HAL_DMA_Abort_IT+0x1e0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d04f      	beq.n	8000eda <HAL_DMA_Abort_IT+0xfa>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a61      	ldr	r2, [pc, #388]	@ (8000fc4 <HAL_DMA_Abort_IT+0x1e4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d048      	beq.n	8000ed6 <HAL_DMA_Abort_IT+0xf6>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a5f      	ldr	r2, [pc, #380]	@ (8000fc8 <HAL_DMA_Abort_IT+0x1e8>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d040      	beq.n	8000ed0 <HAL_DMA_Abort_IT+0xf0>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a5e      	ldr	r2, [pc, #376]	@ (8000fcc <HAL_DMA_Abort_IT+0x1ec>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d038      	beq.n	8000eca <HAL_DMA_Abort_IT+0xea>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a5c      	ldr	r2, [pc, #368]	@ (8000fd0 <HAL_DMA_Abort_IT+0x1f0>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d030      	beq.n	8000ec4 <HAL_DMA_Abort_IT+0xe4>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a5b      	ldr	r2, [pc, #364]	@ (8000fd4 <HAL_DMA_Abort_IT+0x1f4>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d028      	beq.n	8000ebe <HAL_DMA_Abort_IT+0xde>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a52      	ldr	r2, [pc, #328]	@ (8000fbc <HAL_DMA_Abort_IT+0x1dc>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d020      	beq.n	8000eb8 <HAL_DMA_Abort_IT+0xd8>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a57      	ldr	r2, [pc, #348]	@ (8000fd8 <HAL_DMA_Abort_IT+0x1f8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d019      	beq.n	8000eb4 <HAL_DMA_Abort_IT+0xd4>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a55      	ldr	r2, [pc, #340]	@ (8000fdc <HAL_DMA_Abort_IT+0x1fc>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d012      	beq.n	8000eb0 <HAL_DMA_Abort_IT+0xd0>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a54      	ldr	r2, [pc, #336]	@ (8000fe0 <HAL_DMA_Abort_IT+0x200>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d00a      	beq.n	8000eaa <HAL_DMA_Abort_IT+0xca>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a52      	ldr	r2, [pc, #328]	@ (8000fe4 <HAL_DMA_Abort_IT+0x204>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d102      	bne.n	8000ea4 <HAL_DMA_Abort_IT+0xc4>
 8000e9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea2:	e01b      	b.n	8000edc <HAL_DMA_Abort_IT+0xfc>
 8000ea4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ea8:	e018      	b.n	8000edc <HAL_DMA_Abort_IT+0xfc>
 8000eaa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eae:	e015      	b.n	8000edc <HAL_DMA_Abort_IT+0xfc>
 8000eb0:	2310      	movs	r3, #16
 8000eb2:	e013      	b.n	8000edc <HAL_DMA_Abort_IT+0xfc>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e011      	b.n	8000edc <HAL_DMA_Abort_IT+0xfc>
 8000eb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ebc:	e00e      	b.n	8000edc <HAL_DMA_Abort_IT+0xfc>
 8000ebe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000ec2:	e00b      	b.n	8000edc <HAL_DMA_Abort_IT+0xfc>
 8000ec4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ec8:	e008      	b.n	8000edc <HAL_DMA_Abort_IT+0xfc>
 8000eca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ece:	e005      	b.n	8000edc <HAL_DMA_Abort_IT+0xfc>
 8000ed0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ed4:	e002      	b.n	8000edc <HAL_DMA_Abort_IT+0xfc>
 8000ed6:	2310      	movs	r3, #16
 8000ed8:	e000      	b.n	8000edc <HAL_DMA_Abort_IT+0xfc>
 8000eda:	2301      	movs	r3, #1
 8000edc:	4a42      	ldr	r2, [pc, #264]	@ (8000fe8 <HAL_DMA_Abort_IT+0x208>)
 8000ede:	6053      	str	r3, [r2, #4]
 8000ee0:	e057      	b.n	8000f92 <HAL_DMA_Abort_IT+0x1b2>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a36      	ldr	r2, [pc, #216]	@ (8000fc0 <HAL_DMA_Abort_IT+0x1e0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d04f      	beq.n	8000f8c <HAL_DMA_Abort_IT+0x1ac>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a34      	ldr	r2, [pc, #208]	@ (8000fc4 <HAL_DMA_Abort_IT+0x1e4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d048      	beq.n	8000f88 <HAL_DMA_Abort_IT+0x1a8>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a33      	ldr	r2, [pc, #204]	@ (8000fc8 <HAL_DMA_Abort_IT+0x1e8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d040      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x1a2>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a31      	ldr	r2, [pc, #196]	@ (8000fcc <HAL_DMA_Abort_IT+0x1ec>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d038      	beq.n	8000f7c <HAL_DMA_Abort_IT+0x19c>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a30      	ldr	r2, [pc, #192]	@ (8000fd0 <HAL_DMA_Abort_IT+0x1f0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d030      	beq.n	8000f76 <HAL_DMA_Abort_IT+0x196>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a2e      	ldr	r2, [pc, #184]	@ (8000fd4 <HAL_DMA_Abort_IT+0x1f4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d028      	beq.n	8000f70 <HAL_DMA_Abort_IT+0x190>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a26      	ldr	r2, [pc, #152]	@ (8000fbc <HAL_DMA_Abort_IT+0x1dc>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d020      	beq.n	8000f6a <HAL_DMA_Abort_IT+0x18a>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd8 <HAL_DMA_Abort_IT+0x1f8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d019      	beq.n	8000f66 <HAL_DMA_Abort_IT+0x186>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a29      	ldr	r2, [pc, #164]	@ (8000fdc <HAL_DMA_Abort_IT+0x1fc>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d012      	beq.n	8000f62 <HAL_DMA_Abort_IT+0x182>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a27      	ldr	r2, [pc, #156]	@ (8000fe0 <HAL_DMA_Abort_IT+0x200>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00a      	beq.n	8000f5c <HAL_DMA_Abort_IT+0x17c>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a26      	ldr	r2, [pc, #152]	@ (8000fe4 <HAL_DMA_Abort_IT+0x204>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d102      	bne.n	8000f56 <HAL_DMA_Abort_IT+0x176>
 8000f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f54:	e01b      	b.n	8000f8e <HAL_DMA_Abort_IT+0x1ae>
 8000f56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f5a:	e018      	b.n	8000f8e <HAL_DMA_Abort_IT+0x1ae>
 8000f5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f60:	e015      	b.n	8000f8e <HAL_DMA_Abort_IT+0x1ae>
 8000f62:	2310      	movs	r3, #16
 8000f64:	e013      	b.n	8000f8e <HAL_DMA_Abort_IT+0x1ae>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e011      	b.n	8000f8e <HAL_DMA_Abort_IT+0x1ae>
 8000f6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f6e:	e00e      	b.n	8000f8e <HAL_DMA_Abort_IT+0x1ae>
 8000f70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f74:	e00b      	b.n	8000f8e <HAL_DMA_Abort_IT+0x1ae>
 8000f76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f7a:	e008      	b.n	8000f8e <HAL_DMA_Abort_IT+0x1ae>
 8000f7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f80:	e005      	b.n	8000f8e <HAL_DMA_Abort_IT+0x1ae>
 8000f82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f86:	e002      	b.n	8000f8e <HAL_DMA_Abort_IT+0x1ae>
 8000f88:	2310      	movs	r3, #16
 8000f8a:	e000      	b.n	8000f8e <HAL_DMA_Abort_IT+0x1ae>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <HAL_DMA_Abort_IT+0x20c>)
 8000f90:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	4798      	blx	r3
    } 
  }
  return status;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40020080 	.word	0x40020080
 8000fc0:	40020008 	.word	0x40020008
 8000fc4:	4002001c 	.word	0x4002001c
 8000fc8:	40020030 	.word	0x40020030
 8000fcc:	40020044 	.word	0x40020044
 8000fd0:	40020058 	.word	0x40020058
 8000fd4:	4002006c 	.word	0x4002006c
 8000fd8:	40020408 	.word	0x40020408
 8000fdc:	4002041c 	.word	0x4002041c
 8000fe0:	40020430 	.word	0x40020430
 8000fe4:	40020444 	.word	0x40020444
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	40020000 	.word	0x40020000

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b08b      	sub	sp, #44	@ 0x2c
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001002:	e179      	b.n	80012f8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001004:	2201      	movs	r2, #1
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	429a      	cmp	r2, r3
 800101e:	f040 8168 	bne.w	80012f2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	4a96      	ldr	r2, [pc, #600]	@ (8001280 <HAL_GPIO_Init+0x290>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d05e      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
 800102c:	4a94      	ldr	r2, [pc, #592]	@ (8001280 <HAL_GPIO_Init+0x290>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d875      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 8001032:	4a94      	ldr	r2, [pc, #592]	@ (8001284 <HAL_GPIO_Init+0x294>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d058      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
 8001038:	4a92      	ldr	r2, [pc, #584]	@ (8001284 <HAL_GPIO_Init+0x294>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d86f      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 800103e:	4a92      	ldr	r2, [pc, #584]	@ (8001288 <HAL_GPIO_Init+0x298>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d052      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
 8001044:	4a90      	ldr	r2, [pc, #576]	@ (8001288 <HAL_GPIO_Init+0x298>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d869      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 800104a:	4a90      	ldr	r2, [pc, #576]	@ (800128c <HAL_GPIO_Init+0x29c>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d04c      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
 8001050:	4a8e      	ldr	r2, [pc, #568]	@ (800128c <HAL_GPIO_Init+0x29c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d863      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 8001056:	4a8e      	ldr	r2, [pc, #568]	@ (8001290 <HAL_GPIO_Init+0x2a0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d046      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
 800105c:	4a8c      	ldr	r2, [pc, #560]	@ (8001290 <HAL_GPIO_Init+0x2a0>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d85d      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 8001062:	2b12      	cmp	r3, #18
 8001064:	d82a      	bhi.n	80010bc <HAL_GPIO_Init+0xcc>
 8001066:	2b12      	cmp	r3, #18
 8001068:	d859      	bhi.n	800111e <HAL_GPIO_Init+0x12e>
 800106a:	a201      	add	r2, pc, #4	@ (adr r2, 8001070 <HAL_GPIO_Init+0x80>)
 800106c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001070:	080010eb 	.word	0x080010eb
 8001074:	080010c5 	.word	0x080010c5
 8001078:	080010d7 	.word	0x080010d7
 800107c:	08001119 	.word	0x08001119
 8001080:	0800111f 	.word	0x0800111f
 8001084:	0800111f 	.word	0x0800111f
 8001088:	0800111f 	.word	0x0800111f
 800108c:	0800111f 	.word	0x0800111f
 8001090:	0800111f 	.word	0x0800111f
 8001094:	0800111f 	.word	0x0800111f
 8001098:	0800111f 	.word	0x0800111f
 800109c:	0800111f 	.word	0x0800111f
 80010a0:	0800111f 	.word	0x0800111f
 80010a4:	0800111f 	.word	0x0800111f
 80010a8:	0800111f 	.word	0x0800111f
 80010ac:	0800111f 	.word	0x0800111f
 80010b0:	0800111f 	.word	0x0800111f
 80010b4:	080010cd 	.word	0x080010cd
 80010b8:	080010e1 	.word	0x080010e1
 80010bc:	4a75      	ldr	r2, [pc, #468]	@ (8001294 <HAL_GPIO_Init+0x2a4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010c2:	e02c      	b.n	800111e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	623b      	str	r3, [r7, #32]
          break;
 80010ca:	e029      	b.n	8001120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	3304      	adds	r3, #4
 80010d2:	623b      	str	r3, [r7, #32]
          break;
 80010d4:	e024      	b.n	8001120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	3308      	adds	r3, #8
 80010dc:	623b      	str	r3, [r7, #32]
          break;
 80010de:	e01f      	b.n	8001120 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	330c      	adds	r3, #12
 80010e6:	623b      	str	r3, [r7, #32]
          break;
 80010e8:	e01a      	b.n	8001120 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d102      	bne.n	80010f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010f2:	2304      	movs	r3, #4
 80010f4:	623b      	str	r3, [r7, #32]
          break;
 80010f6:	e013      	b.n	8001120 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d105      	bne.n	800110c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001100:	2308      	movs	r3, #8
 8001102:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	611a      	str	r2, [r3, #16]
          break;
 800110a:	e009      	b.n	8001120 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800110c:	2308      	movs	r3, #8
 800110e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	615a      	str	r2, [r3, #20]
          break;
 8001116:	e003      	b.n	8001120 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
          break;
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x130>
          break;
 800111e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2bff      	cmp	r3, #255	@ 0xff
 8001124:	d801      	bhi.n	800112a <HAL_GPIO_Init+0x13a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	e001      	b.n	800112e <HAL_GPIO_Init+0x13e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3304      	adds	r3, #4
 800112e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2bff      	cmp	r3, #255	@ 0xff
 8001134:	d802      	bhi.n	800113c <HAL_GPIO_Init+0x14c>
 8001136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	e002      	b.n	8001142 <HAL_GPIO_Init+0x152>
 800113c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113e:	3b08      	subs	r3, #8
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	210f      	movs	r1, #15
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	401a      	ands	r2, r3
 8001154:	6a39      	ldr	r1, [r7, #32]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	431a      	orrs	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 80c1 	beq.w	80012f2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001170:	4b49      	ldr	r3, [pc, #292]	@ (8001298 <HAL_GPIO_Init+0x2a8>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a48      	ldr	r2, [pc, #288]	@ (8001298 <HAL_GPIO_Init+0x2a8>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b46      	ldr	r3, [pc, #280]	@ (8001298 <HAL_GPIO_Init+0x2a8>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001188:	4a44      	ldr	r2, [pc, #272]	@ (800129c <HAL_GPIO_Init+0x2ac>)
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	3302      	adds	r3, #2
 8001190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001194:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4013      	ands	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a3c      	ldr	r2, [pc, #240]	@ (80012a0 <HAL_GPIO_Init+0x2b0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d01f      	beq.n	80011f4 <HAL_GPIO_Init+0x204>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a3b      	ldr	r2, [pc, #236]	@ (80012a4 <HAL_GPIO_Init+0x2b4>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d019      	beq.n	80011f0 <HAL_GPIO_Init+0x200>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a3a      	ldr	r2, [pc, #232]	@ (80012a8 <HAL_GPIO_Init+0x2b8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d013      	beq.n	80011ec <HAL_GPIO_Init+0x1fc>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a39      	ldr	r2, [pc, #228]	@ (80012ac <HAL_GPIO_Init+0x2bc>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d00d      	beq.n	80011e8 <HAL_GPIO_Init+0x1f8>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a38      	ldr	r2, [pc, #224]	@ (80012b0 <HAL_GPIO_Init+0x2c0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d007      	beq.n	80011e4 <HAL_GPIO_Init+0x1f4>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a37      	ldr	r2, [pc, #220]	@ (80012b4 <HAL_GPIO_Init+0x2c4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d101      	bne.n	80011e0 <HAL_GPIO_Init+0x1f0>
 80011dc:	2305      	movs	r3, #5
 80011de:	e00a      	b.n	80011f6 <HAL_GPIO_Init+0x206>
 80011e0:	2306      	movs	r3, #6
 80011e2:	e008      	b.n	80011f6 <HAL_GPIO_Init+0x206>
 80011e4:	2304      	movs	r3, #4
 80011e6:	e006      	b.n	80011f6 <HAL_GPIO_Init+0x206>
 80011e8:	2303      	movs	r3, #3
 80011ea:	e004      	b.n	80011f6 <HAL_GPIO_Init+0x206>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e002      	b.n	80011f6 <HAL_GPIO_Init+0x206>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <HAL_GPIO_Init+0x206>
 80011f4:	2300      	movs	r3, #0
 80011f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011f8:	f002 0203 	and.w	r2, r2, #3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	4093      	lsls	r3, r2
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001206:	4925      	ldr	r1, [pc, #148]	@ (800129c <HAL_GPIO_Init+0x2ac>)
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001220:	4b25      	ldr	r3, [pc, #148]	@ (80012b8 <HAL_GPIO_Init+0x2c8>)
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	4924      	ldr	r1, [pc, #144]	@ (80012b8 <HAL_GPIO_Init+0x2c8>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	608b      	str	r3, [r1, #8]
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800122e:	4b22      	ldr	r3, [pc, #136]	@ (80012b8 <HAL_GPIO_Init+0x2c8>)
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	43db      	mvns	r3, r3
 8001236:	4920      	ldr	r1, [pc, #128]	@ (80012b8 <HAL_GPIO_Init+0x2c8>)
 8001238:	4013      	ands	r3, r2
 800123a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d006      	beq.n	8001256 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001248:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <HAL_GPIO_Init+0x2c8>)
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	491a      	ldr	r1, [pc, #104]	@ (80012b8 <HAL_GPIO_Init+0x2c8>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	60cb      	str	r3, [r1, #12]
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001256:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <HAL_GPIO_Init+0x2c8>)
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	43db      	mvns	r3, r3
 800125e:	4916      	ldr	r1, [pc, #88]	@ (80012b8 <HAL_GPIO_Init+0x2c8>)
 8001260:	4013      	ands	r3, r2
 8001262:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d025      	beq.n	80012bc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001270:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <HAL_GPIO_Init+0x2c8>)
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4910      	ldr	r1, [pc, #64]	@ (80012b8 <HAL_GPIO_Init+0x2c8>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
 800127c:	e025      	b.n	80012ca <HAL_GPIO_Init+0x2da>
 800127e:	bf00      	nop
 8001280:	10320000 	.word	0x10320000
 8001284:	10310000 	.word	0x10310000
 8001288:	10220000 	.word	0x10220000
 800128c:	10210000 	.word	0x10210000
 8001290:	10120000 	.word	0x10120000
 8001294:	10110000 	.word	0x10110000
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000
 80012a0:	40010800 	.word	0x40010800
 80012a4:	40010c00 	.word	0x40010c00
 80012a8:	40011000 	.word	0x40011000
 80012ac:	40011400 	.word	0x40011400
 80012b0:	40011800 	.word	0x40011800
 80012b4:	40011c00 	.word	0x40011c00
 80012b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012bc:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <HAL_GPIO_Init+0x324>)
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	4913      	ldr	r1, [pc, #76]	@ (8001314 <HAL_GPIO_Init+0x324>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <HAL_GPIO_Init+0x324>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	490e      	ldr	r1, [pc, #56]	@ (8001314 <HAL_GPIO_Init+0x324>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
 80012e2:	e006      	b.n	80012f2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <HAL_GPIO_Init+0x324>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	4909      	ldr	r1, [pc, #36]	@ (8001314 <HAL_GPIO_Init+0x324>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	3301      	adds	r3, #1
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	f47f ae7e 	bne.w	8001004 <HAL_GPIO_Init+0x14>
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	372c      	adds	r7, #44	@ 0x2c
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	40010400 	.word	0x40010400

08001318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e272      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 8087 	beq.w	8001446 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001338:	4b92      	ldr	r3, [pc, #584]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 030c 	and.w	r3, r3, #12
 8001340:	2b04      	cmp	r3, #4
 8001342:	d00c      	beq.n	800135e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001344:	4b8f      	ldr	r3, [pc, #572]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b08      	cmp	r3, #8
 800134e:	d112      	bne.n	8001376 <HAL_RCC_OscConfig+0x5e>
 8001350:	4b8c      	ldr	r3, [pc, #560]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800135c:	d10b      	bne.n	8001376 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135e:	4b89      	ldr	r3, [pc, #548]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d06c      	beq.n	8001444 <HAL_RCC_OscConfig+0x12c>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d168      	bne.n	8001444 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e24c      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800137e:	d106      	bne.n	800138e <HAL_RCC_OscConfig+0x76>
 8001380:	4b80      	ldr	r3, [pc, #512]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a7f      	ldr	r2, [pc, #508]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	e02e      	b.n	80013ec <HAL_RCC_OscConfig+0xd4>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x98>
 8001396:	4b7b      	ldr	r3, [pc, #492]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a7a      	ldr	r2, [pc, #488]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 800139c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b78      	ldr	r3, [pc, #480]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a77      	ldr	r2, [pc, #476]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e01d      	b.n	80013ec <HAL_RCC_OscConfig+0xd4>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0xbc>
 80013ba:	4b72      	ldr	r3, [pc, #456]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a71      	ldr	r2, [pc, #452]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0xd4>
 80013d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b68      	ldr	r3, [pc, #416]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a67      	ldr	r2, [pc, #412]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fba2 	bl	8000b3c <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fb9e 	bl	8000b3c <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	@ 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e200      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	4b5d      	ldr	r3, [pc, #372]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0xe4>
 800141a:	e014      	b.n	8001446 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fb8e 	bl	8000b3c <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fb8a 	bl	8000b3c <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	@ 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e1ec      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001436:	4b53      	ldr	r3, [pc, #332]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x10c>
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d063      	beq.n	800151a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001452:	4b4c      	ldr	r3, [pc, #304]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00b      	beq.n	8001476 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800145e:	4b49      	ldr	r3, [pc, #292]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b08      	cmp	r3, #8
 8001468:	d11c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x18c>
 800146a:	4b46      	ldr	r3, [pc, #280]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d116      	bne.n	80014a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	4b43      	ldr	r3, [pc, #268]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_RCC_OscConfig+0x176>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e1c0      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4939      	ldr	r1, [pc, #228]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	e03a      	b.n	800151a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d020      	beq.n	80014ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ac:	4b36      	ldr	r3, [pc, #216]	@ (8001588 <HAL_RCC_OscConfig+0x270>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb43 	bl	8000b3c <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ba:	f7ff fb3f 	bl	8000b3c <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e1a1      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4927      	ldr	r1, [pc, #156]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
 80014ec:	e015      	b.n	800151a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ee:	4b26      	ldr	r3, [pc, #152]	@ (8001588 <HAL_RCC_OscConfig+0x270>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fb22 	bl	8000b3c <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff fb1e 	bl	8000b3c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e180      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150e:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d03a      	beq.n	800159c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d019      	beq.n	8001562 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152e:	4b17      	ldr	r3, [pc, #92]	@ (800158c <HAL_RCC_OscConfig+0x274>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7ff fb02 	bl	8000b3c <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fafe 	bl	8000b3c <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e160      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154e:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <HAL_RCC_OscConfig+0x26c>)
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800155a:	2001      	movs	r0, #1
 800155c:	f000 face 	bl	8001afc <RCC_Delay>
 8001560:	e01c      	b.n	800159c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001562:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <HAL_RCC_OscConfig+0x274>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001568:	f7ff fae8 	bl	8000b3c <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156e:	e00f      	b.n	8001590 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001570:	f7ff fae4 	bl	8000b3c <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d908      	bls.n	8001590 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e146      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	42420000 	.word	0x42420000
 800158c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001590:	4b92      	ldr	r3, [pc, #584]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1e9      	bne.n	8001570 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80a6 	beq.w	80016f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ae:	4b8b      	ldr	r3, [pc, #556]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10d      	bne.n	80015d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b88      	ldr	r3, [pc, #544]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a87      	ldr	r2, [pc, #540]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	61d3      	str	r3, [r2, #28]
 80015c6:	4b85      	ldr	r3, [pc, #532]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d2:	2301      	movs	r3, #1
 80015d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d6:	4b82      	ldr	r3, [pc, #520]	@ (80017e0 <HAL_RCC_OscConfig+0x4c8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d118      	bne.n	8001614 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e2:	4b7f      	ldr	r3, [pc, #508]	@ (80017e0 <HAL_RCC_OscConfig+0x4c8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a7e      	ldr	r2, [pc, #504]	@ (80017e0 <HAL_RCC_OscConfig+0x4c8>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ee:	f7ff faa5 	bl	8000b3c <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f6:	f7ff faa1 	bl	8000b3c <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b64      	cmp	r3, #100	@ 0x64
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e103      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001608:	4b75      	ldr	r3, [pc, #468]	@ (80017e0 <HAL_RCC_OscConfig+0x4c8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d106      	bne.n	800162a <HAL_RCC_OscConfig+0x312>
 800161c:	4b6f      	ldr	r3, [pc, #444]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a6e      	ldr	r2, [pc, #440]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6213      	str	r3, [r2, #32]
 8001628:	e02d      	b.n	8001686 <HAL_RCC_OscConfig+0x36e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x334>
 8001632:	4b6a      	ldr	r3, [pc, #424]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a69      	ldr	r2, [pc, #420]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	6213      	str	r3, [r2, #32]
 800163e:	4b67      	ldr	r3, [pc, #412]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a66      	ldr	r2, [pc, #408]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001644:	f023 0304 	bic.w	r3, r3, #4
 8001648:	6213      	str	r3, [r2, #32]
 800164a:	e01c      	b.n	8001686 <HAL_RCC_OscConfig+0x36e>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b05      	cmp	r3, #5
 8001652:	d10c      	bne.n	800166e <HAL_RCC_OscConfig+0x356>
 8001654:	4b61      	ldr	r3, [pc, #388]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4a60      	ldr	r2, [pc, #384]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6213      	str	r3, [r2, #32]
 8001660:	4b5e      	ldr	r3, [pc, #376]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4a5d      	ldr	r2, [pc, #372]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6213      	str	r3, [r2, #32]
 800166c:	e00b      	b.n	8001686 <HAL_RCC_OscConfig+0x36e>
 800166e:	4b5b      	ldr	r3, [pc, #364]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4a5a      	ldr	r2, [pc, #360]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	6213      	str	r3, [r2, #32]
 800167a:	4b58      	ldr	r3, [pc, #352]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a57      	ldr	r2, [pc, #348]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001680:	f023 0304 	bic.w	r3, r3, #4
 8001684:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d015      	beq.n	80016ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168e:	f7ff fa55 	bl	8000b3c <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff fa51 	bl	8000b3c <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e0b1      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ac:	4b4b      	ldr	r3, [pc, #300]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0ee      	beq.n	8001696 <HAL_RCC_OscConfig+0x37e>
 80016b8:	e014      	b.n	80016e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fa3f 	bl	8000b3c <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fa3b 	bl	8000b3c <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e09b      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d8:	4b40      	ldr	r3, [pc, #256]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1ee      	bne.n	80016c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d105      	bne.n	80016f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ea:	4b3c      	ldr	r3, [pc, #240]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	4a3b      	ldr	r2, [pc, #236]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8087 	beq.w	800180e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001700:	4b36      	ldr	r3, [pc, #216]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b08      	cmp	r3, #8
 800170a:	d061      	beq.n	80017d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d146      	bne.n	80017a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001714:	4b33      	ldr	r3, [pc, #204]	@ (80017e4 <HAL_RCC_OscConfig+0x4cc>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7ff fa0f 	bl	8000b3c <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001722:	f7ff fa0b 	bl	8000b3c <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e06d      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001734:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f0      	bne.n	8001722 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001748:	d108      	bne.n	800175c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800174a:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	4921      	ldr	r1, [pc, #132]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800175c:	4b1f      	ldr	r3, [pc, #124]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a19      	ldr	r1, [r3, #32]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176c:	430b      	orrs	r3, r1
 800176e:	491b      	ldr	r1, [pc, #108]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001774:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <HAL_RCC_OscConfig+0x4cc>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff f9df 	bl	8000b3c <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001782:	f7ff f9db 	bl	8000b3c <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e03d      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x46a>
 80017a0:	e035      	b.n	800180e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a2:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <HAL_RCC_OscConfig+0x4cc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7ff f9c8 	bl	8000b3c <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff f9c4 	bl	8000b3c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e026      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x498>
 80017ce:	e01e      	b.n	800180e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d107      	bne.n	80017e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e019      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40007000 	.word	0x40007000
 80017e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <HAL_RCC_OscConfig+0x500>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d001      	beq.n	800180e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000

0800181c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0d0      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001830:	4b6a      	ldr	r3, [pc, #424]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d910      	bls.n	8001860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b67      	ldr	r3, [pc, #412]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 0207 	bic.w	r2, r3, #7
 8001846:	4965      	ldr	r1, [pc, #404]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b63      	ldr	r3, [pc, #396]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0b8      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001878:	4b59      	ldr	r3, [pc, #356]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a58      	ldr	r2, [pc, #352]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001882:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001890:	4b53      	ldr	r3, [pc, #332]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a52      	ldr	r2, [pc, #328]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800189a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800189c:	4b50      	ldr	r3, [pc, #320]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	494d      	ldr	r1, [pc, #308]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d040      	beq.n	800193c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d107      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	4b47      	ldr	r3, [pc, #284]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d115      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e07f      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018da:	4b41      	ldr	r3, [pc, #260]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e073      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ea:	4b3d      	ldr	r3, [pc, #244]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e06b      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fa:	4b39      	ldr	r3, [pc, #228]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f023 0203 	bic.w	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4936      	ldr	r1, [pc, #216]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800190c:	f7ff f916 	bl	8000b3c <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001912:	e00a      	b.n	800192a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001914:	f7ff f912 	bl	8000b3c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e053      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192a:	4b2d      	ldr	r3, [pc, #180]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 020c 	and.w	r2, r3, #12
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	429a      	cmp	r2, r3
 800193a:	d1eb      	bne.n	8001914 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800193c:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d210      	bcs.n	800196c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 0207 	bic.w	r2, r3, #7
 8001952:	4922      	ldr	r1, [pc, #136]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195a:	4b20      	ldr	r3, [pc, #128]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e032      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001978:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4916      	ldr	r1, [pc, #88]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	490e      	ldr	r1, [pc, #56]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019aa:	f000 f821 	bl	80019f0 <HAL_RCC_GetSysClockFreq>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	490a      	ldr	r1, [pc, #40]	@ (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 80019bc:	5ccb      	ldrb	r3, [r1, r3]
 80019be:	fa22 f303 	lsr.w	r3, r2, r3
 80019c2:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <HAL_RCC_ClockConfig+0x1cc>)
 80019c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_RCC_ClockConfig+0x1d0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f874 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40022000 	.word	0x40022000
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08006d08 	.word	0x08006d08
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d002      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0x30>
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d003      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x36>
 8001a1e:	e027      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a20:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a22:	613b      	str	r3, [r7, #16]
      break;
 8001a24:	e027      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	0c9b      	lsrs	r3, r3, #18
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	4a17      	ldr	r2, [pc, #92]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a30:	5cd3      	ldrb	r3, [r2, r3]
 8001a32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d010      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a3e:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	0c5b      	lsrs	r3, r3, #17
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	4a11      	ldr	r2, [pc, #68]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a0d      	ldr	r2, [pc, #52]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a52:	fb03 f202 	mul.w	r2, r3, r2
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e004      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a0c      	ldr	r2, [pc, #48]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a64:	fb02 f303 	mul.w	r3, r2, r3
 8001a68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	613b      	str	r3, [r7, #16]
      break;
 8001a6e:	e002      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a72:	613b      	str	r3, [r7, #16]
      break;
 8001a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a76:	693b      	ldr	r3, [r7, #16]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	007a1200 	.word	0x007a1200
 8001a8c:	08006d20 	.word	0x08006d20
 8001a90:	08006d30 	.word	0x08006d30
 8001a94:	003d0900 	.word	0x003d0900

08001a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a9c:	4b02      	ldr	r3, [pc, #8]	@ (8001aa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	20000000 	.word	0x20000000

08001aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ab0:	f7ff fff2 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	0a1b      	lsrs	r3, r3, #8
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	4903      	ldr	r1, [pc, #12]	@ (8001ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	08006d18 	.word	0x08006d18

08001ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ad8:	f7ff ffde 	bl	8001a98 <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	0adb      	lsrs	r3, r3, #11
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4903      	ldr	r1, [pc, #12]	@ (8001af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40021000 	.word	0x40021000
 8001af8:	08006d18 	.word	0x08006d18

08001afc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b04:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <RCC_Delay+0x34>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <RCC_Delay+0x38>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	0a5b      	lsrs	r3, r3, #9
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b18:	bf00      	nop
  }
  while (Delay --);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1e5a      	subs	r2, r3, #1
 8001b1e:	60fa      	str	r2, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f9      	bne.n	8001b18 <RCC_Delay+0x1c>
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	20000000 	.word	0x20000000
 8001b34:	10624dd3 	.word	0x10624dd3

08001b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e041      	b.n	8001bce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7fe fe12 	bl	8000788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3304      	adds	r3, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	4610      	mov	r0, r2
 8001b78:	f000 fa2a 	bl	8001fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d122      	bne.n	8001c32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d11b      	bne.n	8001c32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f06f 0202 	mvn.w	r2, #2
 8001c02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f9bd 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8001c1e:	e005      	b.n	8001c2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f9b0 	bl	8001f86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f9bf 	bl	8001faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d122      	bne.n	8001c86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d11b      	bne.n	8001c86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f06f 0204 	mvn.w	r2, #4
 8001c56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f993 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8001c72:	e005      	b.n	8001c80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f986 	bl	8001f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f995 	bl	8001faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d122      	bne.n	8001cda <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d11b      	bne.n	8001cda <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f06f 0208 	mvn.w	r2, #8
 8001caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f969 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8001cc6:	e005      	b.n	8001cd4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f95c 	bl	8001f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f96b 	bl	8001faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b10      	cmp	r3, #16
 8001ce6:	d122      	bne.n	8001d2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d11b      	bne.n	8001d2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f06f 0210 	mvn.w	r2, #16
 8001cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2208      	movs	r2, #8
 8001d04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f93f 	bl	8001f98 <HAL_TIM_IC_CaptureCallback>
 8001d1a:	e005      	b.n	8001d28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f932 	bl	8001f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f941 	bl	8001faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d10e      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d107      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f06f 0201 	mvn.w	r2, #1
 8001d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f90d 	bl	8001f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d64:	2b80      	cmp	r3, #128	@ 0x80
 8001d66:	d10e      	bne.n	8001d86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d72:	2b80      	cmp	r3, #128	@ 0x80
 8001d74:	d107      	bne.n	8001d86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 faaa 	bl	80022da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d90:	2b40      	cmp	r3, #64	@ 0x40
 8001d92:	d10e      	bne.n	8001db2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d9e:	2b40      	cmp	r3, #64	@ 0x40
 8001da0:	d107      	bne.n	8001db2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f905 	bl	8001fbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	f003 0320 	and.w	r3, r3, #32
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d10e      	bne.n	8001dde <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d107      	bne.n	8001dde <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f06f 0220 	mvn.w	r2, #32
 8001dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 fa75 	bl	80022c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_TIM_ConfigClockSource+0x1c>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e0b4      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x186>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001e20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001e28:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e3a:	d03e      	beq.n	8001eba <HAL_TIM_ConfigClockSource+0xd4>
 8001e3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e40:	f200 8087 	bhi.w	8001f52 <HAL_TIM_ConfigClockSource+0x16c>
 8001e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e48:	f000 8086 	beq.w	8001f58 <HAL_TIM_ConfigClockSource+0x172>
 8001e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e50:	d87f      	bhi.n	8001f52 <HAL_TIM_ConfigClockSource+0x16c>
 8001e52:	2b70      	cmp	r3, #112	@ 0x70
 8001e54:	d01a      	beq.n	8001e8c <HAL_TIM_ConfigClockSource+0xa6>
 8001e56:	2b70      	cmp	r3, #112	@ 0x70
 8001e58:	d87b      	bhi.n	8001f52 <HAL_TIM_ConfigClockSource+0x16c>
 8001e5a:	2b60      	cmp	r3, #96	@ 0x60
 8001e5c:	d050      	beq.n	8001f00 <HAL_TIM_ConfigClockSource+0x11a>
 8001e5e:	2b60      	cmp	r3, #96	@ 0x60
 8001e60:	d877      	bhi.n	8001f52 <HAL_TIM_ConfigClockSource+0x16c>
 8001e62:	2b50      	cmp	r3, #80	@ 0x50
 8001e64:	d03c      	beq.n	8001ee0 <HAL_TIM_ConfigClockSource+0xfa>
 8001e66:	2b50      	cmp	r3, #80	@ 0x50
 8001e68:	d873      	bhi.n	8001f52 <HAL_TIM_ConfigClockSource+0x16c>
 8001e6a:	2b40      	cmp	r3, #64	@ 0x40
 8001e6c:	d058      	beq.n	8001f20 <HAL_TIM_ConfigClockSource+0x13a>
 8001e6e:	2b40      	cmp	r3, #64	@ 0x40
 8001e70:	d86f      	bhi.n	8001f52 <HAL_TIM_ConfigClockSource+0x16c>
 8001e72:	2b30      	cmp	r3, #48	@ 0x30
 8001e74:	d064      	beq.n	8001f40 <HAL_TIM_ConfigClockSource+0x15a>
 8001e76:	2b30      	cmp	r3, #48	@ 0x30
 8001e78:	d86b      	bhi.n	8001f52 <HAL_TIM_ConfigClockSource+0x16c>
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d060      	beq.n	8001f40 <HAL_TIM_ConfigClockSource+0x15a>
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	d867      	bhi.n	8001f52 <HAL_TIM_ConfigClockSource+0x16c>
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d05c      	beq.n	8001f40 <HAL_TIM_ConfigClockSource+0x15a>
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d05a      	beq.n	8001f40 <HAL_TIM_ConfigClockSource+0x15a>
 8001e8a:	e062      	b.n	8001f52 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e9c:	f000 f989 	bl	80021b2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001eae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	609a      	str	r2, [r3, #8]
      break;
 8001eb8:	e04f      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001eca:	f000 f972 	bl	80021b2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001edc:	609a      	str	r2, [r3, #8]
      break;
 8001ede:	e03c      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eec:	461a      	mov	r2, r3
 8001eee:	f000 f8e9 	bl	80020c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2150      	movs	r1, #80	@ 0x50
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f940 	bl	800217e <TIM_ITRx_SetConfig>
      break;
 8001efe:	e02c      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f000 f907 	bl	8002120 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2160      	movs	r1, #96	@ 0x60
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 f930 	bl	800217e <TIM_ITRx_SetConfig>
      break;
 8001f1e:	e01c      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f000 f8c9 	bl	80020c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2140      	movs	r1, #64	@ 0x40
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 f920 	bl	800217e <TIM_ITRx_SetConfig>
      break;
 8001f3e:	e00c      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f000 f917 	bl	800217e <TIM_ITRx_SetConfig>
      break;
 8001f50:	e003      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
      break;
 8001f56:	e000      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
	...

08001fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a33      	ldr	r2, [pc, #204]	@ (80020b0 <TIM_Base_SetConfig+0xe0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a32      	ldr	r2, [pc, #200]	@ (80020b4 <TIM_Base_SetConfig+0xe4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00f      	beq.n	8002010 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff6:	d00b      	beq.n	8002010 <TIM_Base_SetConfig+0x40>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80020b8 <TIM_Base_SetConfig+0xe8>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d007      	beq.n	8002010 <TIM_Base_SetConfig+0x40>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a2e      	ldr	r2, [pc, #184]	@ (80020bc <TIM_Base_SetConfig+0xec>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d003      	beq.n	8002010 <TIM_Base_SetConfig+0x40>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a2d      	ldr	r2, [pc, #180]	@ (80020c0 <TIM_Base_SetConfig+0xf0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d108      	bne.n	8002022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a22      	ldr	r2, [pc, #136]	@ (80020b0 <TIM_Base_SetConfig+0xe0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <TIM_Base_SetConfig+0x82>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a21      	ldr	r2, [pc, #132]	@ (80020b4 <TIM_Base_SetConfig+0xe4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00f      	beq.n	8002052 <TIM_Base_SetConfig+0x82>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002038:	d00b      	beq.n	8002052 <TIM_Base_SetConfig+0x82>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a1e      	ldr	r2, [pc, #120]	@ (80020b8 <TIM_Base_SetConfig+0xe8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <TIM_Base_SetConfig+0x82>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a1d      	ldr	r2, [pc, #116]	@ (80020bc <TIM_Base_SetConfig+0xec>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d003      	beq.n	8002052 <TIM_Base_SetConfig+0x82>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a1c      	ldr	r2, [pc, #112]	@ (80020c0 <TIM_Base_SetConfig+0xf0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d108      	bne.n	8002064 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a09      	ldr	r2, [pc, #36]	@ (80020b0 <TIM_Base_SetConfig+0xe0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d003      	beq.n	8002098 <TIM_Base_SetConfig+0xc8>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a08      	ldr	r2, [pc, #32]	@ (80020b4 <TIM_Base_SetConfig+0xe4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d103      	bne.n	80020a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	615a      	str	r2, [r3, #20]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	40012c00 	.word	0x40012c00
 80020b4:	40013400 	.word	0x40013400
 80020b8:	40000400 	.word	0x40000400
 80020bc:	40000800 	.word	0x40000800
 80020c0:	40000c00 	.word	0x40000c00

080020c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	f023 0201 	bic.w	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f023 030a 	bic.w	r3, r3, #10
 8002100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4313      	orrs	r3, r2
 8002108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	621a      	str	r2, [r3, #32]
}
 8002116:	bf00      	nop
 8002118:	371c      	adds	r7, #28
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002120:	b480      	push	{r7}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	f023 0210 	bic.w	r2, r3, #16
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800214a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	031b      	lsls	r3, r3, #12
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800215c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	621a      	str	r2, [r3, #32]
}
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	f043 0307 	orr.w	r3, r3, #7
 80021a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	609a      	str	r2, [r3, #8]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b087      	sub	sp, #28
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	021a      	lsls	r2, r3, #8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	4313      	orrs	r3, r2
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	609a      	str	r2, [r3, #8]
}
 80021e6:	bf00      	nop
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002204:	2302      	movs	r3, #2
 8002206:	e050      	b.n	80022aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800222e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1b      	ldr	r2, [pc, #108]	@ (80022b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d018      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a19      	ldr	r2, [pc, #100]	@ (80022b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800225e:	d00e      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a15      	ldr	r2, [pc, #84]	@ (80022bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d009      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a14      	ldr	r2, [pc, #80]	@ (80022c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d004      	beq.n	800227e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a12      	ldr	r2, [pc, #72]	@ (80022c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10c      	bne.n	8002298 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4313      	orrs	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	40012c00 	.word	0x40012c00
 80022b8:	40013400 	.word	0x40013400
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40000800 	.word	0x40000800
 80022c4:	40000c00 	.word	0x40000c00

080022c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr

080022da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e042      	b.n	8002384 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe fa5e 	bl	80007d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2224      	movs	r2, #36	@ 0x24
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800232e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fd71 	bl	8002e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	@ 0x28
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d16d      	bne.n	8002488 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_UART_Transmit+0x2c>
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e066      	b.n	800248a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2221      	movs	r2, #33	@ 0x21
 80023c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023ca:	f7fe fbb7 	bl	8000b3c <HAL_GetTick>
 80023ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	88fa      	ldrh	r2, [r7, #6]
 80023d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	88fa      	ldrh	r2, [r7, #6]
 80023da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023e4:	d108      	bne.n	80023f8 <HAL_UART_Transmit+0x6c>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d104      	bne.n	80023f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	e003      	b.n	8002400 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002400:	e02a      	b.n	8002458 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2200      	movs	r2, #0
 800240a:	2180      	movs	r1, #128	@ 0x80
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 faf9 	bl	8002a04 <UART_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e036      	b.n	800248a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10b      	bne.n	800243a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002430:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	3302      	adds	r3, #2
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	e007      	b.n	800244a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	3301      	adds	r3, #1
 8002448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800244e:	b29b      	uxth	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1cf      	bne.n	8002402 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2200      	movs	r2, #0
 800246a:	2140      	movs	r1, #64	@ 0x40
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fac9 	bl	8002a04 <UART_WaitOnFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e006      	b.n	800248a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	e000      	b.n	800248a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002488:	2302      	movs	r3, #2
  }
}
 800248a:	4618      	mov	r0, r3
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b0ba      	sub	sp, #232	@ 0xe8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80024d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10f      	bne.n	80024fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024de:	f003 0320 	and.w	r3, r3, #32
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <HAL_UART_IRQHandler+0x66>
 80024e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fbd1 	bl	8002c9a <UART_Receive_IT>
      return;
 80024f8:	e25b      	b.n	80029b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80de 	beq.w	80026c0 <HAL_UART_IRQHandler+0x22c>
 8002504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d106      	bne.n	800251e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002514:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80d1 	beq.w	80026c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800251e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_UART_IRQHandler+0xae>
 800252a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800252e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	f043 0201 	orr.w	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <HAL_UART_IRQHandler+0xd2>
 800254e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f043 0202 	orr.w	r2, r3, #2
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_UART_IRQHandler+0xf6>
 8002572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f043 0204 	orr.w	r2, r3, #4
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800258a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d011      	beq.n	80025ba <HAL_UART_IRQHandler+0x126>
 8002596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	f043 0208 	orr.w	r2, r3, #8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 81f2 	beq.w	80029a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_UART_IRQHandler+0x14e>
 80025d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 fb5c 	bl	8002c9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf14      	ite	ne
 80025f0:	2301      	movne	r3, #1
 80025f2:	2300      	moveq	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d103      	bne.n	800260e <HAL_UART_IRQHandler+0x17a>
 8002606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d04f      	beq.n	80026ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fa66 	bl	8002ae0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d041      	beq.n	80026a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	3314      	adds	r3, #20
 8002628:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002630:	e853 3f00 	ldrex	r3, [r3]
 8002634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002638:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800263c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002640:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3314      	adds	r3, #20
 800264a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800264e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800265a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800265e:	e841 2300 	strex	r3, r2, [r1]
 8002662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1d9      	bne.n	8002622 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002672:	2b00      	cmp	r3, #0
 8002674:	d013      	beq.n	800269e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267a:	4a7e      	ldr	r2, [pc, #504]	@ (8002874 <HAL_UART_IRQHandler+0x3e0>)
 800267c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fbac 	bl	8000de0 <HAL_DMA_Abort_IT>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d016      	beq.n	80026bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002698:	4610      	mov	r0, r2
 800269a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800269c:	e00e      	b.n	80026bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f99c 	bl	80029dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a4:	e00a      	b.n	80026bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f998 	bl	80029dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ac:	e006      	b.n	80026bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f994 	bl	80029dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80026ba:	e175      	b.n	80029a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026bc:	bf00      	nop
    return;
 80026be:	e173      	b.n	80029a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	f040 814f 	bne.w	8002968 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8148 	beq.w	8002968 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80026d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8141 	beq.w	8002968 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80b6 	beq.w	8002878 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002718:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8145 	beq.w	80029ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800272a:	429a      	cmp	r2, r3
 800272c:	f080 813e 	bcs.w	80029ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002736:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b20      	cmp	r3, #32
 8002740:	f000 8088 	beq.w	8002854 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	330c      	adds	r3, #12
 800274a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002752:	e853 3f00 	ldrex	r3, [r3]
 8002756:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800275a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800275e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002762:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	330c      	adds	r3, #12
 800276c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002770:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002774:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002778:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800277c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002780:	e841 2300 	strex	r3, r2, [r1]
 8002784:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002788:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1d9      	bne.n	8002744 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3314      	adds	r3, #20
 8002796:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002798:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800279a:	e853 3f00 	ldrex	r3, [r3]
 800279e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80027a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	3314      	adds	r3, #20
 80027b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027b4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80027b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80027bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80027c0:	e841 2300 	strex	r3, r2, [r1]
 80027c4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80027c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e1      	bne.n	8002790 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3314      	adds	r3, #20
 80027d2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027d6:	e853 3f00 	ldrex	r3, [r3]
 80027da:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80027dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3314      	adds	r3, #20
 80027ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80027f0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80027f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027f8:	e841 2300 	strex	r3, r2, [r1]
 80027fc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80027fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1e3      	bne.n	80027cc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	330c      	adds	r3, #12
 8002818:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800281c:	e853 3f00 	ldrex	r3, [r3]
 8002820:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002824:	f023 0310 	bic.w	r3, r3, #16
 8002828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	330c      	adds	r3, #12
 8002832:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002836:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002838:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800283c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800283e:	e841 2300 	strex	r3, r2, [r1]
 8002842:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1e3      	bne.n	8002812 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fa8b 	bl	8000d6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002862:	b29b      	uxth	r3, r3
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	b29b      	uxth	r3, r3
 8002868:	4619      	mov	r1, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f8bf 	bl	80029ee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002870:	e09c      	b.n	80029ac <HAL_UART_IRQHandler+0x518>
 8002872:	bf00      	nop
 8002874:	08002ba5 	.word	0x08002ba5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002880:	b29b      	uxth	r3, r3
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 808e 	beq.w	80029b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002894:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 8089 	beq.w	80029b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	330c      	adds	r3, #12
 80028a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a8:	e853 3f00 	ldrex	r3, [r3]
 80028ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80028ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	330c      	adds	r3, #12
 80028be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80028c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80028c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028ca:	e841 2300 	strex	r3, r2, [r1]
 80028ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80028d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1e3      	bne.n	800289e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	3314      	adds	r3, #20
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	e853 3f00 	ldrex	r3, [r3]
 80028e4:	623b      	str	r3, [r7, #32]
   return(result);
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	f023 0301 	bic.w	r3, r3, #1
 80028ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3314      	adds	r3, #20
 80028f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80028fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80028fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002902:	e841 2300 	strex	r3, r2, [r1]
 8002906:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1e3      	bne.n	80028d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	330c      	adds	r3, #12
 8002922:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	e853 3f00 	ldrex	r3, [r3]
 800292a:	60fb      	str	r3, [r7, #12]
   return(result);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f023 0310 	bic.w	r3, r3, #16
 8002932:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	330c      	adds	r3, #12
 800293c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002940:	61fa      	str	r2, [r7, #28]
 8002942:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002944:	69b9      	ldr	r1, [r7, #24]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	e841 2300 	strex	r3, r2, [r1]
 800294c:	617b      	str	r3, [r7, #20]
   return(result);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1e3      	bne.n	800291c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800295a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800295e:	4619      	mov	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f844 	bl	80029ee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002966:	e023      	b.n	80029b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800296c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002970:	2b00      	cmp	r3, #0
 8002972:	d009      	beq.n	8002988 <HAL_UART_IRQHandler+0x4f4>
 8002974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f923 	bl	8002bcc <UART_Transmit_IT>
    return;
 8002986:	e014      	b.n	80029b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800298c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00e      	beq.n	80029b2 <HAL_UART_IRQHandler+0x51e>
 8002994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f962 	bl	8002c6a <UART_EndTransmit_IT>
    return;
 80029a6:	e004      	b.n	80029b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80029a8:	bf00      	nop
 80029aa:	e002      	b.n	80029b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80029ac:	bf00      	nop
 80029ae:	e000      	b.n	80029b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80029b0:	bf00      	nop
  }
}
 80029b2:	37e8      	adds	r7, #232	@ 0xe8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b090      	sub	sp, #64	@ 0x40
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a14:	e050      	b.n	8002ab8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a1c:	d04c      	beq.n	8002ab8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a24:	f7fe f88a 	bl	8000b3c <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d241      	bcs.n	8002ab8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3e:	e853 3f00 	ldrex	r3, [r3]
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a46:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a54:	637a      	str	r2, [r7, #52]	@ 0x34
 8002a56:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a5c:	e841 2300 	strex	r3, r2, [r1]
 8002a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1e5      	bne.n	8002a34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3314      	adds	r3, #20
 8002a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	e853 3f00 	ldrex	r3, [r3]
 8002a76:	613b      	str	r3, [r7, #16]
   return(result);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	3314      	adds	r3, #20
 8002a86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a88:	623a      	str	r2, [r7, #32]
 8002a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8c:	69f9      	ldr	r1, [r7, #28]
 8002a8e:	6a3a      	ldr	r2, [r7, #32]
 8002a90:	e841 2300 	strex	r3, r2, [r1]
 8002a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e5      	bne.n	8002a68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e00f      	b.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d09f      	beq.n	8002a16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3740      	adds	r7, #64	@ 0x40
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b095      	sub	sp, #84	@ 0x54
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	330c      	adds	r3, #12
 8002aee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af2:	e853 3f00 	ldrex	r3, [r3]
 8002af6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b08:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b10:	e841 2300 	strex	r3, r2, [r1]
 8002b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1e5      	bne.n	8002ae8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3314      	adds	r3, #20
 8002b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	e853 3f00 	ldrex	r3, [r3]
 8002b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3314      	adds	r3, #20
 8002b3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b44:	e841 2300 	strex	r3, r2, [r1]
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e5      	bne.n	8002b1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d119      	bne.n	8002b8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	330c      	adds	r3, #12
 8002b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	e853 3f00 	ldrex	r3, [r3]
 8002b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f023 0310 	bic.w	r3, r3, #16
 8002b6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	330c      	adds	r3, #12
 8002b76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b78:	61ba      	str	r2, [r7, #24]
 8002b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7c:	6979      	ldr	r1, [r7, #20]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	e841 2300 	strex	r3, r2, [r1]
 8002b84:	613b      	str	r3, [r7, #16]
   return(result);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e5      	bne.n	8002b58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b9a:	bf00      	nop
 8002b9c:	3754      	adds	r7, #84	@ 0x54
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7ff ff0c 	bl	80029dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b21      	cmp	r3, #33	@ 0x21
 8002bde:	d13e      	bne.n	8002c5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002be8:	d114      	bne.n	8002c14 <UART_Transmit_IT+0x48>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d110      	bne.n	8002c14 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	1c9a      	adds	r2, r3, #2
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	621a      	str	r2, [r3, #32]
 8002c12:	e008      	b.n	8002c26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	1c59      	adds	r1, r3, #1
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6211      	str	r1, [r2, #32]
 8002c1e:	781a      	ldrb	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	4619      	mov	r1, r3
 8002c34:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10f      	bne.n	8002c5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e000      	b.n	8002c60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c5e:	2302      	movs	r3, #2
  }
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff fe94 	bl	80029b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b08c      	sub	sp, #48	@ 0x30
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b22      	cmp	r3, #34	@ 0x22
 8002cac:	f040 80ae 	bne.w	8002e0c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cb8:	d117      	bne.n	8002cea <UART_Receive_IT+0x50>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d113      	bne.n	8002cea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce2:	1c9a      	adds	r2, r3, #2
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ce8:	e026      	b.n	8002d38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cfc:	d007      	beq.n	8002d0e <UART_Receive_IT+0x74>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <UART_Receive_IT+0x82>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	e008      	b.n	8002d2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4619      	mov	r1, r3
 8002d46:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d15d      	bne.n	8002e08 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0220 	bic.w	r2, r2, #32
 8002d5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d135      	bne.n	8002dfe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	330c      	adds	r3, #12
 8002d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	e853 3f00 	ldrex	r3, [r3]
 8002da6:	613b      	str	r3, [r7, #16]
   return(result);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f023 0310 	bic.w	r3, r3, #16
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	330c      	adds	r3, #12
 8002db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db8:	623a      	str	r2, [r7, #32]
 8002dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbc:	69f9      	ldr	r1, [r7, #28]
 8002dbe:	6a3a      	ldr	r2, [r7, #32]
 8002dc0:	e841 2300 	strex	r3, r2, [r1]
 8002dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e5      	bne.n	8002d98 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b10      	cmp	r3, #16
 8002dd8:	d10a      	bne.n	8002df0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002df4:	4619      	mov	r1, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fdf9 	bl	80029ee <HAL_UARTEx_RxEventCallback>
 8002dfc:	e002      	b.n	8002e04 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff fde3 	bl	80029ca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e002      	b.n	8002e0e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e000      	b.n	8002e0e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3730      	adds	r7, #48	@ 0x30
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002e52:	f023 030c 	bic.w	r3, r3, #12
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8002f2c <UART_SetConfig+0x114>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d103      	bne.n	8002e88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e80:	f7fe fe28 	bl	8001ad4 <HAL_RCC_GetPCLK2Freq>
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	e002      	b.n	8002e8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e88:	f7fe fe10 	bl	8001aac <HAL_RCC_GetPCLK1Freq>
 8002e8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	009a      	lsls	r2, r3, #2
 8002e98:	441a      	add	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	4a22      	ldr	r2, [pc, #136]	@ (8002f30 <UART_SetConfig+0x118>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	0119      	lsls	r1, r3, #4
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009a      	lsls	r2, r3, #2
 8002eb8:	441a      	add	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f30 <UART_SetConfig+0x118>)
 8002ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	2064      	movs	r0, #100	@ 0x64
 8002ece:	fb00 f303 	mul.w	r3, r0, r3
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	3332      	adds	r3, #50	@ 0x32
 8002ed8:	4a15      	ldr	r2, [pc, #84]	@ (8002f30 <UART_SetConfig+0x118>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ee4:	4419      	add	r1, r3
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009a      	lsls	r2, r3, #2
 8002ef0:	441a      	add	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002efc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f30 <UART_SetConfig+0x118>)
 8002efe:	fba3 0302 	umull	r0, r3, r3, r2
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2064      	movs	r0, #100	@ 0x64
 8002f06:	fb00 f303 	mul.w	r3, r0, r3
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	3332      	adds	r3, #50	@ 0x32
 8002f10:	4a07      	ldr	r2, [pc, #28]	@ (8002f30 <UART_SetConfig+0x118>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	f003 020f 	and.w	r2, r3, #15
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	440a      	add	r2, r1
 8002f22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40013800 	.word	0x40013800
 8002f30:	51eb851f 	.word	0x51eb851f

08002f34 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f3a:	f3ef 8305 	mrs	r3, IPSR
 8002f3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10f      	bne.n	8002f66 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f46:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4a:	607b      	str	r3, [r7, #4]
  return(result);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <osKernelInitialize+0x32>
 8002f52:	4b10      	ldr	r3, [pc, #64]	@ (8002f94 <osKernelInitialize+0x60>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d109      	bne.n	8002f6e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8002f5e:	603b      	str	r3, [r7, #0]
  return(result);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002f66:	f06f 0305 	mvn.w	r3, #5
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	e00c      	b.n	8002f88 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f6e:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <osKernelInitialize+0x60>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002f76:	4b07      	ldr	r3, [pc, #28]	@ (8002f94 <osKernelInitialize+0x60>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e002      	b.n	8002f88 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002f82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002f88:	68fb      	ldr	r3, [r7, #12]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	2000052c 	.word	0x2000052c

08002f98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f9e:	f3ef 8305 	mrs	r3, IPSR
 8002fa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10f      	bne.n	8002fca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002faa:	f3ef 8310 	mrs	r3, PRIMASK
 8002fae:	607b      	str	r3, [r7, #4]
  return(result);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <osKernelStart+0x32>
 8002fb6:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <osKernelStart+0x64>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d109      	bne.n	8002fd2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fbe:	f3ef 8311 	mrs	r3, BASEPRI
 8002fc2:	603b      	str	r3, [r7, #0]
  return(result);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002fca:	f06f 0305 	mvn.w	r3, #5
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	e00e      	b.n	8002ff0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <osKernelStart+0x64>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d107      	bne.n	8002fea <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002fda:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <osKernelStart+0x64>)
 8002fdc:	2202      	movs	r2, #2
 8002fde:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002fe0:	f001 f890 	bl	8004104 <vTaskStartScheduler>
      stat = osOK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	e002      	b.n	8002ff0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000052c 	.word	0x2000052c

08003000 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b092      	sub	sp, #72	@ 0x48
 8003004:	af04      	add	r7, sp, #16
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003010:	f3ef 8305 	mrs	r3, IPSR
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003018:	2b00      	cmp	r3, #0
 800301a:	f040 8094 	bne.w	8003146 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800301e:	f3ef 8310 	mrs	r3, PRIMASK
 8003022:	623b      	str	r3, [r7, #32]
  return(result);
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f040 808d 	bne.w	8003146 <osThreadNew+0x146>
 800302c:	4b48      	ldr	r3, [pc, #288]	@ (8003150 <osThreadNew+0x150>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d106      	bne.n	8003042 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003034:	f3ef 8311 	mrs	r3, BASEPRI
 8003038:	61fb      	str	r3, [r7, #28]
  return(result);
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f040 8082 	bne.w	8003146 <osThreadNew+0x146>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d07e      	beq.n	8003146 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003048:	2380      	movs	r3, #128	@ 0x80
 800304a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800304c:	2318      	movs	r3, #24
 800304e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003050:	2300      	movs	r3, #0
 8003052:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003054:	f107 031b 	add.w	r3, r7, #27
 8003058:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800305e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d045      	beq.n	80030f2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <osThreadNew+0x74>
        name = attr->name;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <osThreadNew+0x9a>
 8003088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308a:	2b38      	cmp	r3, #56	@ 0x38
 800308c:	d805      	bhi.n	800309a <osThreadNew+0x9a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <osThreadNew+0x9e>
        return (NULL);
 800309a:	2300      	movs	r3, #0
 800309c:	e054      	b.n	8003148 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	089b      	lsrs	r3, r3, #2
 80030ac:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00e      	beq.n	80030d4 <osThreadNew+0xd4>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	2b5b      	cmp	r3, #91	@ 0x5b
 80030bc:	d90a      	bls.n	80030d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d006      	beq.n	80030d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <osThreadNew+0xd4>
        mem = 1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030d2:	e010      	b.n	80030f6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10c      	bne.n	80030f6 <osThreadNew+0xf6>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d108      	bne.n	80030f6 <osThreadNew+0xf6>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d104      	bne.n	80030f6 <osThreadNew+0xf6>
          mem = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030f0:	e001      	b.n	80030f6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80030f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d110      	bne.n	800311e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003104:	9202      	str	r2, [sp, #8]
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003110:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fe24 	bl	8003d60 <xTaskCreateStatic>
 8003118:	4603      	mov	r3, r0
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	e013      	b.n	8003146 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800311e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003120:	2b00      	cmp	r3, #0
 8003122:	d110      	bne.n	8003146 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003126:	b29a      	uxth	r2, r3
 8003128:	f107 0314 	add.w	r3, r7, #20
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fe71 	bl	8003e1e <xTaskCreate>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <osThreadNew+0x146>
          hTask = NULL;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003146:	697b      	ldr	r3, [r7, #20]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3738      	adds	r7, #56	@ 0x38
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	2000052c 	.word	0x2000052c

08003154 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800315c:	f3ef 8305 	mrs	r3, IPSR
 8003160:	613b      	str	r3, [r7, #16]
  return(result);
 8003162:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10f      	bne.n	8003188 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003168:	f3ef 8310 	mrs	r3, PRIMASK
 800316c:	60fb      	str	r3, [r7, #12]
  return(result);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d109      	bne.n	8003188 <osDelay+0x34>
 8003174:	4b0d      	ldr	r3, [pc, #52]	@ (80031ac <osDelay+0x58>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d109      	bne.n	8003190 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800317c:	f3ef 8311 	mrs	r3, BASEPRI
 8003180:	60bb      	str	r3, [r7, #8]
  return(result);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <osDelay+0x3c>
    stat = osErrorISR;
 8003188:	f06f 0305 	mvn.w	r3, #5
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	e007      	b.n	80031a0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 ff7c 	bl	8004098 <vTaskDelay>
    }
  }

  return (stat);
 80031a0:	697b      	ldr	r3, [r7, #20]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	2000052c 	.word	0x2000052c

080031b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a06      	ldr	r2, [pc, #24]	@ (80031d8 <vApplicationGetIdleTaskMemory+0x28>)
 80031c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4a05      	ldr	r2, [pc, #20]	@ (80031dc <vApplicationGetIdleTaskMemory+0x2c>)
 80031c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2280      	movs	r2, #128	@ 0x80
 80031cc:	601a      	str	r2, [r3, #0]
}
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	20000530 	.word	0x20000530
 80031dc:	2000058c 	.word	0x2000058c

080031e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4a07      	ldr	r2, [pc, #28]	@ (800320c <vApplicationGetTimerTaskMemory+0x2c>)
 80031f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4a06      	ldr	r2, [pc, #24]	@ (8003210 <vApplicationGetTimerTaskMemory+0x30>)
 80031f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031fe:	601a      	str	r2, [r3, #0]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	2000078c 	.word	0x2000078c
 8003210:	200007e8 	.word	0x200007e8

08003214 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f103 0208 	add.w	r2, r3, #8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800322c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f103 0208 	add.w	r2, r3, #8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f103 0208 	add.w	r2, r3, #8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr

0800326a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800326a:	b480      	push	{r7}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	601a      	str	r2, [r3, #0]
}
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032c6:	d103      	bne.n	80032d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	e00c      	b.n	80032ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3308      	adds	r3, #8
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	e002      	b.n	80032de <vListInsert+0x2e>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d2f6      	bcs.n	80032d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	601a      	str	r2, [r3, #0]
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6892      	ldr	r2, [r2, #8]
 8003336:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6852      	ldr	r2, [r2, #4]
 8003340:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	429a      	cmp	r2, r3
 800334a:	d103      	bne.n	8003354 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	1e5a      	subs	r2, r3, #1
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
	...

08003374 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800339a:	bf00      	nop
 800339c:	bf00      	nop
 800339e:	e7fd      	b.n	800339c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033a0:	f001 fffc 	bl	800539c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ac:	68f9      	ldr	r1, [r7, #12]
 80033ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	441a      	add	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d0:	3b01      	subs	r3, #1
 80033d2:	68f9      	ldr	r1, [r7, #12]
 80033d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	441a      	add	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	22ff      	movs	r2, #255	@ 0xff
 80033e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	22ff      	movs	r2, #255	@ 0xff
 80033ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d114      	bne.n	8003420 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01a      	beq.n	8003434 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3310      	adds	r3, #16
 8003402:	4618      	mov	r0, r3
 8003404:	f001 f910 	bl	8004628 <xTaskRemoveFromEventList>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d012      	beq.n	8003434 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800340e:	4b0d      	ldr	r3, [pc, #52]	@ (8003444 <xQueueGenericReset+0xd0>)
 8003410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	e009      	b.n	8003434 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3310      	adds	r3, #16
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fef5 	bl	8003214 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3324      	adds	r3, #36	@ 0x24
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fef0 	bl	8003214 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003434:	f001 ffe2 	bl	80053fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003438:	2301      	movs	r3, #1
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	e000ed04 	.word	0xe000ed04

08003448 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08e      	sub	sp, #56	@ 0x38
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10b      	bne.n	8003474 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800345c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800346e:	bf00      	nop
 8003470:	bf00      	nop
 8003472:	e7fd      	b.n	8003470 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10b      	bne.n	8003492 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	e7fd      	b.n	800348e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <xQueueGenericCreateStatic+0x56>
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <xQueueGenericCreateStatic+0x5a>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <xQueueGenericCreateStatic+0x5c>
 80034a2:	2300      	movs	r3, #0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10b      	bne.n	80034c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	623b      	str	r3, [r7, #32]
}
 80034ba:	bf00      	nop
 80034bc:	bf00      	nop
 80034be:	e7fd      	b.n	80034bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <xQueueGenericCreateStatic+0x84>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <xQueueGenericCreateStatic+0x88>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <xQueueGenericCreateStatic+0x8a>
 80034d0:	2300      	movs	r3, #0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10b      	bne.n	80034ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80034d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	61fb      	str	r3, [r7, #28]
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	e7fd      	b.n	80034ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80034ee:	2350      	movs	r3, #80	@ 0x50
 80034f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b50      	cmp	r3, #80	@ 0x50
 80034f6:	d00b      	beq.n	8003510 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	61bb      	str	r3, [r7, #24]
}
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800351a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003522:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	4613      	mov	r3, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f805 	bl	8003540 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003538:	4618      	mov	r0, r3
 800353a:	3730      	adds	r7, #48	@ 0x30
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d103      	bne.n	800355c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	e002      	b.n	8003562 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800356e:	2101      	movs	r1, #1
 8003570:	69b8      	ldr	r0, [r7, #24]
 8003572:	f7ff feff 	bl	8003374 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08e      	sub	sp, #56	@ 0x38
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003596:	2300      	movs	r3, #0
 8003598:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800359e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10b      	bne.n	80035bc <xQueueGenericSend+0x34>
	__asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035b6:	bf00      	nop
 80035b8:	bf00      	nop
 80035ba:	e7fd      	b.n	80035b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d103      	bne.n	80035ca <xQueueGenericSend+0x42>
 80035c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <xQueueGenericSend+0x46>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <xQueueGenericSend+0x48>
 80035ce:	2300      	movs	r3, #0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <xQueueGenericSend+0x64>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d103      	bne.n	80035fa <xQueueGenericSend+0x72>
 80035f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <xQueueGenericSend+0x76>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <xQueueGenericSend+0x78>
 80035fe:	2300      	movs	r3, #0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10b      	bne.n	800361c <xQueueGenericSend+0x94>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	623b      	str	r3, [r7, #32]
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	e7fd      	b.n	8003618 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800361c:	f001 f9c8 	bl	80049b0 <xTaskGetSchedulerState>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <xQueueGenericSend+0xa4>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <xQueueGenericSend+0xa8>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <xQueueGenericSend+0xaa>
 8003630:	2300      	movs	r3, #0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10b      	bne.n	800364e <xQueueGenericSend+0xc6>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	61fb      	str	r3, [r7, #28]
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	e7fd      	b.n	800364a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800364e:	f001 fea5 	bl	800539c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <xQueueGenericSend+0xdc>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d129      	bne.n	80036b8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800366a:	f000 fa0d 	bl	8003a88 <prvCopyDataToQueue>
 800366e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	2b00      	cmp	r3, #0
 8003676:	d010      	beq.n	800369a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367a:	3324      	adds	r3, #36	@ 0x24
 800367c:	4618      	mov	r0, r3
 800367e:	f000 ffd3 	bl	8004628 <xTaskRemoveFromEventList>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003688:	4b3f      	ldr	r3, [pc, #252]	@ (8003788 <xQueueGenericSend+0x200>)
 800368a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	e00a      	b.n	80036b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800369a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036a0:	4b39      	ldr	r3, [pc, #228]	@ (8003788 <xQueueGenericSend+0x200>)
 80036a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036b0:	f001 fea4 	bl	80053fc <vPortExitCritical>
				return pdPASS;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e063      	b.n	8003780 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d103      	bne.n	80036c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036be:	f001 fe9d 	bl	80053fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e05c      	b.n	8003780 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d106      	bne.n	80036da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 f80d 	bl	80046f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036d6:	2301      	movs	r3, #1
 80036d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036da:	f001 fe8f 	bl	80053fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036de:	f000 fd79 	bl	80041d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036e2:	f001 fe5b 	bl	800539c <vPortEnterCritical>
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036ec:	b25b      	sxtb	r3, r3
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036f2:	d103      	bne.n	80036fc <xQueueGenericSend+0x174>
 80036f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003702:	b25b      	sxtb	r3, r3
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003708:	d103      	bne.n	8003712 <xQueueGenericSend+0x18a>
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003712:	f001 fe73 	bl	80053fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003716:	1d3a      	adds	r2, r7, #4
 8003718:	f107 0314 	add.w	r3, r7, #20
 800371c:	4611      	mov	r1, r2
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fffc 	bl	800471c <xTaskCheckForTimeOut>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d124      	bne.n	8003774 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800372a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800372c:	f000 faa4 	bl	8003c78 <prvIsQueueFull>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d018      	beq.n	8003768 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003738:	3310      	adds	r3, #16
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4611      	mov	r1, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f000 ff20 	bl	8004584 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003744:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003746:	f000 fa2f 	bl	8003ba8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800374a:	f000 fd51 	bl	80041f0 <xTaskResumeAll>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	f47f af7c 	bne.w	800364e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003756:	4b0c      	ldr	r3, [pc, #48]	@ (8003788 <xQueueGenericSend+0x200>)
 8003758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	e772      	b.n	800364e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003768:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800376a:	f000 fa1d 	bl	8003ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800376e:	f000 fd3f 	bl	80041f0 <xTaskResumeAll>
 8003772:	e76c      	b.n	800364e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003774:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003776:	f000 fa17 	bl	8003ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800377a:	f000 fd39 	bl	80041f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800377e:	2300      	movs	r3, #0
		}
	}
}
 8003780:	4618      	mov	r0, r3
 8003782:	3738      	adds	r7, #56	@ 0x38
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	e000ed04 	.word	0xe000ed04

0800378c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08e      	sub	sp, #56	@ 0x38
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800379e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10b      	bne.n	80037bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80037b6:	bf00      	nop
 80037b8:	bf00      	nop
 80037ba:	e7fd      	b.n	80037b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <xQueueGenericSendFromISR+0x3e>
 80037c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <xQueueGenericSendFromISR+0x42>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <xQueueGenericSendFromISR+0x44>
 80037ce:	2300      	movs	r3, #0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10b      	bne.n	80037ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80037d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	623b      	str	r3, [r7, #32]
}
 80037e6:	bf00      	nop
 80037e8:	bf00      	nop
 80037ea:	e7fd      	b.n	80037e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d103      	bne.n	80037fa <xQueueGenericSendFromISR+0x6e>
 80037f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <xQueueGenericSendFromISR+0x72>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <xQueueGenericSendFromISR+0x74>
 80037fe:	2300      	movs	r3, #0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10b      	bne.n	800381c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	61fb      	str	r3, [r7, #28]
}
 8003816:	bf00      	nop
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800381c:	f001 fe80 	bl	8005520 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003820:	f3ef 8211 	mrs	r2, BASEPRI
 8003824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	61ba      	str	r2, [r7, #24]
 8003836:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003838:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800383a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800383c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003844:	429a      	cmp	r2, r3
 8003846:	d302      	bcc.n	800384e <xQueueGenericSendFromISR+0xc2>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d12c      	bne.n	80038a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003850:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003854:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800385e:	f000 f913 	bl	8003a88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003862:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003866:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800386a:	d112      	bne.n	8003892 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800386c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	2b00      	cmp	r3, #0
 8003872:	d016      	beq.n	80038a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003876:	3324      	adds	r3, #36	@ 0x24
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fed5 	bl	8004628 <xTaskRemoveFromEventList>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00e      	beq.n	80038a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	e007      	b.n	80038a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003892:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003896:	3301      	adds	r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	b25a      	sxtb	r2, r3
 800389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80038a2:	2301      	movs	r3, #1
 80038a4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80038a6:	e001      	b.n	80038ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3738      	adds	r7, #56	@ 0x38
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08c      	sub	sp, #48	@ 0x30
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <xQueueReceive+0x32>
	__asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	623b      	str	r3, [r7, #32]
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	e7fd      	b.n	80038f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d103      	bne.n	8003904 <xQueueReceive+0x40>
 80038fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <xQueueReceive+0x44>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <xQueueReceive+0x46>
 8003908:	2300      	movs	r3, #0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10b      	bne.n	8003926 <xQueueReceive+0x62>
	__asm volatile
 800390e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	61fb      	str	r3, [r7, #28]
}
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	e7fd      	b.n	8003922 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003926:	f001 f843 	bl	80049b0 <xTaskGetSchedulerState>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d102      	bne.n	8003936 <xQueueReceive+0x72>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <xQueueReceive+0x76>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <xQueueReceive+0x78>
 800393a:	2300      	movs	r3, #0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <xQueueReceive+0x94>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	61bb      	str	r3, [r7, #24]
}
 8003952:	bf00      	nop
 8003954:	bf00      	nop
 8003956:	e7fd      	b.n	8003954 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003958:	f001 fd20 	bl	800539c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800395c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01f      	beq.n	80039a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800396c:	f000 f8f6 	bl	8003b5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	1e5a      	subs	r2, r3, #1
 8003974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003976:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00f      	beq.n	80039a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003982:	3310      	adds	r3, #16
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fe4f 	bl	8004628 <xTaskRemoveFromEventList>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d007      	beq.n	80039a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003990:	4b3c      	ldr	r3, [pc, #240]	@ (8003a84 <xQueueReceive+0x1c0>)
 8003992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039a0:	f001 fd2c 	bl	80053fc <vPortExitCritical>
				return pdPASS;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e069      	b.n	8003a7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039ae:	f001 fd25 	bl	80053fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e062      	b.n	8003a7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039bc:	f107 0310 	add.w	r3, r7, #16
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fe95 	bl	80046f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039c6:	2301      	movs	r3, #1
 80039c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039ca:	f001 fd17 	bl	80053fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039ce:	f000 fc01 	bl	80041d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039d2:	f001 fce3 	bl	800539c <vPortEnterCritical>
 80039d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039dc:	b25b      	sxtb	r3, r3
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039e2:	d103      	bne.n	80039ec <xQueueReceive+0x128>
 80039e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039f2:	b25b      	sxtb	r3, r3
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039f8:	d103      	bne.n	8003a02 <xQueueReceive+0x13e>
 80039fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a02:	f001 fcfb 	bl	80053fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a06:	1d3a      	adds	r2, r7, #4
 8003a08:	f107 0310 	add.w	r3, r7, #16
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fe84 	bl	800471c <xTaskCheckForTimeOut>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d123      	bne.n	8003a62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a1c:	f000 f916 	bl	8003c4c <prvIsQueueEmpty>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d017      	beq.n	8003a56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a28:	3324      	adds	r3, #36	@ 0x24
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fda8 	bl	8004584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a36:	f000 f8b7 	bl	8003ba8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a3a:	f000 fbd9 	bl	80041f0 <xTaskResumeAll>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d189      	bne.n	8003958 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003a44:	4b0f      	ldr	r3, [pc, #60]	@ (8003a84 <xQueueReceive+0x1c0>)
 8003a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	e780      	b.n	8003958 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a58:	f000 f8a6 	bl	8003ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a5c:	f000 fbc8 	bl	80041f0 <xTaskResumeAll>
 8003a60:	e77a      	b.n	8003958 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a64:	f000 f8a0 	bl	8003ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a68:	f000 fbc2 	bl	80041f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a6e:	f000 f8ed 	bl	8003c4c <prvIsQueueEmpty>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f43f af6f 	beq.w	8003958 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3730      	adds	r7, #48	@ 0x30
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	e000ed04 	.word	0xe000ed04

08003a88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10d      	bne.n	8003ac2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d14d      	bne.n	8003b4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 ff9a 	bl	80049ec <xTaskPriorityDisinherit>
 8003ab8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	605a      	str	r2, [r3, #4]
 8003ac0:	e043      	b.n	8003b4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d119      	bne.n	8003afc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6898      	ldr	r0, [r3, #8]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	f002 f8cd 	bl	8005c72 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	441a      	add	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d32b      	bcc.n	8003b4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	e026      	b.n	8003b4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68d8      	ldr	r0, [r3, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	461a      	mov	r2, r3
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	f002 f8b3 	bl	8005c72 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	425b      	negs	r3, r3
 8003b16:	441a      	add	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d207      	bcs.n	8003b38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b30:	425b      	negs	r3, r3
 8003b32:	441a      	add	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d105      	bne.n	8003b4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003b52:	697b      	ldr	r3, [r7, #20]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d018      	beq.n	8003ba0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	441a      	add	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d303      	bcc.n	8003b90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68d9      	ldr	r1, [r3, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b98:	461a      	mov	r2, r3
 8003b9a:	6838      	ldr	r0, [r7, #0]
 8003b9c:	f002 f869 	bl	8005c72 <memcpy>
	}
}
 8003ba0:	bf00      	nop
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003bb0:	f001 fbf4 	bl	800539c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bbc:	e011      	b.n	8003be2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d012      	beq.n	8003bec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3324      	adds	r3, #36	@ 0x24
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fd2c 	bl	8004628 <xTaskRemoveFromEventList>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003bd6:	f000 fe05 	bl	80047e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	dce9      	bgt.n	8003bbe <prvUnlockQueue+0x16>
 8003bea:	e000      	b.n	8003bee <prvUnlockQueue+0x46>
					break;
 8003bec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	22ff      	movs	r2, #255	@ 0xff
 8003bf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003bf6:	f001 fc01 	bl	80053fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003bfa:	f001 fbcf 	bl	800539c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c06:	e011      	b.n	8003c2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d012      	beq.n	8003c36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3310      	adds	r3, #16
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fd07 	bl	8004628 <xTaskRemoveFromEventList>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c20:	f000 fde0 	bl	80047e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c24:	7bbb      	ldrb	r3, [r7, #14]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	dce9      	bgt.n	8003c08 <prvUnlockQueue+0x60>
 8003c34:	e000      	b.n	8003c38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	22ff      	movs	r2, #255	@ 0xff
 8003c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003c40:	f001 fbdc 	bl	80053fc <vPortExitCritical>
}
 8003c44:	bf00      	nop
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c54:	f001 fba2 	bl	800539c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d102      	bne.n	8003c66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c60:	2301      	movs	r3, #1
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	e001      	b.n	8003c6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c6a:	f001 fbc7 	bl	80053fc <vPortExitCritical>

	return xReturn;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c80:	f001 fb8c 	bl	800539c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d102      	bne.n	8003c96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c90:	2301      	movs	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e001      	b.n	8003c9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c9a:	f001 fbaf 	bl	80053fc <vPortExitCritical>

	return xReturn;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e014      	b.n	8003ce2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8003cf4 <vQueueAddToRegistry+0x4c>)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003cc4:	490b      	ldr	r1, [pc, #44]	@ (8003cf4 <vQueueAddToRegistry+0x4c>)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003cce:	4a09      	ldr	r2, [pc, #36]	@ (8003cf4 <vQueueAddToRegistry+0x4c>)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003cda:	e006      	b.n	8003cea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b07      	cmp	r3, #7
 8003ce6:	d9e7      	bls.n	8003cb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ce8:	bf00      	nop
 8003cea:	bf00      	nop
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr
 8003cf4:	20000be8 	.word	0x20000be8

08003cf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d08:	f001 fb48 	bl	800539c <vPortEnterCritical>
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d12:	b25b      	sxtb	r3, r3
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d18:	d103      	bne.n	8003d22 <vQueueWaitForMessageRestricted+0x2a>
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d28:	b25b      	sxtb	r3, r3
 8003d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d2e:	d103      	bne.n	8003d38 <vQueueWaitForMessageRestricted+0x40>
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d38:	f001 fb60 	bl	80053fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	3324      	adds	r3, #36	@ 0x24
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fc3f 	bl	80045d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d52:	6978      	ldr	r0, [r7, #20]
 8003d54:	f7ff ff28 	bl	8003ba8 <prvUnlockQueue>
	}
 8003d58:	bf00      	nop
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08e      	sub	sp, #56	@ 0x38
 8003d64:	af04      	add	r7, sp, #16
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10b      	bne.n	8003d8c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	623b      	str	r3, [r7, #32]
}
 8003d86:	bf00      	nop
 8003d88:	bf00      	nop
 8003d8a:	e7fd      	b.n	8003d88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <xTaskCreateStatic+0x4a>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	61fb      	str	r3, [r7, #28]
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	e7fd      	b.n	8003da6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003daa:	235c      	movs	r3, #92	@ 0x5c
 8003dac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b5c      	cmp	r3, #92	@ 0x5c
 8003db2:	d00b      	beq.n	8003dcc <xTaskCreateStatic+0x6c>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	61bb      	str	r3, [r7, #24]
}
 8003dc6:	bf00      	nop
 8003dc8:	bf00      	nop
 8003dca:	e7fd      	b.n	8003dc8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d01e      	beq.n	8003e10 <xTaskCreateStatic+0xb0>
 8003dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01b      	beq.n	8003e10 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003de0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	2202      	movs	r2, #2
 8003de6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003dea:	2300      	movs	r3, #0
 8003dec:	9303      	str	r3, [sp, #12]
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	9302      	str	r3, [sp, #8]
 8003df2:	f107 0314 	add.w	r3, r7, #20
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f850 	bl	8003ea8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e0a:	f000 f8d5 	bl	8003fb8 <prvAddNewTaskToReadyList>
 8003e0e:	e001      	b.n	8003e14 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e14:	697b      	ldr	r3, [r7, #20]
	}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3728      	adds	r7, #40	@ 0x28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b08c      	sub	sp, #48	@ 0x30
 8003e22:	af04      	add	r7, sp, #16
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f001 fbb4 	bl	80055a0 <pvPortMalloc>
 8003e38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00e      	beq.n	8003e5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003e40:	205c      	movs	r0, #92	@ 0x5c
 8003e42:	f001 fbad 	bl	80055a0 <pvPortMalloc>
 8003e46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e54:	e005      	b.n	8003e62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e56:	6978      	ldr	r0, [r7, #20]
 8003e58:	f001 fc6a 	bl	8005730 <vPortFree>
 8003e5c:	e001      	b.n	8003e62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d017      	beq.n	8003e98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e70:	88fa      	ldrh	r2, [r7, #6]
 8003e72:	2300      	movs	r3, #0
 8003e74:	9303      	str	r3, [sp, #12]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	9302      	str	r3, [sp, #8]
 8003e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 f80e 	bl	8003ea8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e8c:	69f8      	ldr	r0, [r7, #28]
 8003e8e:	f000 f893 	bl	8003fb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e92:	2301      	movs	r3, #1
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	e002      	b.n	8003e9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
	}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	21a5      	movs	r1, #165	@ 0xa5
 8003ec2:	f001 fea1 	bl	8005c08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f023 0307 	bic.w	r3, r3, #7
 8003ede:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	617b      	str	r3, [r7, #20]
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	e7fd      	b.n	8003efe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	e012      	b.n	8003f2e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	7819      	ldrb	r1, [r3, #0]
 8003f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	4413      	add	r3, r2
 8003f16:	3334      	adds	r3, #52	@ 0x34
 8003f18:	460a      	mov	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	4413      	add	r3, r2
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d006      	beq.n	8003f36 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	2b0f      	cmp	r3, #15
 8003f32:	d9e9      	bls.n	8003f08 <prvInitialiseNewTask+0x60>
 8003f34:	e000      	b.n	8003f38 <prvInitialiseNewTask+0x90>
		{
			break;
 8003f36:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f42:	2b37      	cmp	r3, #55	@ 0x37
 8003f44:	d901      	bls.n	8003f4a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f46:	2337      	movs	r3, #55	@ 0x37
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f54:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f58:	2200      	movs	r2, #0
 8003f5a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff f976 	bl	8003252 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f68:	3318      	adds	r3, #24
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff f971 	bl	8003252 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f84:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f88:	2200      	movs	r2, #0
 8003f8a:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	68f9      	ldr	r1, [r7, #12]
 8003f98:	69b8      	ldr	r0, [r7, #24]
 8003f9a:	f001 f90b 	bl	80051b4 <pxPortInitialiseStack>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fb0:	bf00      	nop
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fc0:	f001 f9ec 	bl	800539c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fc4:	4b2d      	ldr	r3, [pc, #180]	@ (800407c <prvAddNewTaskToReadyList+0xc4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	4a2c      	ldr	r2, [pc, #176]	@ (800407c <prvAddNewTaskToReadyList+0xc4>)
 8003fcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fce:	4b2c      	ldr	r3, [pc, #176]	@ (8004080 <prvAddNewTaskToReadyList+0xc8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fd6:	4a2a      	ldr	r2, [pc, #168]	@ (8004080 <prvAddNewTaskToReadyList+0xc8>)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fdc:	4b27      	ldr	r3, [pc, #156]	@ (800407c <prvAddNewTaskToReadyList+0xc4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d110      	bne.n	8004006 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fe4:	f000 fc22 	bl	800482c <prvInitialiseTaskLists>
 8003fe8:	e00d      	b.n	8004006 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fea:	4b26      	ldr	r3, [pc, #152]	@ (8004084 <prvAddNewTaskToReadyList+0xcc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ff2:	4b23      	ldr	r3, [pc, #140]	@ (8004080 <prvAddNewTaskToReadyList+0xc8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d802      	bhi.n	8004006 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004000:	4a1f      	ldr	r2, [pc, #124]	@ (8004080 <prvAddNewTaskToReadyList+0xc8>)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004006:	4b20      	ldr	r3, [pc, #128]	@ (8004088 <prvAddNewTaskToReadyList+0xd0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3301      	adds	r3, #1
 800400c:	4a1e      	ldr	r2, [pc, #120]	@ (8004088 <prvAddNewTaskToReadyList+0xd0>)
 800400e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004010:	4b1d      	ldr	r3, [pc, #116]	@ (8004088 <prvAddNewTaskToReadyList+0xd0>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800401c:	4b1b      	ldr	r3, [pc, #108]	@ (800408c <prvAddNewTaskToReadyList+0xd4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d903      	bls.n	800402c <prvAddNewTaskToReadyList+0x74>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	4a18      	ldr	r2, [pc, #96]	@ (800408c <prvAddNewTaskToReadyList+0xd4>)
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4a15      	ldr	r2, [pc, #84]	@ (8004090 <prvAddNewTaskToReadyList+0xd8>)
 800403a:	441a      	add	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	4619      	mov	r1, r3
 8004042:	4610      	mov	r0, r2
 8004044:	f7ff f911 	bl	800326a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004048:	f001 f9d8 	bl	80053fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800404c:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <prvAddNewTaskToReadyList+0xcc>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00e      	beq.n	8004072 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004054:	4b0a      	ldr	r3, [pc, #40]	@ (8004080 <prvAddNewTaskToReadyList+0xc8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405e:	429a      	cmp	r2, r3
 8004060:	d207      	bcs.n	8004072 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004062:	4b0c      	ldr	r3, [pc, #48]	@ (8004094 <prvAddNewTaskToReadyList+0xdc>)
 8004064:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	200010fc 	.word	0x200010fc
 8004080:	20000c28 	.word	0x20000c28
 8004084:	20001108 	.word	0x20001108
 8004088:	20001118 	.word	0x20001118
 800408c:	20001104 	.word	0x20001104
 8004090:	20000c2c 	.word	0x20000c2c
 8004094:	e000ed04 	.word	0xe000ed04

08004098 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d018      	beq.n	80040dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040aa:	4b14      	ldr	r3, [pc, #80]	@ (80040fc <vTaskDelay+0x64>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <vTaskDelay+0x32>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	60bb      	str	r3, [r7, #8]
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	e7fd      	b.n	80040c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040ca:	f000 f883 	bl	80041d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040ce:	2100      	movs	r1, #0
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fcfb 	bl	8004acc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040d6:	f000 f88b 	bl	80041f0 <xTaskResumeAll>
 80040da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d107      	bne.n	80040f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80040e2:	4b07      	ldr	r3, [pc, #28]	@ (8004100 <vTaskDelay+0x68>)
 80040e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20001124 	.word	0x20001124
 8004100:	e000ed04 	.word	0xe000ed04

08004104 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08a      	sub	sp, #40	@ 0x28
 8004108:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800410e:	2300      	movs	r3, #0
 8004110:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004112:	463a      	mov	r2, r7
 8004114:	1d39      	adds	r1, r7, #4
 8004116:	f107 0308 	add.w	r3, r7, #8
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff f848 	bl	80031b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004120:	6839      	ldr	r1, [r7, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	9202      	str	r2, [sp, #8]
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	2300      	movs	r3, #0
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	2300      	movs	r3, #0
 8004130:	460a      	mov	r2, r1
 8004132:	4922      	ldr	r1, [pc, #136]	@ (80041bc <vTaskStartScheduler+0xb8>)
 8004134:	4822      	ldr	r0, [pc, #136]	@ (80041c0 <vTaskStartScheduler+0xbc>)
 8004136:	f7ff fe13 	bl	8003d60 <xTaskCreateStatic>
 800413a:	4603      	mov	r3, r0
 800413c:	4a21      	ldr	r2, [pc, #132]	@ (80041c4 <vTaskStartScheduler+0xc0>)
 800413e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004140:	4b20      	ldr	r3, [pc, #128]	@ (80041c4 <vTaskStartScheduler+0xc0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004148:	2301      	movs	r3, #1
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	e001      	b.n	8004152 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d102      	bne.n	800415e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004158:	f000 fd0c 	bl	8004b74 <xTimerCreateTimerTask>
 800415c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d116      	bne.n	8004192 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	613b      	str	r3, [r7, #16]
}
 8004176:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004178:	4b13      	ldr	r3, [pc, #76]	@ (80041c8 <vTaskStartScheduler+0xc4>)
 800417a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800417e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004180:	4b12      	ldr	r3, [pc, #72]	@ (80041cc <vTaskStartScheduler+0xc8>)
 8004182:	2201      	movs	r2, #1
 8004184:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004186:	4b12      	ldr	r3, [pc, #72]	@ (80041d0 <vTaskStartScheduler+0xcc>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800418c:	f001 f894 	bl	80052b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004190:	e00f      	b.n	80041b2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004198:	d10b      	bne.n	80041b2 <vTaskStartScheduler+0xae>
	__asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	60fb      	str	r3, [r7, #12]
}
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	e7fd      	b.n	80041ae <vTaskStartScheduler+0xaa>
}
 80041b2:	bf00      	nop
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	08006ca8 	.word	0x08006ca8
 80041c0:	080047fd 	.word	0x080047fd
 80041c4:	20001120 	.word	0x20001120
 80041c8:	2000111c 	.word	0x2000111c
 80041cc:	20001108 	.word	0x20001108
 80041d0:	20001100 	.word	0x20001100

080041d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80041d8:	4b04      	ldr	r3, [pc, #16]	@ (80041ec <vTaskSuspendAll+0x18>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3301      	adds	r3, #1
 80041de:	4a03      	ldr	r2, [pc, #12]	@ (80041ec <vTaskSuspendAll+0x18>)
 80041e0:	6013      	str	r3, [r2, #0]
}
 80041e2:	bf00      	nop
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	20001124 	.word	0x20001124

080041f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041fe:	4b42      	ldr	r3, [pc, #264]	@ (8004308 <xTaskResumeAll+0x118>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10b      	bne.n	800421e <xTaskResumeAll+0x2e>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	603b      	str	r3, [r7, #0]
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	e7fd      	b.n	800421a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800421e:	f001 f8bd 	bl	800539c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004222:	4b39      	ldr	r3, [pc, #228]	@ (8004308 <xTaskResumeAll+0x118>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3b01      	subs	r3, #1
 8004228:	4a37      	ldr	r2, [pc, #220]	@ (8004308 <xTaskResumeAll+0x118>)
 800422a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800422c:	4b36      	ldr	r3, [pc, #216]	@ (8004308 <xTaskResumeAll+0x118>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d162      	bne.n	80042fa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004234:	4b35      	ldr	r3, [pc, #212]	@ (800430c <xTaskResumeAll+0x11c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d05e      	beq.n	80042fa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800423c:	e02f      	b.n	800429e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800423e:	4b34      	ldr	r3, [pc, #208]	@ (8004310 <xTaskResumeAll+0x120>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3318      	adds	r3, #24
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff f868 	bl	8003320 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3304      	adds	r3, #4
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff f863 	bl	8003320 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425e:	4b2d      	ldr	r3, [pc, #180]	@ (8004314 <xTaskResumeAll+0x124>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d903      	bls.n	800426e <xTaskResumeAll+0x7e>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	4a2a      	ldr	r2, [pc, #168]	@ (8004314 <xTaskResumeAll+0x124>)
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4a27      	ldr	r2, [pc, #156]	@ (8004318 <xTaskResumeAll+0x128>)
 800427c:	441a      	add	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3304      	adds	r3, #4
 8004282:	4619      	mov	r1, r3
 8004284:	4610      	mov	r0, r2
 8004286:	f7fe fff0 	bl	800326a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428e:	4b23      	ldr	r3, [pc, #140]	@ (800431c <xTaskResumeAll+0x12c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004294:	429a      	cmp	r2, r3
 8004296:	d302      	bcc.n	800429e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004298:	4b21      	ldr	r3, [pc, #132]	@ (8004320 <xTaskResumeAll+0x130>)
 800429a:	2201      	movs	r2, #1
 800429c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800429e:	4b1c      	ldr	r3, [pc, #112]	@ (8004310 <xTaskResumeAll+0x120>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1cb      	bne.n	800423e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042ac:	f000 fb5c 	bl	8004968 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80042b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004324 <xTaskResumeAll+0x134>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d010      	beq.n	80042de <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042bc:	f000 f844 	bl	8004348 <xTaskIncrementTick>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80042c6:	4b16      	ldr	r3, [pc, #88]	@ (8004320 <xTaskResumeAll+0x130>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1f1      	bne.n	80042bc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80042d8:	4b12      	ldr	r3, [pc, #72]	@ (8004324 <xTaskResumeAll+0x134>)
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042de:	4b10      	ldr	r3, [pc, #64]	@ (8004320 <xTaskResumeAll+0x130>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042e6:	2301      	movs	r3, #1
 80042e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004328 <xTaskResumeAll+0x138>)
 80042ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042fa:	f001 f87f 	bl	80053fc <vPortExitCritical>

	return xAlreadyYielded;
 80042fe:	68bb      	ldr	r3, [r7, #8]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	20001124 	.word	0x20001124
 800430c:	200010fc 	.word	0x200010fc
 8004310:	200010bc 	.word	0x200010bc
 8004314:	20001104 	.word	0x20001104
 8004318:	20000c2c 	.word	0x20000c2c
 800431c:	20000c28 	.word	0x20000c28
 8004320:	20001110 	.word	0x20001110
 8004324:	2000110c 	.word	0x2000110c
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004332:	4b04      	ldr	r3, [pc, #16]	@ (8004344 <xTaskGetTickCount+0x18>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004338:	687b      	ldr	r3, [r7, #4]
}
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr
 8004344:	20001100 	.word	0x20001100

08004348 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004352:	4b52      	ldr	r3, [pc, #328]	@ (800449c <xTaskIncrementTick+0x154>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f040 808f 	bne.w	800447a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800435c:	4b50      	ldr	r3, [pc, #320]	@ (80044a0 <xTaskIncrementTick+0x158>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3301      	adds	r3, #1
 8004362:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004364:	4a4e      	ldr	r2, [pc, #312]	@ (80044a0 <xTaskIncrementTick+0x158>)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d121      	bne.n	80043b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004370:	4b4c      	ldr	r3, [pc, #304]	@ (80044a4 <xTaskIncrementTick+0x15c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <xTaskIncrementTick+0x4a>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	603b      	str	r3, [r7, #0]
}
 800438c:	bf00      	nop
 800438e:	bf00      	nop
 8004390:	e7fd      	b.n	800438e <xTaskIncrementTick+0x46>
 8004392:	4b44      	ldr	r3, [pc, #272]	@ (80044a4 <xTaskIncrementTick+0x15c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	4b43      	ldr	r3, [pc, #268]	@ (80044a8 <xTaskIncrementTick+0x160>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a41      	ldr	r2, [pc, #260]	@ (80044a4 <xTaskIncrementTick+0x15c>)
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	4a41      	ldr	r2, [pc, #260]	@ (80044a8 <xTaskIncrementTick+0x160>)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b41      	ldr	r3, [pc, #260]	@ (80044ac <xTaskIncrementTick+0x164>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3301      	adds	r3, #1
 80043ac:	4a3f      	ldr	r2, [pc, #252]	@ (80044ac <xTaskIncrementTick+0x164>)
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	f000 fada 	bl	8004968 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043b4:	4b3e      	ldr	r3, [pc, #248]	@ (80044b0 <xTaskIncrementTick+0x168>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d34e      	bcc.n	800445c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043be:	4b39      	ldr	r3, [pc, #228]	@ (80044a4 <xTaskIncrementTick+0x15c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <xTaskIncrementTick+0x84>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <xTaskIncrementTick+0x86>
 80043cc:	2300      	movs	r3, #0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043d2:	4b37      	ldr	r3, [pc, #220]	@ (80044b0 <xTaskIncrementTick+0x168>)
 80043d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043d8:	601a      	str	r2, [r3, #0]
					break;
 80043da:	e03f      	b.n	800445c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043dc:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <xTaskIncrementTick+0x15c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d203      	bcs.n	80043fc <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043f4:	4a2e      	ldr	r2, [pc, #184]	@ (80044b0 <xTaskIncrementTick+0x168>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6013      	str	r3, [r2, #0]
						break;
 80043fa:	e02f      	b.n	800445c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	3304      	adds	r3, #4
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe ff8d 	bl	8003320 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440a:	2b00      	cmp	r3, #0
 800440c:	d004      	beq.n	8004418 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	3318      	adds	r3, #24
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe ff84 	bl	8003320 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800441c:	4b25      	ldr	r3, [pc, #148]	@ (80044b4 <xTaskIncrementTick+0x16c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d903      	bls.n	800442c <xTaskIncrementTick+0xe4>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004428:	4a22      	ldr	r2, [pc, #136]	@ (80044b4 <xTaskIncrementTick+0x16c>)
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4a1f      	ldr	r2, [pc, #124]	@ (80044b8 <xTaskIncrementTick+0x170>)
 800443a:	441a      	add	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	3304      	adds	r3, #4
 8004440:	4619      	mov	r1, r3
 8004442:	4610      	mov	r0, r2
 8004444:	f7fe ff11 	bl	800326a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800444c:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <xTaskIncrementTick+0x174>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004452:	429a      	cmp	r2, r3
 8004454:	d3b3      	bcc.n	80043be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004456:	2301      	movs	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800445a:	e7b0      	b.n	80043be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800445c:	4b17      	ldr	r3, [pc, #92]	@ (80044bc <xTaskIncrementTick+0x174>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004462:	4915      	ldr	r1, [pc, #84]	@ (80044b8 <xTaskIncrementTick+0x170>)
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d907      	bls.n	8004484 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004474:	2301      	movs	r3, #1
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	e004      	b.n	8004484 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800447a:	4b11      	ldr	r3, [pc, #68]	@ (80044c0 <xTaskIncrementTick+0x178>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3301      	adds	r3, #1
 8004480:	4a0f      	ldr	r2, [pc, #60]	@ (80044c0 <xTaskIncrementTick+0x178>)
 8004482:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004484:	4b0f      	ldr	r3, [pc, #60]	@ (80044c4 <xTaskIncrementTick+0x17c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800448c:	2301      	movs	r3, #1
 800448e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004490:	697b      	ldr	r3, [r7, #20]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20001124 	.word	0x20001124
 80044a0:	20001100 	.word	0x20001100
 80044a4:	200010b4 	.word	0x200010b4
 80044a8:	200010b8 	.word	0x200010b8
 80044ac:	20001114 	.word	0x20001114
 80044b0:	2000111c 	.word	0x2000111c
 80044b4:	20001104 	.word	0x20001104
 80044b8:	20000c2c 	.word	0x20000c2c
 80044bc:	20000c28 	.word	0x20000c28
 80044c0:	2000110c 	.word	0x2000110c
 80044c4:	20001110 	.word	0x20001110

080044c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044ce:	4b28      	ldr	r3, [pc, #160]	@ (8004570 <vTaskSwitchContext+0xa8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044d6:	4b27      	ldr	r3, [pc, #156]	@ (8004574 <vTaskSwitchContext+0xac>)
 80044d8:	2201      	movs	r2, #1
 80044da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044dc:	e042      	b.n	8004564 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80044de:	4b25      	ldr	r3, [pc, #148]	@ (8004574 <vTaskSwitchContext+0xac>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80044e4:	4b24      	ldr	r3, [pc, #144]	@ (8004578 <vTaskSwitchContext+0xb0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e011      	b.n	8004510 <vTaskSwitchContext+0x48>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10b      	bne.n	800450a <vTaskSwitchContext+0x42>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	607b      	str	r3, [r7, #4]
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	e7fd      	b.n	8004506 <vTaskSwitchContext+0x3e>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3b01      	subs	r3, #1
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	491a      	ldr	r1, [pc, #104]	@ (800457c <vTaskSwitchContext+0xb4>)
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0e3      	beq.n	80044ec <vTaskSwitchContext+0x24>
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4a13      	ldr	r2, [pc, #76]	@ (800457c <vTaskSwitchContext+0xb4>)
 8004530:	4413      	add	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	3308      	adds	r3, #8
 8004546:	429a      	cmp	r2, r3
 8004548:	d104      	bne.n	8004554 <vTaskSwitchContext+0x8c>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	605a      	str	r2, [r3, #4]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	4a09      	ldr	r2, [pc, #36]	@ (8004580 <vTaskSwitchContext+0xb8>)
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4a06      	ldr	r2, [pc, #24]	@ (8004578 <vTaskSwitchContext+0xb0>)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6013      	str	r3, [r2, #0]
}
 8004564:	bf00      	nop
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20001124 	.word	0x20001124
 8004574:	20001110 	.word	0x20001110
 8004578:	20001104 	.word	0x20001104
 800457c:	20000c2c 	.word	0x20000c2c
 8004580:	20000c28 	.word	0x20000c28

08004584 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10b      	bne.n	80045ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	60fb      	str	r3, [r7, #12]
}
 80045a6:	bf00      	nop
 80045a8:	bf00      	nop
 80045aa:	e7fd      	b.n	80045a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045ac:	4b07      	ldr	r3, [pc, #28]	@ (80045cc <vTaskPlaceOnEventList+0x48>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3318      	adds	r3, #24
 80045b2:	4619      	mov	r1, r3
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7fe fe7b 	bl	80032b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045ba:	2101      	movs	r1, #1
 80045bc:	6838      	ldr	r0, [r7, #0]
 80045be:	f000 fa85 	bl	8004acc <prvAddCurrentTaskToDelayedList>
}
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000c28 	.word	0x20000c28

080045d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10b      	bne.n	80045fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	617b      	str	r3, [r7, #20]
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop
 80045f8:	e7fd      	b.n	80045f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004624 <vTaskPlaceOnEventListRestricted+0x54>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3318      	adds	r3, #24
 8004600:	4619      	mov	r1, r3
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f7fe fe31 	bl	800326a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800460e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004612:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	68b8      	ldr	r0, [r7, #8]
 8004618:	f000 fa58 	bl	8004acc <prvAddCurrentTaskToDelayedList>
	}
 800461c:	bf00      	nop
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20000c28 	.word	0x20000c28

08004628 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	60fb      	str	r3, [r7, #12]
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3318      	adds	r3, #24
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe fe60 	bl	8003320 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004660:	4b1d      	ldr	r3, [pc, #116]	@ (80046d8 <xTaskRemoveFromEventList+0xb0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d11d      	bne.n	80046a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	3304      	adds	r3, #4
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe fe57 	bl	8003320 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004676:	4b19      	ldr	r3, [pc, #100]	@ (80046dc <xTaskRemoveFromEventList+0xb4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d903      	bls.n	8004686 <xTaskRemoveFromEventList+0x5e>
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	4a16      	ldr	r2, [pc, #88]	@ (80046dc <xTaskRemoveFromEventList+0xb4>)
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4a13      	ldr	r2, [pc, #76]	@ (80046e0 <xTaskRemoveFromEventList+0xb8>)
 8004694:	441a      	add	r2, r3
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	3304      	adds	r3, #4
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f7fe fde4 	bl	800326a <vListInsertEnd>
 80046a2:	e005      	b.n	80046b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	3318      	adds	r3, #24
 80046a8:	4619      	mov	r1, r3
 80046aa:	480e      	ldr	r0, [pc, #56]	@ (80046e4 <xTaskRemoveFromEventList+0xbc>)
 80046ac:	f7fe fddd 	bl	800326a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b4:	4b0c      	ldr	r3, [pc, #48]	@ (80046e8 <xTaskRemoveFromEventList+0xc0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d905      	bls.n	80046ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80046be:	2301      	movs	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046c2:	4b0a      	ldr	r3, [pc, #40]	@ (80046ec <xTaskRemoveFromEventList+0xc4>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e001      	b.n	80046ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80046ce:	697b      	ldr	r3, [r7, #20]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20001124 	.word	0x20001124
 80046dc:	20001104 	.word	0x20001104
 80046e0:	20000c2c 	.word	0x20000c2c
 80046e4:	200010bc 	.word	0x200010bc
 80046e8:	20000c28 	.word	0x20000c28
 80046ec:	20001110 	.word	0x20001110

080046f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046f8:	4b06      	ldr	r3, [pc, #24]	@ (8004714 <vTaskInternalSetTimeOutState+0x24>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004700:	4b05      	ldr	r3, [pc, #20]	@ (8004718 <vTaskInternalSetTimeOutState+0x28>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	605a      	str	r2, [r3, #4]
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20001114 	.word	0x20001114
 8004718:	20001100 	.word	0x20001100

0800471c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10b      	bne.n	8004744 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	613b      	str	r3, [r7, #16]
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	e7fd      	b.n	8004740 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10b      	bne.n	8004762 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	60fb      	str	r3, [r7, #12]
}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	e7fd      	b.n	800475e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004762:	f000 fe1b 	bl	800539c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004766:	4b1d      	ldr	r3, [pc, #116]	@ (80047dc <xTaskCheckForTimeOut+0xc0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800477e:	d102      	bne.n	8004786 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
 8004784:	e023      	b.n	80047ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4b15      	ldr	r3, [pc, #84]	@ (80047e0 <xTaskCheckForTimeOut+0xc4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d007      	beq.n	80047a2 <xTaskCheckForTimeOut+0x86>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	429a      	cmp	r2, r3
 800479a:	d302      	bcc.n	80047a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800479c:	2301      	movs	r3, #1
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	e015      	b.n	80047ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d20b      	bcs.n	80047c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	1ad2      	subs	r2, r2, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ff99 	bl	80046f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80047be:	2300      	movs	r3, #0
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	e004      	b.n	80047ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80047ca:	2301      	movs	r3, #1
 80047cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80047ce:	f000 fe15 	bl	80053fc <vPortExitCritical>

	return xReturn;
 80047d2:	69fb      	ldr	r3, [r7, #28]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20001100 	.word	0x20001100
 80047e0:	20001114 	.word	0x20001114

080047e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047e8:	4b03      	ldr	r3, [pc, #12]	@ (80047f8 <vTaskMissedYield+0x14>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
}
 80047ee:	bf00      	nop
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20001110 	.word	0x20001110

080047fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004804:	f000 f852 	bl	80048ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004808:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <prvIdleTask+0x28>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d9f9      	bls.n	8004804 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004810:	4b05      	ldr	r3, [pc, #20]	@ (8004828 <prvIdleTask+0x2c>)
 8004812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004820:	e7f0      	b.n	8004804 <prvIdleTask+0x8>
 8004822:	bf00      	nop
 8004824:	20000c2c 	.word	0x20000c2c
 8004828:	e000ed04 	.word	0xe000ed04

0800482c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004832:	2300      	movs	r3, #0
 8004834:	607b      	str	r3, [r7, #4]
 8004836:	e00c      	b.n	8004852 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4a12      	ldr	r2, [pc, #72]	@ (800488c <prvInitialiseTaskLists+0x60>)
 8004844:	4413      	add	r3, r2
 8004846:	4618      	mov	r0, r3
 8004848:	f7fe fce4 	bl	8003214 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3301      	adds	r3, #1
 8004850:	607b      	str	r3, [r7, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b37      	cmp	r3, #55	@ 0x37
 8004856:	d9ef      	bls.n	8004838 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004858:	480d      	ldr	r0, [pc, #52]	@ (8004890 <prvInitialiseTaskLists+0x64>)
 800485a:	f7fe fcdb 	bl	8003214 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800485e:	480d      	ldr	r0, [pc, #52]	@ (8004894 <prvInitialiseTaskLists+0x68>)
 8004860:	f7fe fcd8 	bl	8003214 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004864:	480c      	ldr	r0, [pc, #48]	@ (8004898 <prvInitialiseTaskLists+0x6c>)
 8004866:	f7fe fcd5 	bl	8003214 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800486a:	480c      	ldr	r0, [pc, #48]	@ (800489c <prvInitialiseTaskLists+0x70>)
 800486c:	f7fe fcd2 	bl	8003214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004870:	480b      	ldr	r0, [pc, #44]	@ (80048a0 <prvInitialiseTaskLists+0x74>)
 8004872:	f7fe fccf 	bl	8003214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004876:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <prvInitialiseTaskLists+0x78>)
 8004878:	4a05      	ldr	r2, [pc, #20]	@ (8004890 <prvInitialiseTaskLists+0x64>)
 800487a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800487c:	4b0a      	ldr	r3, [pc, #40]	@ (80048a8 <prvInitialiseTaskLists+0x7c>)
 800487e:	4a05      	ldr	r2, [pc, #20]	@ (8004894 <prvInitialiseTaskLists+0x68>)
 8004880:	601a      	str	r2, [r3, #0]
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000c2c 	.word	0x20000c2c
 8004890:	2000108c 	.word	0x2000108c
 8004894:	200010a0 	.word	0x200010a0
 8004898:	200010bc 	.word	0x200010bc
 800489c:	200010d0 	.word	0x200010d0
 80048a0:	200010e8 	.word	0x200010e8
 80048a4:	200010b4 	.word	0x200010b4
 80048a8:	200010b8 	.word	0x200010b8

080048ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048b2:	e019      	b.n	80048e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80048b4:	f000 fd72 	bl	800539c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80048b8:	4b10      	ldr	r3, [pc, #64]	@ (80048fc <prvCheckTasksWaitingTermination+0x50>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fe fd2b 	bl	8003320 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004900 <prvCheckTasksWaitingTermination+0x54>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004900 <prvCheckTasksWaitingTermination+0x54>)
 80048d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004904 <prvCheckTasksWaitingTermination+0x58>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3b01      	subs	r3, #1
 80048da:	4a0a      	ldr	r2, [pc, #40]	@ (8004904 <prvCheckTasksWaitingTermination+0x58>)
 80048dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048de:	f000 fd8d 	bl	80053fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f810 	bl	8004908 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048e8:	4b06      	ldr	r3, [pc, #24]	@ (8004904 <prvCheckTasksWaitingTermination+0x58>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e1      	bne.n	80048b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	200010d0 	.word	0x200010d0
 8004900:	200010fc 	.word	0x200010fc
 8004904:	200010e4 	.word	0x200010e4

08004908 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004916:	2b00      	cmp	r3, #0
 8004918:	d108      	bne.n	800492c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491e:	4618      	mov	r0, r3
 8004920:	f000 ff06 	bl	8005730 <vPortFree>
				vPortFree( pxTCB );
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 ff03 	bl	8005730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800492a:	e019      	b.n	8004960 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004932:	2b01      	cmp	r3, #1
 8004934:	d103      	bne.n	800493e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fefa 	bl	8005730 <vPortFree>
	}
 800493c:	e010      	b.n	8004960 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004944:	2b02      	cmp	r3, #2
 8004946:	d00b      	beq.n	8004960 <prvDeleteTCB+0x58>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	60fb      	str	r3, [r7, #12]
}
 800495a:	bf00      	nop
 800495c:	bf00      	nop
 800495e:	e7fd      	b.n	800495c <prvDeleteTCB+0x54>
	}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496e:	4b0e      	ldr	r3, [pc, #56]	@ (80049a8 <prvResetNextTaskUnblockTime+0x40>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <prvResetNextTaskUnblockTime+0x14>
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <prvResetNextTaskUnblockTime+0x16>
 800497c:	2300      	movs	r3, #0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d004      	beq.n	800498c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004982:	4b0a      	ldr	r3, [pc, #40]	@ (80049ac <prvResetNextTaskUnblockTime+0x44>)
 8004984:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004988:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800498a:	e008      	b.n	800499e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800498c:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <prvResetNextTaskUnblockTime+0x40>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	4a04      	ldr	r2, [pc, #16]	@ (80049ac <prvResetNextTaskUnblockTime+0x44>)
 800499c:	6013      	str	r3, [r2, #0]
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr
 80049a8:	200010b4 	.word	0x200010b4
 80049ac:	2000111c 	.word	0x2000111c

080049b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049b6:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <xTaskGetSchedulerState+0x34>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049be:	2301      	movs	r3, #1
 80049c0:	607b      	str	r3, [r7, #4]
 80049c2:	e008      	b.n	80049d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049c4:	4b08      	ldr	r3, [pc, #32]	@ (80049e8 <xTaskGetSchedulerState+0x38>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049cc:	2302      	movs	r3, #2
 80049ce:	607b      	str	r3, [r7, #4]
 80049d0:	e001      	b.n	80049d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049d2:	2300      	movs	r3, #0
 80049d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049d6:	687b      	ldr	r3, [r7, #4]
	}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20001108 	.word	0x20001108
 80049e8:	20001124 	.word	0x20001124

080049ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d058      	beq.n	8004ab4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a02:	4b2f      	ldr	r3, [pc, #188]	@ (8004ac0 <xTaskPriorityDisinherit+0xd4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d00b      	beq.n	8004a24 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	60fb      	str	r3, [r7, #12]
}
 8004a1e:	bf00      	nop
 8004a20:	bf00      	nop
 8004a22:	e7fd      	b.n	8004a20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10b      	bne.n	8004a44 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	60bb      	str	r3, [r7, #8]
}
 8004a3e:	bf00      	nop
 8004a40:	bf00      	nop
 8004a42:	e7fd      	b.n	8004a40 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a48:	1e5a      	subs	r2, r3, #1
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d02c      	beq.n	8004ab4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d128      	bne.n	8004ab4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	3304      	adds	r3, #4
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fe fc5a 	bl	8003320 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a84:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac4 <xTaskPriorityDisinherit+0xd8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d903      	bls.n	8004a94 <xTaskPriorityDisinherit+0xa8>
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a90:	4a0c      	ldr	r2, [pc, #48]	@ (8004ac4 <xTaskPriorityDisinherit+0xd8>)
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4a09      	ldr	r2, [pc, #36]	@ (8004ac8 <xTaskPriorityDisinherit+0xdc>)
 8004aa2:	441a      	add	r2, r3
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f7fe fbdd 	bl	800326a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ab4:	697b      	ldr	r3, [r7, #20]
	}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000c28 	.word	0x20000c28
 8004ac4:	20001104 	.word	0x20001104
 8004ac8:	20000c2c 	.word	0x20000c2c

08004acc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ad6:	4b21      	ldr	r3, [pc, #132]	@ (8004b5c <prvAddCurrentTaskToDelayedList+0x90>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004adc:	4b20      	ldr	r3, [pc, #128]	@ (8004b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe fc1c 	bl	8003320 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004aee:	d10a      	bne.n	8004b06 <prvAddCurrentTaskToDelayedList+0x3a>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d007      	beq.n	8004b06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004af6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4619      	mov	r1, r3
 8004afe:	4819      	ldr	r0, [pc, #100]	@ (8004b64 <prvAddCurrentTaskToDelayedList+0x98>)
 8004b00:	f7fe fbb3 	bl	800326a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b04:	e026      	b.n	8004b54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b0e:	4b14      	ldr	r3, [pc, #80]	@ (8004b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d209      	bcs.n	8004b32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b1e:	4b12      	ldr	r3, [pc, #72]	@ (8004b68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b0f      	ldr	r3, [pc, #60]	@ (8004b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3304      	adds	r3, #4
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f7fe fbc0 	bl	80032b0 <vListInsert>
}
 8004b30:	e010      	b.n	8004b54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b32:	4b0e      	ldr	r3, [pc, #56]	@ (8004b6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4b0a      	ldr	r3, [pc, #40]	@ (8004b60 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f7fe fbb6 	bl	80032b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b44:	4b0a      	ldr	r3, [pc, #40]	@ (8004b70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d202      	bcs.n	8004b54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b4e:	4a08      	ldr	r2, [pc, #32]	@ (8004b70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6013      	str	r3, [r2, #0]
}
 8004b54:	bf00      	nop
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20001100 	.word	0x20001100
 8004b60:	20000c28 	.word	0x20000c28
 8004b64:	200010e8 	.word	0x200010e8
 8004b68:	200010b8 	.word	0x200010b8
 8004b6c:	200010b4 	.word	0x200010b4
 8004b70:	2000111c 	.word	0x2000111c

08004b74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	@ 0x28
 8004b78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b7e:	f000 fad9 	bl	8005134 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b82:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf8 <xTimerCreateTimerTask+0x84>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d021      	beq.n	8004bce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b92:	1d3a      	adds	r2, r7, #4
 8004b94:	f107 0108 	add.w	r1, r7, #8
 8004b98:	f107 030c 	add.w	r3, r7, #12
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fe fb1f 	bl	80031e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	9202      	str	r2, [sp, #8]
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	2302      	movs	r3, #2
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	460a      	mov	r2, r1
 8004bb4:	4911      	ldr	r1, [pc, #68]	@ (8004bfc <xTimerCreateTimerTask+0x88>)
 8004bb6:	4812      	ldr	r0, [pc, #72]	@ (8004c00 <xTimerCreateTimerTask+0x8c>)
 8004bb8:	f7ff f8d2 	bl	8003d60 <xTaskCreateStatic>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	4a11      	ldr	r2, [pc, #68]	@ (8004c04 <xTimerCreateTimerTask+0x90>)
 8004bc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004bc2:	4b10      	ldr	r3, [pc, #64]	@ (8004c04 <xTimerCreateTimerTask+0x90>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10b      	bne.n	8004bec <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	613b      	str	r3, [r7, #16]
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	e7fd      	b.n	8004be8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004bec:	697b      	ldr	r3, [r7, #20]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20001158 	.word	0x20001158
 8004bfc:	08006cb0 	.word	0x08006cb0
 8004c00:	08004d29 	.word	0x08004d29
 8004c04:	2000115c 	.word	0x2000115c

08004c08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	@ 0x28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <xTimerGenericCommand+0x30>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	623b      	str	r3, [r7, #32]
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c38:	4b19      	ldr	r3, [pc, #100]	@ (8004ca0 <xTimerGenericCommand+0x98>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d02a      	beq.n	8004c96 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	dc18      	bgt.n	8004c84 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c52:	f7ff fead 	bl	80049b0 <xTaskGetSchedulerState>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d109      	bne.n	8004c70 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c5c:	4b10      	ldr	r3, [pc, #64]	@ (8004ca0 <xTimerGenericCommand+0x98>)
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	f107 0110 	add.w	r1, r7, #16
 8004c64:	2300      	movs	r3, #0
 8004c66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c68:	f7fe fc8e 	bl	8003588 <xQueueGenericSend>
 8004c6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c6e:	e012      	b.n	8004c96 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca0 <xTimerGenericCommand+0x98>)
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	f107 0110 	add.w	r1, r7, #16
 8004c78:	2300      	movs	r3, #0
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f7fe fc84 	bl	8003588 <xQueueGenericSend>
 8004c80:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c82:	e008      	b.n	8004c96 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c84:	4b06      	ldr	r3, [pc, #24]	@ (8004ca0 <xTimerGenericCommand+0x98>)
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	f107 0110 	add.w	r1, r7, #16
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	f7fe fd7c 	bl	800378c <xQueueGenericSendFromISR>
 8004c94:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3728      	adds	r7, #40	@ 0x28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20001158 	.word	0x20001158

08004ca4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cae:	4b1d      	ldr	r3, [pc, #116]	@ (8004d24 <prvProcessExpiredTimer+0x80>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fe fb2f 	bl	8003320 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d123      	bne.n	8004d12 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	18d1      	adds	r1, r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	6978      	ldr	r0, [r7, #20]
 8004cd8:	f000 f8cc 	bl	8004e74 <prvInsertTimerInActiveList>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d017      	beq.n	8004d12 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	2100      	movs	r1, #0
 8004cec:	6978      	ldr	r0, [r7, #20]
 8004cee:	f7ff ff8b 	bl	8004c08 <xTimerGenericCommand>
 8004cf2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10b      	bne.n	8004d12 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	60fb      	str	r3, [r7, #12]
}
 8004d0c:	bf00      	nop
 8004d0e:	bf00      	nop
 8004d10:	e7fd      	b.n	8004d0e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d16:	6978      	ldr	r0, [r7, #20]
 8004d18:	4798      	blx	r3
}
 8004d1a:	bf00      	nop
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20001150 	.word	0x20001150

08004d28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d30:	f107 0308 	add.w	r3, r7, #8
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 f859 	bl	8004dec <prvGetNextExpireTime>
 8004d3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f805 	bl	8004d50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d46:	f000 f8d7 	bl	8004ef8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d4a:	bf00      	nop
 8004d4c:	e7f0      	b.n	8004d30 <prvTimerTask+0x8>
	...

08004d50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d5a:	f7ff fa3b 	bl	80041d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d5e:	f107 0308 	add.w	r3, r7, #8
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 f866 	bl	8004e34 <prvSampleTimeNow>
 8004d68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d130      	bne.n	8004dd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10a      	bne.n	8004d8c <prvProcessTimerOrBlockTask+0x3c>
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d806      	bhi.n	8004d8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d7e:	f7ff fa37 	bl	80041f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d82:	68f9      	ldr	r1, [r7, #12]
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff ff8d 	bl	8004ca4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d8a:	e024      	b.n	8004dd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d008      	beq.n	8004da4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d92:	4b13      	ldr	r3, [pc, #76]	@ (8004de0 <prvProcessTimerOrBlockTask+0x90>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	bf0c      	ite	eq
 8004d9c:	2301      	moveq	r3, #1
 8004d9e:	2300      	movne	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004da4:	4b0f      	ldr	r3, [pc, #60]	@ (8004de4 <prvProcessTimerOrBlockTask+0x94>)
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	4619      	mov	r1, r3
 8004db2:	f7fe ffa1 	bl	8003cf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004db6:	f7ff fa1b 	bl	80041f0 <xTaskResumeAll>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004dc0:	4b09      	ldr	r3, [pc, #36]	@ (8004de8 <prvProcessTimerOrBlockTask+0x98>)
 8004dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	f3bf 8f6f 	isb	sy
}
 8004dd0:	e001      	b.n	8004dd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004dd2:	f7ff fa0d 	bl	80041f0 <xTaskResumeAll>
}
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20001154 	.word	0x20001154
 8004de4:	20001158 	.word	0x20001158
 8004de8:	e000ed04 	.word	0xe000ed04

08004dec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004df4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e30 <prvGetNextExpireTime+0x44>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bf0c      	ite	eq
 8004dfe:	2301      	moveq	r3, #1
 8004e00:	2300      	movne	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d105      	bne.n	8004e1e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e12:	4b07      	ldr	r3, [pc, #28]	@ (8004e30 <prvGetNextExpireTime+0x44>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e001      	b.n	8004e22 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e22:	68fb      	ldr	r3, [r7, #12]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20001150 	.word	0x20001150

08004e34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e3c:	f7ff fa76 	bl	800432c <xTaskGetTickCount>
 8004e40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e42:	4b0b      	ldr	r3, [pc, #44]	@ (8004e70 <prvSampleTimeNow+0x3c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d205      	bcs.n	8004e58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e4c:	f000 f910 	bl	8005070 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	e002      	b.n	8004e5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e5e:	4a04      	ldr	r2, [pc, #16]	@ (8004e70 <prvSampleTimeNow+0x3c>)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e64:	68fb      	ldr	r3, [r7, #12]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20001160 	.word	0x20001160

08004e74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d812      	bhi.n	8004ec0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	1ad2      	subs	r2, r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d302      	bcc.n	8004eae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	e01b      	b.n	8004ee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004eae:	4b10      	ldr	r3, [pc, #64]	@ (8004ef0 <prvInsertTimerInActiveList+0x7c>)
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4610      	mov	r0, r2
 8004eba:	f7fe f9f9 	bl	80032b0 <vListInsert>
 8004ebe:	e012      	b.n	8004ee6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d206      	bcs.n	8004ed6 <prvInsertTimerInActiveList+0x62>
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d302      	bcc.n	8004ed6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e007      	b.n	8004ee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ed6:	4b07      	ldr	r3, [pc, #28]	@ (8004ef4 <prvInsertTimerInActiveList+0x80>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f7fe f9e5 	bl	80032b0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ee6:	697b      	ldr	r3, [r7, #20]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20001154 	.word	0x20001154
 8004ef4:	20001150 	.word	0x20001150

08004ef8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08e      	sub	sp, #56	@ 0x38
 8004efc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004efe:	e0a5      	b.n	800504c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	da19      	bge.n	8004f3a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f06:	1d3b      	adds	r3, r7, #4
 8004f08:	3304      	adds	r3, #4
 8004f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10b      	bne.n	8004f2a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	61fb      	str	r3, [r7, #28]
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop
 8004f28:	e7fd      	b.n	8004f26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f30:	6850      	ldr	r0, [r2, #4]
 8004f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f34:	6892      	ldr	r2, [r2, #8]
 8004f36:	4611      	mov	r1, r2
 8004f38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f2c0 8085 	blt.w	800504c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d004      	beq.n	8004f58 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f50:	3304      	adds	r3, #4
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe f9e4 	bl	8003320 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f58:	463b      	mov	r3, r7
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff ff6a 	bl	8004e34 <prvSampleTimeNow>
 8004f60:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b09      	cmp	r3, #9
 8004f66:	d86c      	bhi.n	8005042 <prvProcessReceivedCommands+0x14a>
 8004f68:	a201      	add	r2, pc, #4	@ (adr r2, 8004f70 <prvProcessReceivedCommands+0x78>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004f99 	.word	0x08004f99
 8004f74:	08004f99 	.word	0x08004f99
 8004f78:	08004f99 	.word	0x08004f99
 8004f7c:	08005043 	.word	0x08005043
 8004f80:	08004ff7 	.word	0x08004ff7
 8004f84:	08005031 	.word	0x08005031
 8004f88:	08004f99 	.word	0x08004f99
 8004f8c:	08004f99 	.word	0x08004f99
 8004f90:	08005043 	.word	0x08005043
 8004f94:	08004ff7 	.word	0x08004ff7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	18d1      	adds	r1, r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fa6:	f7ff ff65 	bl	8004e74 <prvInsertTimerInActiveList>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d04a      	beq.n	8005046 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fb6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d142      	bne.n	8005046 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	441a      	add	r2, r3
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	2300      	movs	r3, #0
 8004fce:	2100      	movs	r1, #0
 8004fd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fd2:	f7ff fe19 	bl	8004c08 <xTimerGenericCommand>
 8004fd6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d133      	bne.n	8005046 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	61bb      	str	r3, [r7, #24]
}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	e7fd      	b.n	8004ff2 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10b      	bne.n	800501c <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	617b      	str	r3, [r7, #20]
}
 8005016:	bf00      	nop
 8005018:	bf00      	nop
 800501a:	e7fd      	b.n	8005018 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800501c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501e:	699a      	ldr	r2, [r3, #24]
 8005020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005022:	18d1      	adds	r1, r2, r3
 8005024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005028:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800502a:	f7ff ff23 	bl	8004e74 <prvInsertTimerInActiveList>
					break;
 800502e:	e00d      	b.n	800504c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005032:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005036:	2b00      	cmp	r3, #0
 8005038:	d107      	bne.n	800504a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800503a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800503c:	f000 fb78 	bl	8005730 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005040:	e003      	b.n	800504a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8005042:	bf00      	nop
 8005044:	e002      	b.n	800504c <prvProcessReceivedCommands+0x154>
					break;
 8005046:	bf00      	nop
 8005048:	e000      	b.n	800504c <prvProcessReceivedCommands+0x154>
					break;
 800504a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800504c:	4b07      	ldr	r3, [pc, #28]	@ (800506c <prvProcessReceivedCommands+0x174>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	1d39      	adds	r1, r7, #4
 8005052:	2200      	movs	r2, #0
 8005054:	4618      	mov	r0, r3
 8005056:	f7fe fc35 	bl	80038c4 <xQueueReceive>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	f47f af4f 	bne.w	8004f00 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	3730      	adds	r7, #48	@ 0x30
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	20001158 	.word	0x20001158

08005070 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005076:	e046      	b.n	8005106 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005078:	4b2c      	ldr	r3, [pc, #176]	@ (800512c <prvSwitchTimerLists+0xbc>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005082:	4b2a      	ldr	r3, [pc, #168]	@ (800512c <prvSwitchTimerLists+0xbc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	3304      	adds	r3, #4
 8005090:	4618      	mov	r0, r3
 8005092:	f7fe f945 	bl	8003320 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d12f      	bne.n	8005106 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4413      	add	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d90e      	bls.n	80050d6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050c4:	4b19      	ldr	r3, [pc, #100]	@ (800512c <prvSwitchTimerLists+0xbc>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f7fe f8ee 	bl	80032b0 <vListInsert>
 80050d4:	e017      	b.n	8005106 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050d6:	2300      	movs	r3, #0
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	2300      	movs	r3, #0
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	2100      	movs	r1, #0
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f7ff fd91 	bl	8004c08 <xTimerGenericCommand>
 80050e6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10b      	bne.n	8005106 <prvSwitchTimerLists+0x96>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	603b      	str	r3, [r7, #0]
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	e7fd      	b.n	8005102 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005106:	4b09      	ldr	r3, [pc, #36]	@ (800512c <prvSwitchTimerLists+0xbc>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1b3      	bne.n	8005078 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005110:	4b06      	ldr	r3, [pc, #24]	@ (800512c <prvSwitchTimerLists+0xbc>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005116:	4b06      	ldr	r3, [pc, #24]	@ (8005130 <prvSwitchTimerLists+0xc0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a04      	ldr	r2, [pc, #16]	@ (800512c <prvSwitchTimerLists+0xbc>)
 800511c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800511e:	4a04      	ldr	r2, [pc, #16]	@ (8005130 <prvSwitchTimerLists+0xc0>)
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	6013      	str	r3, [r2, #0]
}
 8005124:	bf00      	nop
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20001150 	.word	0x20001150
 8005130:	20001154 	.word	0x20001154

08005134 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800513a:	f000 f92f 	bl	800539c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800513e:	4b15      	ldr	r3, [pc, #84]	@ (8005194 <prvCheckForValidListAndQueue+0x60>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d120      	bne.n	8005188 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005146:	4814      	ldr	r0, [pc, #80]	@ (8005198 <prvCheckForValidListAndQueue+0x64>)
 8005148:	f7fe f864 	bl	8003214 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800514c:	4813      	ldr	r0, [pc, #76]	@ (800519c <prvCheckForValidListAndQueue+0x68>)
 800514e:	f7fe f861 	bl	8003214 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005152:	4b13      	ldr	r3, [pc, #76]	@ (80051a0 <prvCheckForValidListAndQueue+0x6c>)
 8005154:	4a10      	ldr	r2, [pc, #64]	@ (8005198 <prvCheckForValidListAndQueue+0x64>)
 8005156:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005158:	4b12      	ldr	r3, [pc, #72]	@ (80051a4 <prvCheckForValidListAndQueue+0x70>)
 800515a:	4a10      	ldr	r2, [pc, #64]	@ (800519c <prvCheckForValidListAndQueue+0x68>)
 800515c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800515e:	2300      	movs	r3, #0
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	4b11      	ldr	r3, [pc, #68]	@ (80051a8 <prvCheckForValidListAndQueue+0x74>)
 8005164:	4a11      	ldr	r2, [pc, #68]	@ (80051ac <prvCheckForValidListAndQueue+0x78>)
 8005166:	2110      	movs	r1, #16
 8005168:	200a      	movs	r0, #10
 800516a:	f7fe f96d 	bl	8003448 <xQueueGenericCreateStatic>
 800516e:	4603      	mov	r3, r0
 8005170:	4a08      	ldr	r2, [pc, #32]	@ (8005194 <prvCheckForValidListAndQueue+0x60>)
 8005172:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005174:	4b07      	ldr	r3, [pc, #28]	@ (8005194 <prvCheckForValidListAndQueue+0x60>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800517c:	4b05      	ldr	r3, [pc, #20]	@ (8005194 <prvCheckForValidListAndQueue+0x60>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	490b      	ldr	r1, [pc, #44]	@ (80051b0 <prvCheckForValidListAndQueue+0x7c>)
 8005182:	4618      	mov	r0, r3
 8005184:	f7fe fd90 	bl	8003ca8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005188:	f000 f938 	bl	80053fc <vPortExitCritical>
}
 800518c:	bf00      	nop
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20001158 	.word	0x20001158
 8005198:	20001128 	.word	0x20001128
 800519c:	2000113c 	.word	0x2000113c
 80051a0:	20001150 	.word	0x20001150
 80051a4:	20001154 	.word	0x20001154
 80051a8:	20001204 	.word	0x20001204
 80051ac:	20001164 	.word	0x20001164
 80051b0:	08006cb8 	.word	0x08006cb8

080051b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3b04      	subs	r3, #4
 80051c4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3b04      	subs	r3, #4
 80051d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f023 0201 	bic.w	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3b04      	subs	r3, #4
 80051e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051e4:	4a08      	ldr	r2, [pc, #32]	@ (8005208 <pxPortInitialiseStack+0x54>)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3b14      	subs	r3, #20
 80051ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3b20      	subs	r3, #32
 80051fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051fc:	68fb      	ldr	r3, [r7, #12]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr
 8005208:	0800520d 	.word	0x0800520d

0800520c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005212:	2300      	movs	r3, #0
 8005214:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005216:	4b12      	ldr	r3, [pc, #72]	@ (8005260 <prvTaskExitError+0x54>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800521e:	d00b      	beq.n	8005238 <prvTaskExitError+0x2c>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	60fb      	str	r3, [r7, #12]
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <prvTaskExitError+0x28>
	__asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	60bb      	str	r3, [r7, #8]
}
 800524a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800524c:	bf00      	nop
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0fc      	beq.n	800524e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr
 8005260:	2000000c 	.word	0x2000000c
	...

08005270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005270:	4b07      	ldr	r3, [pc, #28]	@ (8005290 <pxCurrentTCBConst2>)
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	6808      	ldr	r0, [r1, #0]
 8005276:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800527a:	f380 8809 	msr	PSP, r0
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f380 8811 	msr	BASEPRI, r0
 800528a:	f04e 0e0d 	orr.w	lr, lr, #13
 800528e:	4770      	bx	lr

08005290 <pxCurrentTCBConst2>:
 8005290:	20000c28 	.word	0x20000c28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop

08005298 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005298:	4806      	ldr	r0, [pc, #24]	@ (80052b4 <prvPortStartFirstTask+0x1c>)
 800529a:	6800      	ldr	r0, [r0, #0]
 800529c:	6800      	ldr	r0, [r0, #0]
 800529e:	f380 8808 	msr	MSP, r0
 80052a2:	b662      	cpsie	i
 80052a4:	b661      	cpsie	f
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	df00      	svc	0
 80052b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052b2:	bf00      	nop
 80052b4:	e000ed08 	.word	0xe000ed08

080052b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052be:	4b32      	ldr	r3, [pc, #200]	@ (8005388 <xPortStartScheduler+0xd0>)
 80052c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	22ff      	movs	r2, #255	@ 0xff
 80052ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	4b2a      	ldr	r3, [pc, #168]	@ (800538c <xPortStartScheduler+0xd4>)
 80052e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005390 <xPortStartScheduler+0xd8>)
 80052e8:	2207      	movs	r2, #7
 80052ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ec:	e009      	b.n	8005302 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80052ee:	4b28      	ldr	r3, [pc, #160]	@ (8005390 <xPortStartScheduler+0xd8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	4a26      	ldr	r2, [pc, #152]	@ (8005390 <xPortStartScheduler+0xd8>)
 80052f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005302:	78fb      	ldrb	r3, [r7, #3]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530a:	2b80      	cmp	r3, #128	@ 0x80
 800530c:	d0ef      	beq.n	80052ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800530e:	4b20      	ldr	r3, [pc, #128]	@ (8005390 <xPortStartScheduler+0xd8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f1c3 0307 	rsb	r3, r3, #7
 8005316:	2b04      	cmp	r3, #4
 8005318:	d00b      	beq.n	8005332 <xPortStartScheduler+0x7a>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	60bb      	str	r3, [r7, #8]
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	e7fd      	b.n	800532e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005332:	4b17      	ldr	r3, [pc, #92]	@ (8005390 <xPortStartScheduler+0xd8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	4a15      	ldr	r2, [pc, #84]	@ (8005390 <xPortStartScheduler+0xd8>)
 800533a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800533c:	4b14      	ldr	r3, [pc, #80]	@ (8005390 <xPortStartScheduler+0xd8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005344:	4a12      	ldr	r2, [pc, #72]	@ (8005390 <xPortStartScheduler+0xd8>)
 8005346:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	b2da      	uxtb	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005350:	4b10      	ldr	r3, [pc, #64]	@ (8005394 <xPortStartScheduler+0xdc>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a0f      	ldr	r2, [pc, #60]	@ (8005394 <xPortStartScheduler+0xdc>)
 8005356:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800535a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800535c:	4b0d      	ldr	r3, [pc, #52]	@ (8005394 <xPortStartScheduler+0xdc>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a0c      	ldr	r2, [pc, #48]	@ (8005394 <xPortStartScheduler+0xdc>)
 8005362:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005366:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005368:	f000 f8b8 	bl	80054dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800536c:	4b0a      	ldr	r3, [pc, #40]	@ (8005398 <xPortStartScheduler+0xe0>)
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005372:	f7ff ff91 	bl	8005298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005376:	f7ff f8a7 	bl	80044c8 <vTaskSwitchContext>
	prvTaskExitError();
 800537a:	f7ff ff47 	bl	800520c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	e000e400 	.word	0xe000e400
 800538c:	20001254 	.word	0x20001254
 8005390:	20001258 	.word	0x20001258
 8005394:	e000ed20 	.word	0xe000ed20
 8005398:	2000000c 	.word	0x2000000c

0800539c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	607b      	str	r3, [r7, #4]
}
 80053b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053b6:	4b0f      	ldr	r3, [pc, #60]	@ (80053f4 <vPortEnterCritical+0x58>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3301      	adds	r3, #1
 80053bc:	4a0d      	ldr	r2, [pc, #52]	@ (80053f4 <vPortEnterCritical+0x58>)
 80053be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053c0:	4b0c      	ldr	r3, [pc, #48]	@ (80053f4 <vPortEnterCritical+0x58>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d110      	bne.n	80053ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053c8:	4b0b      	ldr	r3, [pc, #44]	@ (80053f8 <vPortEnterCritical+0x5c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <vPortEnterCritical+0x4e>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	603b      	str	r3, [r7, #0]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <vPortEnterCritical+0x4a>
	}
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr
 80053f4:	2000000c 	.word	0x2000000c
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005402:	4b12      	ldr	r3, [pc, #72]	@ (800544c <vPortExitCritical+0x50>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <vPortExitCritical+0x26>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	607b      	str	r3, [r7, #4]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005422:	4b0a      	ldr	r3, [pc, #40]	@ (800544c <vPortExitCritical+0x50>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3b01      	subs	r3, #1
 8005428:	4a08      	ldr	r2, [pc, #32]	@ (800544c <vPortExitCritical+0x50>)
 800542a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800542c:	4b07      	ldr	r3, [pc, #28]	@ (800544c <vPortExitCritical+0x50>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d105      	bne.n	8005440 <vPortExitCritical+0x44>
 8005434:	2300      	movs	r3, #0
 8005436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f383 8811 	msr	BASEPRI, r3
}
 800543e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	bc80      	pop	{r7}
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	2000000c 	.word	0x2000000c

08005450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005450:	f3ef 8009 	mrs	r0, PSP
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	4b0d      	ldr	r3, [pc, #52]	@ (8005490 <pxCurrentTCBConst>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005460:	6010      	str	r0, [r2, #0]
 8005462:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005466:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800546a:	f380 8811 	msr	BASEPRI, r0
 800546e:	f7ff f82b 	bl	80044c8 <vTaskSwitchContext>
 8005472:	f04f 0000 	mov.w	r0, #0
 8005476:	f380 8811 	msr	BASEPRI, r0
 800547a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800547e:	6819      	ldr	r1, [r3, #0]
 8005480:	6808      	ldr	r0, [r1, #0]
 8005482:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005486:	f380 8809 	msr	PSP, r0
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	4770      	bx	lr

08005490 <pxCurrentTCBConst>:
 8005490:	20000c28 	.word	0x20000c28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop

08005498 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	607b      	str	r3, [r7, #4]
}
 80054b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054b2:	f7fe ff49 	bl	8004348 <xTaskIncrementTick>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054bc:	4b06      	ldr	r3, [pc, #24]	@ (80054d8 <xPortSysTickHandler+0x40>)
 80054be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	2300      	movs	r3, #0
 80054c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f383 8811 	msr	BASEPRI, r3
}
 80054ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054e0:	4b0a      	ldr	r3, [pc, #40]	@ (800550c <vPortSetupTimerInterrupt+0x30>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005510 <vPortSetupTimerInterrupt+0x34>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054ec:	4b09      	ldr	r3, [pc, #36]	@ (8005514 <vPortSetupTimerInterrupt+0x38>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a09      	ldr	r2, [pc, #36]	@ (8005518 <vPortSetupTimerInterrupt+0x3c>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	099b      	lsrs	r3, r3, #6
 80054f8:	4a08      	ldr	r2, [pc, #32]	@ (800551c <vPortSetupTimerInterrupt+0x40>)
 80054fa:	3b01      	subs	r3, #1
 80054fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054fe:	4b03      	ldr	r3, [pc, #12]	@ (800550c <vPortSetupTimerInterrupt+0x30>)
 8005500:	2207      	movs	r2, #7
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr
 800550c:	e000e010 	.word	0xe000e010
 8005510:	e000e018 	.word	0xe000e018
 8005514:	20000000 	.word	0x20000000
 8005518:	10624dd3 	.word	0x10624dd3
 800551c:	e000e014 	.word	0xe000e014

08005520 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005526:	f3ef 8305 	mrs	r3, IPSR
 800552a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b0f      	cmp	r3, #15
 8005530:	d915      	bls.n	800555e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005532:	4a17      	ldr	r2, [pc, #92]	@ (8005590 <vPortValidateInterruptPriority+0x70>)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800553c:	4b15      	ldr	r3, [pc, #84]	@ (8005594 <vPortValidateInterruptPriority+0x74>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	7afa      	ldrb	r2, [r7, #11]
 8005542:	429a      	cmp	r2, r3
 8005544:	d20b      	bcs.n	800555e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	607b      	str	r3, [r7, #4]
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800555e:	4b0e      	ldr	r3, [pc, #56]	@ (8005598 <vPortValidateInterruptPriority+0x78>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005566:	4b0d      	ldr	r3, [pc, #52]	@ (800559c <vPortValidateInterruptPriority+0x7c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d90b      	bls.n	8005586 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	603b      	str	r3, [r7, #0]
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	e7fd      	b.n	8005582 <vPortValidateInterruptPriority+0x62>
	}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr
 8005590:	e000e3f0 	.word	0xe000e3f0
 8005594:	20001254 	.word	0x20001254
 8005598:	e000ed0c 	.word	0xe000ed0c
 800559c:	20001258 	.word	0x20001258

080055a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	@ 0x28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055a8:	2300      	movs	r3, #0
 80055aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055ac:	f7fe fe12 	bl	80041d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055b0:	4b5a      	ldr	r3, [pc, #360]	@ (800571c <pvPortMalloc+0x17c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055b8:	f000 f916 	bl	80057e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055bc:	4b58      	ldr	r3, [pc, #352]	@ (8005720 <pvPortMalloc+0x180>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f040 8090 	bne.w	80056ea <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01e      	beq.n	800560e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80055d0:	2208      	movs	r2, #8
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4413      	add	r3, r2
 80055d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d015      	beq.n	800560e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f023 0307 	bic.w	r3, r3, #7
 80055e8:	3308      	adds	r3, #8
 80055ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <pvPortMalloc+0x6e>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	617b      	str	r3, [r7, #20]
}
 8005608:	bf00      	nop
 800560a:	bf00      	nop
 800560c:	e7fd      	b.n	800560a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d06a      	beq.n	80056ea <pvPortMalloc+0x14a>
 8005614:	4b43      	ldr	r3, [pc, #268]	@ (8005724 <pvPortMalloc+0x184>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d865      	bhi.n	80056ea <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800561e:	4b42      	ldr	r3, [pc, #264]	@ (8005728 <pvPortMalloc+0x188>)
 8005620:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005622:	4b41      	ldr	r3, [pc, #260]	@ (8005728 <pvPortMalloc+0x188>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005628:	e004      	b.n	8005634 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800562e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	429a      	cmp	r2, r3
 800563c:	d903      	bls.n	8005646 <pvPortMalloc+0xa6>
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f1      	bne.n	800562a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005646:	4b35      	ldr	r3, [pc, #212]	@ (800571c <pvPortMalloc+0x17c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564c:	429a      	cmp	r2, r3
 800564e:	d04c      	beq.n	80056ea <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2208      	movs	r2, #8
 8005656:	4413      	add	r3, r2
 8005658:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	1ad2      	subs	r2, r2, r3
 800566a:	2308      	movs	r3, #8
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	429a      	cmp	r2, r3
 8005670:	d920      	bls.n	80056b4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4413      	add	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00b      	beq.n	800569c <pvPortMalloc+0xfc>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	613b      	str	r3, [r7, #16]
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	e7fd      	b.n	8005698 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	1ad2      	subs	r2, r2, r3
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056ae:	69b8      	ldr	r0, [r7, #24]
 80056b0:	f000 f8fc 	bl	80058ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005724 <pvPortMalloc+0x184>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	4a19      	ldr	r2, [pc, #100]	@ (8005724 <pvPortMalloc+0x184>)
 80056c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056c2:	4b18      	ldr	r3, [pc, #96]	@ (8005724 <pvPortMalloc+0x184>)
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	4b19      	ldr	r3, [pc, #100]	@ (800572c <pvPortMalloc+0x18c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d203      	bcs.n	80056d6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056ce:	4b15      	ldr	r3, [pc, #84]	@ (8005724 <pvPortMalloc+0x184>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a16      	ldr	r2, [pc, #88]	@ (800572c <pvPortMalloc+0x18c>)
 80056d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	4b11      	ldr	r3, [pc, #68]	@ (8005720 <pvPortMalloc+0x180>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	431a      	orrs	r2, r3
 80056e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056ea:	f7fe fd81 	bl	80041f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00b      	beq.n	8005710 <pvPortMalloc+0x170>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	60fb      	str	r3, [r7, #12]
}
 800570a:	bf00      	nop
 800570c:	bf00      	nop
 800570e:	e7fd      	b.n	800570c <pvPortMalloc+0x16c>
	return pvReturn;
 8005710:	69fb      	ldr	r3, [r7, #28]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3728      	adds	r7, #40	@ 0x28
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20001e64 	.word	0x20001e64
 8005720:	20001e70 	.word	0x20001e70
 8005724:	20001e68 	.word	0x20001e68
 8005728:	20001e5c 	.word	0x20001e5c
 800572c:	20001e6c 	.word	0x20001e6c

08005730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d04a      	beq.n	80057d8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005742:	2308      	movs	r3, #8
 8005744:	425b      	negs	r3, r3
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4413      	add	r3, r2
 800574a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	4b22      	ldr	r3, [pc, #136]	@ (80057e0 <vPortFree+0xb0>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4013      	ands	r3, r2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <vPortFree+0x46>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	60fb      	str	r3, [r7, #12]
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	e7fd      	b.n	8005772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <vPortFree+0x66>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60bb      	str	r3, [r7, #8]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	4b11      	ldr	r3, [pc, #68]	@ (80057e0 <vPortFree+0xb0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4013      	ands	r3, r2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d019      	beq.n	80057d8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d115      	bne.n	80057d8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	4b0b      	ldr	r3, [pc, #44]	@ (80057e0 <vPortFree+0xb0>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	43db      	mvns	r3, r3
 80057b6:	401a      	ands	r2, r3
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057bc:	f7fe fd0a 	bl	80041d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	4b07      	ldr	r3, [pc, #28]	@ (80057e4 <vPortFree+0xb4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4413      	add	r3, r2
 80057ca:	4a06      	ldr	r2, [pc, #24]	@ (80057e4 <vPortFree+0xb4>)
 80057cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057ce:	6938      	ldr	r0, [r7, #16]
 80057d0:	f000 f86c 	bl	80058ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057d4:	f7fe fd0c 	bl	80041f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057d8:	bf00      	nop
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	20001e70 	.word	0x20001e70
 80057e4:	20001e68 	.word	0x20001e68

080057e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057ee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80057f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057f4:	4b27      	ldr	r3, [pc, #156]	@ (8005894 <prvHeapInit+0xac>)
 80057f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00c      	beq.n	800581c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3307      	adds	r3, #7
 8005806:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0307 	bic.w	r3, r3, #7
 800580e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	4a1f      	ldr	r2, [pc, #124]	@ (8005894 <prvHeapInit+0xac>)
 8005818:	4413      	add	r3, r2
 800581a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005820:	4a1d      	ldr	r2, [pc, #116]	@ (8005898 <prvHeapInit+0xb0>)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005826:	4b1c      	ldr	r3, [pc, #112]	@ (8005898 <prvHeapInit+0xb0>)
 8005828:	2200      	movs	r2, #0
 800582a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	4413      	add	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005834:	2208      	movs	r2, #8
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	1a9b      	subs	r3, r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0307 	bic.w	r3, r3, #7
 8005842:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4a15      	ldr	r2, [pc, #84]	@ (800589c <prvHeapInit+0xb4>)
 8005848:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800584a:	4b14      	ldr	r3, [pc, #80]	@ (800589c <prvHeapInit+0xb4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2200      	movs	r2, #0
 8005850:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005852:	4b12      	ldr	r3, [pc, #72]	@ (800589c <prvHeapInit+0xb4>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	1ad2      	subs	r2, r2, r3
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005868:	4b0c      	ldr	r3, [pc, #48]	@ (800589c <prvHeapInit+0xb4>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4a0a      	ldr	r2, [pc, #40]	@ (80058a0 <prvHeapInit+0xb8>)
 8005876:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	4a09      	ldr	r2, [pc, #36]	@ (80058a4 <prvHeapInit+0xbc>)
 800587e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005880:	4b09      	ldr	r3, [pc, #36]	@ (80058a8 <prvHeapInit+0xc0>)
 8005882:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005886:	601a      	str	r2, [r3, #0]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	2000125c 	.word	0x2000125c
 8005898:	20001e5c 	.word	0x20001e5c
 800589c:	20001e64 	.word	0x20001e64
 80058a0:	20001e6c 	.word	0x20001e6c
 80058a4:	20001e68 	.word	0x20001e68
 80058a8:	20001e70 	.word	0x20001e70

080058ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058b4:	4b27      	ldr	r3, [pc, #156]	@ (8005954 <prvInsertBlockIntoFreeList+0xa8>)
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	e002      	b.n	80058c0 <prvInsertBlockIntoFreeList+0x14>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d8f7      	bhi.n	80058ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	4413      	add	r3, r2
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d108      	bne.n	80058ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	441a      	add	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	441a      	add	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d118      	bne.n	8005934 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	4b14      	ldr	r3, [pc, #80]	@ (8005958 <prvInsertBlockIntoFreeList+0xac>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d00d      	beq.n	800592a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	441a      	add	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	e008      	b.n	800593c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800592a:	4b0b      	ldr	r3, [pc, #44]	@ (8005958 <prvInsertBlockIntoFreeList+0xac>)
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	e003      	b.n	800593c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	429a      	cmp	r2, r3
 8005942:	d002      	beq.n	800594a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800594a:	bf00      	nop
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr
 8005954:	20001e5c 	.word	0x20001e5c
 8005958:	20001e64 	.word	0x20001e64

0800595c <siprintf>:
 800595c:	b40e      	push	{r1, r2, r3}
 800595e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005962:	b500      	push	{lr}
 8005964:	b09c      	sub	sp, #112	@ 0x70
 8005966:	ab1d      	add	r3, sp, #116	@ 0x74
 8005968:	9002      	str	r0, [sp, #8]
 800596a:	9006      	str	r0, [sp, #24]
 800596c:	9107      	str	r1, [sp, #28]
 800596e:	9104      	str	r1, [sp, #16]
 8005970:	4808      	ldr	r0, [pc, #32]	@ (8005994 <siprintf+0x38>)
 8005972:	4909      	ldr	r1, [pc, #36]	@ (8005998 <siprintf+0x3c>)
 8005974:	f853 2b04 	ldr.w	r2, [r3], #4
 8005978:	9105      	str	r1, [sp, #20]
 800597a:	6800      	ldr	r0, [r0, #0]
 800597c:	a902      	add	r1, sp, #8
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	f000 f9e0 	bl	8005d44 <_svfiprintf_r>
 8005984:	2200      	movs	r2, #0
 8005986:	9b02      	ldr	r3, [sp, #8]
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	b01c      	add	sp, #112	@ 0x70
 800598c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005990:	b003      	add	sp, #12
 8005992:	4770      	bx	lr
 8005994:	2000001c 	.word	0x2000001c
 8005998:	ffff0208 	.word	0xffff0208

0800599c <std>:
 800599c:	2300      	movs	r3, #0
 800599e:	b510      	push	{r4, lr}
 80059a0:	4604      	mov	r4, r0
 80059a2:	e9c0 3300 	strd	r3, r3, [r0]
 80059a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059aa:	6083      	str	r3, [r0, #8]
 80059ac:	8181      	strh	r1, [r0, #12]
 80059ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80059b0:	81c2      	strh	r2, [r0, #14]
 80059b2:	6183      	str	r3, [r0, #24]
 80059b4:	4619      	mov	r1, r3
 80059b6:	2208      	movs	r2, #8
 80059b8:	305c      	adds	r0, #92	@ 0x5c
 80059ba:	f000 f925 	bl	8005c08 <memset>
 80059be:	4b0d      	ldr	r3, [pc, #52]	@ (80059f4 <std+0x58>)
 80059c0:	6224      	str	r4, [r4, #32]
 80059c2:	6263      	str	r3, [r4, #36]	@ 0x24
 80059c4:	4b0c      	ldr	r3, [pc, #48]	@ (80059f8 <std+0x5c>)
 80059c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80059c8:	4b0c      	ldr	r3, [pc, #48]	@ (80059fc <std+0x60>)
 80059ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80059cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a00 <std+0x64>)
 80059ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80059d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005a04 <std+0x68>)
 80059d2:	429c      	cmp	r4, r3
 80059d4:	d006      	beq.n	80059e4 <std+0x48>
 80059d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059da:	4294      	cmp	r4, r2
 80059dc:	d002      	beq.n	80059e4 <std+0x48>
 80059de:	33d0      	adds	r3, #208	@ 0xd0
 80059e0:	429c      	cmp	r4, r3
 80059e2:	d105      	bne.n	80059f0 <std+0x54>
 80059e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ec:	f000 b93e 	b.w	8005c6c <__retarget_lock_init_recursive>
 80059f0:	bd10      	pop	{r4, pc}
 80059f2:	bf00      	nop
 80059f4:	0800650d 	.word	0x0800650d
 80059f8:	0800652f 	.word	0x0800652f
 80059fc:	08006567 	.word	0x08006567
 8005a00:	0800658b 	.word	0x0800658b
 8005a04:	20001e74 	.word	0x20001e74

08005a08 <stdio_exit_handler>:
 8005a08:	4a02      	ldr	r2, [pc, #8]	@ (8005a14 <stdio_exit_handler+0xc>)
 8005a0a:	4903      	ldr	r1, [pc, #12]	@ (8005a18 <stdio_exit_handler+0x10>)
 8005a0c:	4803      	ldr	r0, [pc, #12]	@ (8005a1c <stdio_exit_handler+0x14>)
 8005a0e:	f000 b869 	b.w	8005ae4 <_fwalk_sglue>
 8005a12:	bf00      	nop
 8005a14:	20000010 	.word	0x20000010
 8005a18:	080064a5 	.word	0x080064a5
 8005a1c:	20000020 	.word	0x20000020

08005a20 <cleanup_stdio>:
 8005a20:	6841      	ldr	r1, [r0, #4]
 8005a22:	4b0c      	ldr	r3, [pc, #48]	@ (8005a54 <cleanup_stdio+0x34>)
 8005a24:	b510      	push	{r4, lr}
 8005a26:	4299      	cmp	r1, r3
 8005a28:	4604      	mov	r4, r0
 8005a2a:	d001      	beq.n	8005a30 <cleanup_stdio+0x10>
 8005a2c:	f000 fd3a 	bl	80064a4 <_fflush_r>
 8005a30:	68a1      	ldr	r1, [r4, #8]
 8005a32:	4b09      	ldr	r3, [pc, #36]	@ (8005a58 <cleanup_stdio+0x38>)
 8005a34:	4299      	cmp	r1, r3
 8005a36:	d002      	beq.n	8005a3e <cleanup_stdio+0x1e>
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f000 fd33 	bl	80064a4 <_fflush_r>
 8005a3e:	68e1      	ldr	r1, [r4, #12]
 8005a40:	4b06      	ldr	r3, [pc, #24]	@ (8005a5c <cleanup_stdio+0x3c>)
 8005a42:	4299      	cmp	r1, r3
 8005a44:	d004      	beq.n	8005a50 <cleanup_stdio+0x30>
 8005a46:	4620      	mov	r0, r4
 8005a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a4c:	f000 bd2a 	b.w	80064a4 <_fflush_r>
 8005a50:	bd10      	pop	{r4, pc}
 8005a52:	bf00      	nop
 8005a54:	20001e74 	.word	0x20001e74
 8005a58:	20001edc 	.word	0x20001edc
 8005a5c:	20001f44 	.word	0x20001f44

08005a60 <global_stdio_init.part.0>:
 8005a60:	b510      	push	{r4, lr}
 8005a62:	4b0b      	ldr	r3, [pc, #44]	@ (8005a90 <global_stdio_init.part.0+0x30>)
 8005a64:	4c0b      	ldr	r4, [pc, #44]	@ (8005a94 <global_stdio_init.part.0+0x34>)
 8005a66:	4a0c      	ldr	r2, [pc, #48]	@ (8005a98 <global_stdio_init.part.0+0x38>)
 8005a68:	4620      	mov	r0, r4
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	2104      	movs	r1, #4
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f7ff ff94 	bl	800599c <std>
 8005a74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a78:	2201      	movs	r2, #1
 8005a7a:	2109      	movs	r1, #9
 8005a7c:	f7ff ff8e 	bl	800599c <std>
 8005a80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a84:	2202      	movs	r2, #2
 8005a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a8a:	2112      	movs	r1, #18
 8005a8c:	f7ff bf86 	b.w	800599c <std>
 8005a90:	20001fac 	.word	0x20001fac
 8005a94:	20001e74 	.word	0x20001e74
 8005a98:	08005a09 	.word	0x08005a09

08005a9c <__sfp_lock_acquire>:
 8005a9c:	4801      	ldr	r0, [pc, #4]	@ (8005aa4 <__sfp_lock_acquire+0x8>)
 8005a9e:	f000 b8e6 	b.w	8005c6e <__retarget_lock_acquire_recursive>
 8005aa2:	bf00      	nop
 8005aa4:	20001fb1 	.word	0x20001fb1

08005aa8 <__sfp_lock_release>:
 8005aa8:	4801      	ldr	r0, [pc, #4]	@ (8005ab0 <__sfp_lock_release+0x8>)
 8005aaa:	f000 b8e1 	b.w	8005c70 <__retarget_lock_release_recursive>
 8005aae:	bf00      	nop
 8005ab0:	20001fb1 	.word	0x20001fb1

08005ab4 <__sinit>:
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	f7ff fff0 	bl	8005a9c <__sfp_lock_acquire>
 8005abc:	6a23      	ldr	r3, [r4, #32]
 8005abe:	b11b      	cbz	r3, 8005ac8 <__sinit+0x14>
 8005ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ac4:	f7ff bff0 	b.w	8005aa8 <__sfp_lock_release>
 8005ac8:	4b04      	ldr	r3, [pc, #16]	@ (8005adc <__sinit+0x28>)
 8005aca:	6223      	str	r3, [r4, #32]
 8005acc:	4b04      	ldr	r3, [pc, #16]	@ (8005ae0 <__sinit+0x2c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1f5      	bne.n	8005ac0 <__sinit+0xc>
 8005ad4:	f7ff ffc4 	bl	8005a60 <global_stdio_init.part.0>
 8005ad8:	e7f2      	b.n	8005ac0 <__sinit+0xc>
 8005ada:	bf00      	nop
 8005adc:	08005a21 	.word	0x08005a21
 8005ae0:	20001fac 	.word	0x20001fac

08005ae4 <_fwalk_sglue>:
 8005ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae8:	4607      	mov	r7, r0
 8005aea:	4688      	mov	r8, r1
 8005aec:	4614      	mov	r4, r2
 8005aee:	2600      	movs	r6, #0
 8005af0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005af4:	f1b9 0901 	subs.w	r9, r9, #1
 8005af8:	d505      	bpl.n	8005b06 <_fwalk_sglue+0x22>
 8005afa:	6824      	ldr	r4, [r4, #0]
 8005afc:	2c00      	cmp	r4, #0
 8005afe:	d1f7      	bne.n	8005af0 <_fwalk_sglue+0xc>
 8005b00:	4630      	mov	r0, r6
 8005b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b06:	89ab      	ldrh	r3, [r5, #12]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d907      	bls.n	8005b1c <_fwalk_sglue+0x38>
 8005b0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b10:	3301      	adds	r3, #1
 8005b12:	d003      	beq.n	8005b1c <_fwalk_sglue+0x38>
 8005b14:	4629      	mov	r1, r5
 8005b16:	4638      	mov	r0, r7
 8005b18:	47c0      	blx	r8
 8005b1a:	4306      	orrs	r6, r0
 8005b1c:	3568      	adds	r5, #104	@ 0x68
 8005b1e:	e7e9      	b.n	8005af4 <_fwalk_sglue+0x10>

08005b20 <_puts_r>:
 8005b20:	6a03      	ldr	r3, [r0, #32]
 8005b22:	b570      	push	{r4, r5, r6, lr}
 8005b24:	4605      	mov	r5, r0
 8005b26:	460e      	mov	r6, r1
 8005b28:	6884      	ldr	r4, [r0, #8]
 8005b2a:	b90b      	cbnz	r3, 8005b30 <_puts_r+0x10>
 8005b2c:	f7ff ffc2 	bl	8005ab4 <__sinit>
 8005b30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b32:	07db      	lsls	r3, r3, #31
 8005b34:	d405      	bmi.n	8005b42 <_puts_r+0x22>
 8005b36:	89a3      	ldrh	r3, [r4, #12]
 8005b38:	0598      	lsls	r0, r3, #22
 8005b3a:	d402      	bmi.n	8005b42 <_puts_r+0x22>
 8005b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b3e:	f000 f896 	bl	8005c6e <__retarget_lock_acquire_recursive>
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	0719      	lsls	r1, r3, #28
 8005b46:	d502      	bpl.n	8005b4e <_puts_r+0x2e>
 8005b48:	6923      	ldr	r3, [r4, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d135      	bne.n	8005bba <_puts_r+0x9a>
 8005b4e:	4621      	mov	r1, r4
 8005b50:	4628      	mov	r0, r5
 8005b52:	f000 fd8b 	bl	800666c <__swsetup_r>
 8005b56:	b380      	cbz	r0, 8005bba <_puts_r+0x9a>
 8005b58:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005b5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b5e:	07da      	lsls	r2, r3, #31
 8005b60:	d405      	bmi.n	8005b6e <_puts_r+0x4e>
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	059b      	lsls	r3, r3, #22
 8005b66:	d402      	bmi.n	8005b6e <_puts_r+0x4e>
 8005b68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b6a:	f000 f881 	bl	8005c70 <__retarget_lock_release_recursive>
 8005b6e:	4628      	mov	r0, r5
 8005b70:	bd70      	pop	{r4, r5, r6, pc}
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	da04      	bge.n	8005b80 <_puts_r+0x60>
 8005b76:	69a2      	ldr	r2, [r4, #24]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	dc17      	bgt.n	8005bac <_puts_r+0x8c>
 8005b7c:	290a      	cmp	r1, #10
 8005b7e:	d015      	beq.n	8005bac <_puts_r+0x8c>
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	6022      	str	r2, [r4, #0]
 8005b86:	7019      	strb	r1, [r3, #0]
 8005b88:	68a3      	ldr	r3, [r4, #8]
 8005b8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	60a3      	str	r3, [r4, #8]
 8005b92:	2900      	cmp	r1, #0
 8005b94:	d1ed      	bne.n	8005b72 <_puts_r+0x52>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	da11      	bge.n	8005bbe <_puts_r+0x9e>
 8005b9a:	4622      	mov	r2, r4
 8005b9c:	210a      	movs	r1, #10
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 fd25 	bl	80065ee <__swbuf_r>
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d0d7      	beq.n	8005b58 <_puts_r+0x38>
 8005ba8:	250a      	movs	r5, #10
 8005baa:	e7d7      	b.n	8005b5c <_puts_r+0x3c>
 8005bac:	4622      	mov	r2, r4
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f000 fd1d 	bl	80065ee <__swbuf_r>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d1e7      	bne.n	8005b88 <_puts_r+0x68>
 8005bb8:	e7ce      	b.n	8005b58 <_puts_r+0x38>
 8005bba:	3e01      	subs	r6, #1
 8005bbc:	e7e4      	b.n	8005b88 <_puts_r+0x68>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	6022      	str	r2, [r4, #0]
 8005bc4:	220a      	movs	r2, #10
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	e7ee      	b.n	8005ba8 <_puts_r+0x88>
	...

08005bcc <puts>:
 8005bcc:	4b02      	ldr	r3, [pc, #8]	@ (8005bd8 <puts+0xc>)
 8005bce:	4601      	mov	r1, r0
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	f7ff bfa5 	b.w	8005b20 <_puts_r>
 8005bd6:	bf00      	nop
 8005bd8:	2000001c 	.word	0x2000001c

08005bdc <strstr>:
 8005bdc:	780a      	ldrb	r2, [r1, #0]
 8005bde:	b570      	push	{r4, r5, r6, lr}
 8005be0:	b96a      	cbnz	r2, 8005bfe <strstr+0x22>
 8005be2:	bd70      	pop	{r4, r5, r6, pc}
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d109      	bne.n	8005bfc <strstr+0x20>
 8005be8:	460c      	mov	r4, r1
 8005bea:	4605      	mov	r5, r0
 8005bec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0f6      	beq.n	8005be2 <strstr+0x6>
 8005bf4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005bf8:	429e      	cmp	r6, r3
 8005bfa:	d0f7      	beq.n	8005bec <strstr+0x10>
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	7803      	ldrb	r3, [r0, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1ef      	bne.n	8005be4 <strstr+0x8>
 8005c04:	4618      	mov	r0, r3
 8005c06:	e7ec      	b.n	8005be2 <strstr+0x6>

08005c08 <memset>:
 8005c08:	4603      	mov	r3, r0
 8005c0a:	4402      	add	r2, r0
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d100      	bne.n	8005c12 <memset+0xa>
 8005c10:	4770      	bx	lr
 8005c12:	f803 1b01 	strb.w	r1, [r3], #1
 8005c16:	e7f9      	b.n	8005c0c <memset+0x4>

08005c18 <__errno>:
 8005c18:	4b01      	ldr	r3, [pc, #4]	@ (8005c20 <__errno+0x8>)
 8005c1a:	6818      	ldr	r0, [r3, #0]
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	2000001c 	.word	0x2000001c

08005c24 <__libc_init_array>:
 8005c24:	b570      	push	{r4, r5, r6, lr}
 8005c26:	2600      	movs	r6, #0
 8005c28:	4d0c      	ldr	r5, [pc, #48]	@ (8005c5c <__libc_init_array+0x38>)
 8005c2a:	4c0d      	ldr	r4, [pc, #52]	@ (8005c60 <__libc_init_array+0x3c>)
 8005c2c:	1b64      	subs	r4, r4, r5
 8005c2e:	10a4      	asrs	r4, r4, #2
 8005c30:	42a6      	cmp	r6, r4
 8005c32:	d109      	bne.n	8005c48 <__libc_init_array+0x24>
 8005c34:	f000 fec2 	bl	80069bc <_init>
 8005c38:	2600      	movs	r6, #0
 8005c3a:	4d0a      	ldr	r5, [pc, #40]	@ (8005c64 <__libc_init_array+0x40>)
 8005c3c:	4c0a      	ldr	r4, [pc, #40]	@ (8005c68 <__libc_init_array+0x44>)
 8005c3e:	1b64      	subs	r4, r4, r5
 8005c40:	10a4      	asrs	r4, r4, #2
 8005c42:	42a6      	cmp	r6, r4
 8005c44:	d105      	bne.n	8005c52 <__libc_init_array+0x2e>
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
 8005c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4c:	4798      	blx	r3
 8005c4e:	3601      	adds	r6, #1
 8005c50:	e7ee      	b.n	8005c30 <__libc_init_array+0xc>
 8005c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c56:	4798      	blx	r3
 8005c58:	3601      	adds	r6, #1
 8005c5a:	e7f2      	b.n	8005c42 <__libc_init_array+0x1e>
 8005c5c:	08006d70 	.word	0x08006d70
 8005c60:	08006d70 	.word	0x08006d70
 8005c64:	08006d70 	.word	0x08006d70
 8005c68:	08006d74 	.word	0x08006d74

08005c6c <__retarget_lock_init_recursive>:
 8005c6c:	4770      	bx	lr

08005c6e <__retarget_lock_acquire_recursive>:
 8005c6e:	4770      	bx	lr

08005c70 <__retarget_lock_release_recursive>:
 8005c70:	4770      	bx	lr

08005c72 <memcpy>:
 8005c72:	440a      	add	r2, r1
 8005c74:	4291      	cmp	r1, r2
 8005c76:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005c7a:	d100      	bne.n	8005c7e <memcpy+0xc>
 8005c7c:	4770      	bx	lr
 8005c7e:	b510      	push	{r4, lr}
 8005c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c84:	4291      	cmp	r1, r2
 8005c86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c8a:	d1f9      	bne.n	8005c80 <memcpy+0xe>
 8005c8c:	bd10      	pop	{r4, pc}

08005c8e <__ssputs_r>:
 8005c8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c92:	461f      	mov	r7, r3
 8005c94:	688e      	ldr	r6, [r1, #8]
 8005c96:	4682      	mov	sl, r0
 8005c98:	42be      	cmp	r6, r7
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	4690      	mov	r8, r2
 8005c9e:	680b      	ldr	r3, [r1, #0]
 8005ca0:	d82d      	bhi.n	8005cfe <__ssputs_r+0x70>
 8005ca2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ca6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005caa:	d026      	beq.n	8005cfa <__ssputs_r+0x6c>
 8005cac:	6965      	ldr	r5, [r4, #20]
 8005cae:	6909      	ldr	r1, [r1, #16]
 8005cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cb4:	eba3 0901 	sub.w	r9, r3, r1
 8005cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cbc:	1c7b      	adds	r3, r7, #1
 8005cbe:	444b      	add	r3, r9
 8005cc0:	106d      	asrs	r5, r5, #1
 8005cc2:	429d      	cmp	r5, r3
 8005cc4:	bf38      	it	cc
 8005cc6:	461d      	movcc	r5, r3
 8005cc8:	0553      	lsls	r3, r2, #21
 8005cca:	d527      	bpl.n	8005d1c <__ssputs_r+0x8e>
 8005ccc:	4629      	mov	r1, r5
 8005cce:	f000 f957 	bl	8005f80 <_malloc_r>
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	b360      	cbz	r0, 8005d30 <__ssputs_r+0xa2>
 8005cd6:	464a      	mov	r2, r9
 8005cd8:	6921      	ldr	r1, [r4, #16]
 8005cda:	f7ff ffca 	bl	8005c72 <memcpy>
 8005cde:	89a3      	ldrh	r3, [r4, #12]
 8005ce0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ce8:	81a3      	strh	r3, [r4, #12]
 8005cea:	6126      	str	r6, [r4, #16]
 8005cec:	444e      	add	r6, r9
 8005cee:	6026      	str	r6, [r4, #0]
 8005cf0:	463e      	mov	r6, r7
 8005cf2:	6165      	str	r5, [r4, #20]
 8005cf4:	eba5 0509 	sub.w	r5, r5, r9
 8005cf8:	60a5      	str	r5, [r4, #8]
 8005cfa:	42be      	cmp	r6, r7
 8005cfc:	d900      	bls.n	8005d00 <__ssputs_r+0x72>
 8005cfe:	463e      	mov	r6, r7
 8005d00:	4632      	mov	r2, r6
 8005d02:	4641      	mov	r1, r8
 8005d04:	6820      	ldr	r0, [r4, #0]
 8005d06:	f000 fd68 	bl	80067da <memmove>
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	68a3      	ldr	r3, [r4, #8]
 8005d0e:	1b9b      	subs	r3, r3, r6
 8005d10:	60a3      	str	r3, [r4, #8]
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	4433      	add	r3, r6
 8005d16:	6023      	str	r3, [r4, #0]
 8005d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1c:	462a      	mov	r2, r5
 8005d1e:	f000 fc38 	bl	8006592 <_realloc_r>
 8005d22:	4606      	mov	r6, r0
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d1e0      	bne.n	8005cea <__ssputs_r+0x5c>
 8005d28:	4650      	mov	r0, sl
 8005d2a:	6921      	ldr	r1, [r4, #16]
 8005d2c:	f000 fdf6 	bl	800691c <_free_r>
 8005d30:	230c      	movs	r3, #12
 8005d32:	f8ca 3000 	str.w	r3, [sl]
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d40:	81a3      	strh	r3, [r4, #12]
 8005d42:	e7e9      	b.n	8005d18 <__ssputs_r+0x8a>

08005d44 <_svfiprintf_r>:
 8005d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d48:	4698      	mov	r8, r3
 8005d4a:	898b      	ldrh	r3, [r1, #12]
 8005d4c:	4607      	mov	r7, r0
 8005d4e:	061b      	lsls	r3, r3, #24
 8005d50:	460d      	mov	r5, r1
 8005d52:	4614      	mov	r4, r2
 8005d54:	b09d      	sub	sp, #116	@ 0x74
 8005d56:	d510      	bpl.n	8005d7a <_svfiprintf_r+0x36>
 8005d58:	690b      	ldr	r3, [r1, #16]
 8005d5a:	b973      	cbnz	r3, 8005d7a <_svfiprintf_r+0x36>
 8005d5c:	2140      	movs	r1, #64	@ 0x40
 8005d5e:	f000 f90f 	bl	8005f80 <_malloc_r>
 8005d62:	6028      	str	r0, [r5, #0]
 8005d64:	6128      	str	r0, [r5, #16]
 8005d66:	b930      	cbnz	r0, 8005d76 <_svfiprintf_r+0x32>
 8005d68:	230c      	movs	r3, #12
 8005d6a:	603b      	str	r3, [r7, #0]
 8005d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d70:	b01d      	add	sp, #116	@ 0x74
 8005d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d76:	2340      	movs	r3, #64	@ 0x40
 8005d78:	616b      	str	r3, [r5, #20]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d7e:	2320      	movs	r3, #32
 8005d80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d84:	2330      	movs	r3, #48	@ 0x30
 8005d86:	f04f 0901 	mov.w	r9, #1
 8005d8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d8e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005f28 <_svfiprintf_r+0x1e4>
 8005d92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d96:	4623      	mov	r3, r4
 8005d98:	469a      	mov	sl, r3
 8005d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d9e:	b10a      	cbz	r2, 8005da4 <_svfiprintf_r+0x60>
 8005da0:	2a25      	cmp	r2, #37	@ 0x25
 8005da2:	d1f9      	bne.n	8005d98 <_svfiprintf_r+0x54>
 8005da4:	ebba 0b04 	subs.w	fp, sl, r4
 8005da8:	d00b      	beq.n	8005dc2 <_svfiprintf_r+0x7e>
 8005daa:	465b      	mov	r3, fp
 8005dac:	4622      	mov	r2, r4
 8005dae:	4629      	mov	r1, r5
 8005db0:	4638      	mov	r0, r7
 8005db2:	f7ff ff6c 	bl	8005c8e <__ssputs_r>
 8005db6:	3001      	adds	r0, #1
 8005db8:	f000 80a7 	beq.w	8005f0a <_svfiprintf_r+0x1c6>
 8005dbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dbe:	445a      	add	r2, fp
 8005dc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 809f 	beq.w	8005f0a <_svfiprintf_r+0x1c6>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dd6:	f10a 0a01 	add.w	sl, sl, #1
 8005dda:	9304      	str	r3, [sp, #16]
 8005ddc:	9307      	str	r3, [sp, #28]
 8005dde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005de2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005de4:	4654      	mov	r4, sl
 8005de6:	2205      	movs	r2, #5
 8005de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dec:	484e      	ldr	r0, [pc, #312]	@ (8005f28 <_svfiprintf_r+0x1e4>)
 8005dee:	f000 fd87 	bl	8006900 <memchr>
 8005df2:	9a04      	ldr	r2, [sp, #16]
 8005df4:	b9d8      	cbnz	r0, 8005e2e <_svfiprintf_r+0xea>
 8005df6:	06d0      	lsls	r0, r2, #27
 8005df8:	bf44      	itt	mi
 8005dfa:	2320      	movmi	r3, #32
 8005dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e00:	0711      	lsls	r1, r2, #28
 8005e02:	bf44      	itt	mi
 8005e04:	232b      	movmi	r3, #43	@ 0x2b
 8005e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e10:	d015      	beq.n	8005e3e <_svfiprintf_r+0xfa>
 8005e12:	4654      	mov	r4, sl
 8005e14:	2000      	movs	r0, #0
 8005e16:	f04f 0c0a 	mov.w	ip, #10
 8005e1a:	9a07      	ldr	r2, [sp, #28]
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e22:	3b30      	subs	r3, #48	@ 0x30
 8005e24:	2b09      	cmp	r3, #9
 8005e26:	d94b      	bls.n	8005ec0 <_svfiprintf_r+0x17c>
 8005e28:	b1b0      	cbz	r0, 8005e58 <_svfiprintf_r+0x114>
 8005e2a:	9207      	str	r2, [sp, #28]
 8005e2c:	e014      	b.n	8005e58 <_svfiprintf_r+0x114>
 8005e2e:	eba0 0308 	sub.w	r3, r0, r8
 8005e32:	fa09 f303 	lsl.w	r3, r9, r3
 8005e36:	4313      	orrs	r3, r2
 8005e38:	46a2      	mov	sl, r4
 8005e3a:	9304      	str	r3, [sp, #16]
 8005e3c:	e7d2      	b.n	8005de4 <_svfiprintf_r+0xa0>
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	1d19      	adds	r1, r3, #4
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	9103      	str	r1, [sp, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	bfbb      	ittet	lt
 8005e4a:	425b      	neglt	r3, r3
 8005e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8005e50:	9307      	strge	r3, [sp, #28]
 8005e52:	9307      	strlt	r3, [sp, #28]
 8005e54:	bfb8      	it	lt
 8005e56:	9204      	strlt	r2, [sp, #16]
 8005e58:	7823      	ldrb	r3, [r4, #0]
 8005e5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e5c:	d10a      	bne.n	8005e74 <_svfiprintf_r+0x130>
 8005e5e:	7863      	ldrb	r3, [r4, #1]
 8005e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e62:	d132      	bne.n	8005eca <_svfiprintf_r+0x186>
 8005e64:	9b03      	ldr	r3, [sp, #12]
 8005e66:	3402      	adds	r4, #2
 8005e68:	1d1a      	adds	r2, r3, #4
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	9203      	str	r2, [sp, #12]
 8005e6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e72:	9305      	str	r3, [sp, #20]
 8005e74:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005f2c <_svfiprintf_r+0x1e8>
 8005e78:	2203      	movs	r2, #3
 8005e7a:	4650      	mov	r0, sl
 8005e7c:	7821      	ldrb	r1, [r4, #0]
 8005e7e:	f000 fd3f 	bl	8006900 <memchr>
 8005e82:	b138      	cbz	r0, 8005e94 <_svfiprintf_r+0x150>
 8005e84:	2240      	movs	r2, #64	@ 0x40
 8005e86:	9b04      	ldr	r3, [sp, #16]
 8005e88:	eba0 000a 	sub.w	r0, r0, sl
 8005e8c:	4082      	lsls	r2, r0
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	3401      	adds	r4, #1
 8005e92:	9304      	str	r3, [sp, #16]
 8005e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e98:	2206      	movs	r2, #6
 8005e9a:	4825      	ldr	r0, [pc, #148]	@ (8005f30 <_svfiprintf_r+0x1ec>)
 8005e9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ea0:	f000 fd2e 	bl	8006900 <memchr>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d036      	beq.n	8005f16 <_svfiprintf_r+0x1d2>
 8005ea8:	4b22      	ldr	r3, [pc, #136]	@ (8005f34 <_svfiprintf_r+0x1f0>)
 8005eaa:	bb1b      	cbnz	r3, 8005ef4 <_svfiprintf_r+0x1b0>
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	3307      	adds	r3, #7
 8005eb0:	f023 0307 	bic.w	r3, r3, #7
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	9303      	str	r3, [sp, #12]
 8005eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eba:	4433      	add	r3, r6
 8005ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ebe:	e76a      	b.n	8005d96 <_svfiprintf_r+0x52>
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	2001      	movs	r0, #1
 8005ec4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ec8:	e7a8      	b.n	8005e1c <_svfiprintf_r+0xd8>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f04f 0c0a 	mov.w	ip, #10
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	3401      	adds	r4, #1
 8005ed4:	9305      	str	r3, [sp, #20]
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005edc:	3a30      	subs	r2, #48	@ 0x30
 8005ede:	2a09      	cmp	r2, #9
 8005ee0:	d903      	bls.n	8005eea <_svfiprintf_r+0x1a6>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0c6      	beq.n	8005e74 <_svfiprintf_r+0x130>
 8005ee6:	9105      	str	r1, [sp, #20]
 8005ee8:	e7c4      	b.n	8005e74 <_svfiprintf_r+0x130>
 8005eea:	4604      	mov	r4, r0
 8005eec:	2301      	movs	r3, #1
 8005eee:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ef2:	e7f0      	b.n	8005ed6 <_svfiprintf_r+0x192>
 8005ef4:	ab03      	add	r3, sp, #12
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	462a      	mov	r2, r5
 8005efa:	4638      	mov	r0, r7
 8005efc:	4b0e      	ldr	r3, [pc, #56]	@ (8005f38 <_svfiprintf_r+0x1f4>)
 8005efe:	a904      	add	r1, sp, #16
 8005f00:	f3af 8000 	nop.w
 8005f04:	1c42      	adds	r2, r0, #1
 8005f06:	4606      	mov	r6, r0
 8005f08:	d1d6      	bne.n	8005eb8 <_svfiprintf_r+0x174>
 8005f0a:	89ab      	ldrh	r3, [r5, #12]
 8005f0c:	065b      	lsls	r3, r3, #25
 8005f0e:	f53f af2d 	bmi.w	8005d6c <_svfiprintf_r+0x28>
 8005f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f14:	e72c      	b.n	8005d70 <_svfiprintf_r+0x2c>
 8005f16:	ab03      	add	r3, sp, #12
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	462a      	mov	r2, r5
 8005f1c:	4638      	mov	r0, r7
 8005f1e:	4b06      	ldr	r3, [pc, #24]	@ (8005f38 <_svfiprintf_r+0x1f4>)
 8005f20:	a904      	add	r1, sp, #16
 8005f22:	f000 f91f 	bl	8006164 <_printf_i>
 8005f26:	e7ed      	b.n	8005f04 <_svfiprintf_r+0x1c0>
 8005f28:	08006d32 	.word	0x08006d32
 8005f2c:	08006d38 	.word	0x08006d38
 8005f30:	08006d3c 	.word	0x08006d3c
 8005f34:	00000000 	.word	0x00000000
 8005f38:	08005c8f 	.word	0x08005c8f

08005f3c <sbrk_aligned>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	4e0f      	ldr	r6, [pc, #60]	@ (8005f7c <sbrk_aligned+0x40>)
 8005f40:	460c      	mov	r4, r1
 8005f42:	6831      	ldr	r1, [r6, #0]
 8005f44:	4605      	mov	r5, r0
 8005f46:	b911      	cbnz	r1, 8005f4e <sbrk_aligned+0x12>
 8005f48:	f000 fcb8 	bl	80068bc <_sbrk_r>
 8005f4c:	6030      	str	r0, [r6, #0]
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4628      	mov	r0, r5
 8005f52:	f000 fcb3 	bl	80068bc <_sbrk_r>
 8005f56:	1c43      	adds	r3, r0, #1
 8005f58:	d103      	bne.n	8005f62 <sbrk_aligned+0x26>
 8005f5a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005f5e:	4620      	mov	r0, r4
 8005f60:	bd70      	pop	{r4, r5, r6, pc}
 8005f62:	1cc4      	adds	r4, r0, #3
 8005f64:	f024 0403 	bic.w	r4, r4, #3
 8005f68:	42a0      	cmp	r0, r4
 8005f6a:	d0f8      	beq.n	8005f5e <sbrk_aligned+0x22>
 8005f6c:	1a21      	subs	r1, r4, r0
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f000 fca4 	bl	80068bc <_sbrk_r>
 8005f74:	3001      	adds	r0, #1
 8005f76:	d1f2      	bne.n	8005f5e <sbrk_aligned+0x22>
 8005f78:	e7ef      	b.n	8005f5a <sbrk_aligned+0x1e>
 8005f7a:	bf00      	nop
 8005f7c:	20001fb4 	.word	0x20001fb4

08005f80 <_malloc_r>:
 8005f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f84:	1ccd      	adds	r5, r1, #3
 8005f86:	f025 0503 	bic.w	r5, r5, #3
 8005f8a:	3508      	adds	r5, #8
 8005f8c:	2d0c      	cmp	r5, #12
 8005f8e:	bf38      	it	cc
 8005f90:	250c      	movcc	r5, #12
 8005f92:	2d00      	cmp	r5, #0
 8005f94:	4606      	mov	r6, r0
 8005f96:	db01      	blt.n	8005f9c <_malloc_r+0x1c>
 8005f98:	42a9      	cmp	r1, r5
 8005f9a:	d904      	bls.n	8005fa6 <_malloc_r+0x26>
 8005f9c:	230c      	movs	r3, #12
 8005f9e:	6033      	str	r3, [r6, #0]
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800607c <_malloc_r+0xfc>
 8005faa:	f000 faa3 	bl	80064f4 <__malloc_lock>
 8005fae:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb2:	461c      	mov	r4, r3
 8005fb4:	bb44      	cbnz	r4, 8006008 <_malloc_r+0x88>
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f7ff ffbf 	bl	8005f3c <sbrk_aligned>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	d158      	bne.n	8006076 <_malloc_r+0xf6>
 8005fc4:	f8d8 4000 	ldr.w	r4, [r8]
 8005fc8:	4627      	mov	r7, r4
 8005fca:	2f00      	cmp	r7, #0
 8005fcc:	d143      	bne.n	8006056 <_malloc_r+0xd6>
 8005fce:	2c00      	cmp	r4, #0
 8005fd0:	d04b      	beq.n	800606a <_malloc_r+0xea>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	4639      	mov	r1, r7
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	eb04 0903 	add.w	r9, r4, r3
 8005fdc:	f000 fc6e 	bl	80068bc <_sbrk_r>
 8005fe0:	4581      	cmp	r9, r0
 8005fe2:	d142      	bne.n	800606a <_malloc_r+0xea>
 8005fe4:	6821      	ldr	r1, [r4, #0]
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	1a6d      	subs	r5, r5, r1
 8005fea:	4629      	mov	r1, r5
 8005fec:	f7ff ffa6 	bl	8005f3c <sbrk_aligned>
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d03a      	beq.n	800606a <_malloc_r+0xea>
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	442b      	add	r3, r5
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	bb62      	cbnz	r2, 800605c <_malloc_r+0xdc>
 8006002:	f8c8 7000 	str.w	r7, [r8]
 8006006:	e00f      	b.n	8006028 <_malloc_r+0xa8>
 8006008:	6822      	ldr	r2, [r4, #0]
 800600a:	1b52      	subs	r2, r2, r5
 800600c:	d420      	bmi.n	8006050 <_malloc_r+0xd0>
 800600e:	2a0b      	cmp	r2, #11
 8006010:	d917      	bls.n	8006042 <_malloc_r+0xc2>
 8006012:	1961      	adds	r1, r4, r5
 8006014:	42a3      	cmp	r3, r4
 8006016:	6025      	str	r5, [r4, #0]
 8006018:	bf18      	it	ne
 800601a:	6059      	strne	r1, [r3, #4]
 800601c:	6863      	ldr	r3, [r4, #4]
 800601e:	bf08      	it	eq
 8006020:	f8c8 1000 	streq.w	r1, [r8]
 8006024:	5162      	str	r2, [r4, r5]
 8006026:	604b      	str	r3, [r1, #4]
 8006028:	4630      	mov	r0, r6
 800602a:	f000 fa69 	bl	8006500 <__malloc_unlock>
 800602e:	f104 000b 	add.w	r0, r4, #11
 8006032:	1d23      	adds	r3, r4, #4
 8006034:	f020 0007 	bic.w	r0, r0, #7
 8006038:	1ac2      	subs	r2, r0, r3
 800603a:	bf1c      	itt	ne
 800603c:	1a1b      	subne	r3, r3, r0
 800603e:	50a3      	strne	r3, [r4, r2]
 8006040:	e7af      	b.n	8005fa2 <_malloc_r+0x22>
 8006042:	6862      	ldr	r2, [r4, #4]
 8006044:	42a3      	cmp	r3, r4
 8006046:	bf0c      	ite	eq
 8006048:	f8c8 2000 	streq.w	r2, [r8]
 800604c:	605a      	strne	r2, [r3, #4]
 800604e:	e7eb      	b.n	8006028 <_malloc_r+0xa8>
 8006050:	4623      	mov	r3, r4
 8006052:	6864      	ldr	r4, [r4, #4]
 8006054:	e7ae      	b.n	8005fb4 <_malloc_r+0x34>
 8006056:	463c      	mov	r4, r7
 8006058:	687f      	ldr	r7, [r7, #4]
 800605a:	e7b6      	b.n	8005fca <_malloc_r+0x4a>
 800605c:	461a      	mov	r2, r3
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	42a3      	cmp	r3, r4
 8006062:	d1fb      	bne.n	800605c <_malloc_r+0xdc>
 8006064:	2300      	movs	r3, #0
 8006066:	6053      	str	r3, [r2, #4]
 8006068:	e7de      	b.n	8006028 <_malloc_r+0xa8>
 800606a:	230c      	movs	r3, #12
 800606c:	4630      	mov	r0, r6
 800606e:	6033      	str	r3, [r6, #0]
 8006070:	f000 fa46 	bl	8006500 <__malloc_unlock>
 8006074:	e794      	b.n	8005fa0 <_malloc_r+0x20>
 8006076:	6005      	str	r5, [r0, #0]
 8006078:	e7d6      	b.n	8006028 <_malloc_r+0xa8>
 800607a:	bf00      	nop
 800607c:	20001fb8 	.word	0x20001fb8

08006080 <_printf_common>:
 8006080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006084:	4616      	mov	r6, r2
 8006086:	4698      	mov	r8, r3
 8006088:	688a      	ldr	r2, [r1, #8]
 800608a:	690b      	ldr	r3, [r1, #16]
 800608c:	4607      	mov	r7, r0
 800608e:	4293      	cmp	r3, r2
 8006090:	bfb8      	it	lt
 8006092:	4613      	movlt	r3, r2
 8006094:	6033      	str	r3, [r6, #0]
 8006096:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800609a:	460c      	mov	r4, r1
 800609c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060a0:	b10a      	cbz	r2, 80060a6 <_printf_common+0x26>
 80060a2:	3301      	adds	r3, #1
 80060a4:	6033      	str	r3, [r6, #0]
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	0699      	lsls	r1, r3, #26
 80060aa:	bf42      	ittt	mi
 80060ac:	6833      	ldrmi	r3, [r6, #0]
 80060ae:	3302      	addmi	r3, #2
 80060b0:	6033      	strmi	r3, [r6, #0]
 80060b2:	6825      	ldr	r5, [r4, #0]
 80060b4:	f015 0506 	ands.w	r5, r5, #6
 80060b8:	d106      	bne.n	80060c8 <_printf_common+0x48>
 80060ba:	f104 0a19 	add.w	sl, r4, #25
 80060be:	68e3      	ldr	r3, [r4, #12]
 80060c0:	6832      	ldr	r2, [r6, #0]
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	42ab      	cmp	r3, r5
 80060c6:	dc2b      	bgt.n	8006120 <_printf_common+0xa0>
 80060c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060cc:	6822      	ldr	r2, [r4, #0]
 80060ce:	3b00      	subs	r3, #0
 80060d0:	bf18      	it	ne
 80060d2:	2301      	movne	r3, #1
 80060d4:	0692      	lsls	r2, r2, #26
 80060d6:	d430      	bmi.n	800613a <_printf_common+0xba>
 80060d8:	4641      	mov	r1, r8
 80060da:	4638      	mov	r0, r7
 80060dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060e0:	47c8      	blx	r9
 80060e2:	3001      	adds	r0, #1
 80060e4:	d023      	beq.n	800612e <_printf_common+0xae>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	6922      	ldr	r2, [r4, #16]
 80060ea:	f003 0306 	and.w	r3, r3, #6
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	bf14      	ite	ne
 80060f2:	2500      	movne	r5, #0
 80060f4:	6833      	ldreq	r3, [r6, #0]
 80060f6:	f04f 0600 	mov.w	r6, #0
 80060fa:	bf08      	it	eq
 80060fc:	68e5      	ldreq	r5, [r4, #12]
 80060fe:	f104 041a 	add.w	r4, r4, #26
 8006102:	bf08      	it	eq
 8006104:	1aed      	subeq	r5, r5, r3
 8006106:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800610a:	bf08      	it	eq
 800610c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006110:	4293      	cmp	r3, r2
 8006112:	bfc4      	itt	gt
 8006114:	1a9b      	subgt	r3, r3, r2
 8006116:	18ed      	addgt	r5, r5, r3
 8006118:	42b5      	cmp	r5, r6
 800611a:	d11a      	bne.n	8006152 <_printf_common+0xd2>
 800611c:	2000      	movs	r0, #0
 800611e:	e008      	b.n	8006132 <_printf_common+0xb2>
 8006120:	2301      	movs	r3, #1
 8006122:	4652      	mov	r2, sl
 8006124:	4641      	mov	r1, r8
 8006126:	4638      	mov	r0, r7
 8006128:	47c8      	blx	r9
 800612a:	3001      	adds	r0, #1
 800612c:	d103      	bne.n	8006136 <_printf_common+0xb6>
 800612e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006136:	3501      	adds	r5, #1
 8006138:	e7c1      	b.n	80060be <_printf_common+0x3e>
 800613a:	2030      	movs	r0, #48	@ 0x30
 800613c:	18e1      	adds	r1, r4, r3
 800613e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006148:	4422      	add	r2, r4
 800614a:	3302      	adds	r3, #2
 800614c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006150:	e7c2      	b.n	80060d8 <_printf_common+0x58>
 8006152:	2301      	movs	r3, #1
 8006154:	4622      	mov	r2, r4
 8006156:	4641      	mov	r1, r8
 8006158:	4638      	mov	r0, r7
 800615a:	47c8      	blx	r9
 800615c:	3001      	adds	r0, #1
 800615e:	d0e6      	beq.n	800612e <_printf_common+0xae>
 8006160:	3601      	adds	r6, #1
 8006162:	e7d9      	b.n	8006118 <_printf_common+0x98>

08006164 <_printf_i>:
 8006164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	7e0f      	ldrb	r7, [r1, #24]
 800616a:	4691      	mov	r9, r2
 800616c:	2f78      	cmp	r7, #120	@ 0x78
 800616e:	4680      	mov	r8, r0
 8006170:	460c      	mov	r4, r1
 8006172:	469a      	mov	sl, r3
 8006174:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006176:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800617a:	d807      	bhi.n	800618c <_printf_i+0x28>
 800617c:	2f62      	cmp	r7, #98	@ 0x62
 800617e:	d80a      	bhi.n	8006196 <_printf_i+0x32>
 8006180:	2f00      	cmp	r7, #0
 8006182:	f000 80d3 	beq.w	800632c <_printf_i+0x1c8>
 8006186:	2f58      	cmp	r7, #88	@ 0x58
 8006188:	f000 80ba 	beq.w	8006300 <_printf_i+0x19c>
 800618c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006190:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006194:	e03a      	b.n	800620c <_printf_i+0xa8>
 8006196:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800619a:	2b15      	cmp	r3, #21
 800619c:	d8f6      	bhi.n	800618c <_printf_i+0x28>
 800619e:	a101      	add	r1, pc, #4	@ (adr r1, 80061a4 <_printf_i+0x40>)
 80061a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061a4:	080061fd 	.word	0x080061fd
 80061a8:	08006211 	.word	0x08006211
 80061ac:	0800618d 	.word	0x0800618d
 80061b0:	0800618d 	.word	0x0800618d
 80061b4:	0800618d 	.word	0x0800618d
 80061b8:	0800618d 	.word	0x0800618d
 80061bc:	08006211 	.word	0x08006211
 80061c0:	0800618d 	.word	0x0800618d
 80061c4:	0800618d 	.word	0x0800618d
 80061c8:	0800618d 	.word	0x0800618d
 80061cc:	0800618d 	.word	0x0800618d
 80061d0:	08006313 	.word	0x08006313
 80061d4:	0800623b 	.word	0x0800623b
 80061d8:	080062cd 	.word	0x080062cd
 80061dc:	0800618d 	.word	0x0800618d
 80061e0:	0800618d 	.word	0x0800618d
 80061e4:	08006335 	.word	0x08006335
 80061e8:	0800618d 	.word	0x0800618d
 80061ec:	0800623b 	.word	0x0800623b
 80061f0:	0800618d 	.word	0x0800618d
 80061f4:	0800618d 	.word	0x0800618d
 80061f8:	080062d5 	.word	0x080062d5
 80061fc:	6833      	ldr	r3, [r6, #0]
 80061fe:	1d1a      	adds	r2, r3, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6032      	str	r2, [r6, #0]
 8006204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006208:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800620c:	2301      	movs	r3, #1
 800620e:	e09e      	b.n	800634e <_printf_i+0x1ea>
 8006210:	6833      	ldr	r3, [r6, #0]
 8006212:	6820      	ldr	r0, [r4, #0]
 8006214:	1d19      	adds	r1, r3, #4
 8006216:	6031      	str	r1, [r6, #0]
 8006218:	0606      	lsls	r6, r0, #24
 800621a:	d501      	bpl.n	8006220 <_printf_i+0xbc>
 800621c:	681d      	ldr	r5, [r3, #0]
 800621e:	e003      	b.n	8006228 <_printf_i+0xc4>
 8006220:	0645      	lsls	r5, r0, #25
 8006222:	d5fb      	bpl.n	800621c <_printf_i+0xb8>
 8006224:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006228:	2d00      	cmp	r5, #0
 800622a:	da03      	bge.n	8006234 <_printf_i+0xd0>
 800622c:	232d      	movs	r3, #45	@ 0x2d
 800622e:	426d      	negs	r5, r5
 8006230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006234:	230a      	movs	r3, #10
 8006236:	4859      	ldr	r0, [pc, #356]	@ (800639c <_printf_i+0x238>)
 8006238:	e011      	b.n	800625e <_printf_i+0xfa>
 800623a:	6821      	ldr	r1, [r4, #0]
 800623c:	6833      	ldr	r3, [r6, #0]
 800623e:	0608      	lsls	r0, r1, #24
 8006240:	f853 5b04 	ldr.w	r5, [r3], #4
 8006244:	d402      	bmi.n	800624c <_printf_i+0xe8>
 8006246:	0649      	lsls	r1, r1, #25
 8006248:	bf48      	it	mi
 800624a:	b2ad      	uxthmi	r5, r5
 800624c:	2f6f      	cmp	r7, #111	@ 0x6f
 800624e:	6033      	str	r3, [r6, #0]
 8006250:	bf14      	ite	ne
 8006252:	230a      	movne	r3, #10
 8006254:	2308      	moveq	r3, #8
 8006256:	4851      	ldr	r0, [pc, #324]	@ (800639c <_printf_i+0x238>)
 8006258:	2100      	movs	r1, #0
 800625a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800625e:	6866      	ldr	r6, [r4, #4]
 8006260:	2e00      	cmp	r6, #0
 8006262:	bfa8      	it	ge
 8006264:	6821      	ldrge	r1, [r4, #0]
 8006266:	60a6      	str	r6, [r4, #8]
 8006268:	bfa4      	itt	ge
 800626a:	f021 0104 	bicge.w	r1, r1, #4
 800626e:	6021      	strge	r1, [r4, #0]
 8006270:	b90d      	cbnz	r5, 8006276 <_printf_i+0x112>
 8006272:	2e00      	cmp	r6, #0
 8006274:	d04b      	beq.n	800630e <_printf_i+0x1aa>
 8006276:	4616      	mov	r6, r2
 8006278:	fbb5 f1f3 	udiv	r1, r5, r3
 800627c:	fb03 5711 	mls	r7, r3, r1, r5
 8006280:	5dc7      	ldrb	r7, [r0, r7]
 8006282:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006286:	462f      	mov	r7, r5
 8006288:	42bb      	cmp	r3, r7
 800628a:	460d      	mov	r5, r1
 800628c:	d9f4      	bls.n	8006278 <_printf_i+0x114>
 800628e:	2b08      	cmp	r3, #8
 8006290:	d10b      	bne.n	80062aa <_printf_i+0x146>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	07df      	lsls	r7, r3, #31
 8006296:	d508      	bpl.n	80062aa <_printf_i+0x146>
 8006298:	6923      	ldr	r3, [r4, #16]
 800629a:	6861      	ldr	r1, [r4, #4]
 800629c:	4299      	cmp	r1, r3
 800629e:	bfde      	ittt	le
 80062a0:	2330      	movle	r3, #48	@ 0x30
 80062a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062a6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80062aa:	1b92      	subs	r2, r2, r6
 80062ac:	6122      	str	r2, [r4, #16]
 80062ae:	464b      	mov	r3, r9
 80062b0:	4621      	mov	r1, r4
 80062b2:	4640      	mov	r0, r8
 80062b4:	f8cd a000 	str.w	sl, [sp]
 80062b8:	aa03      	add	r2, sp, #12
 80062ba:	f7ff fee1 	bl	8006080 <_printf_common>
 80062be:	3001      	adds	r0, #1
 80062c0:	d14a      	bne.n	8006358 <_printf_i+0x1f4>
 80062c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062c6:	b004      	add	sp, #16
 80062c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	f043 0320 	orr.w	r3, r3, #32
 80062d2:	6023      	str	r3, [r4, #0]
 80062d4:	2778      	movs	r7, #120	@ 0x78
 80062d6:	4832      	ldr	r0, [pc, #200]	@ (80063a0 <_printf_i+0x23c>)
 80062d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	6831      	ldr	r1, [r6, #0]
 80062e0:	061f      	lsls	r7, r3, #24
 80062e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80062e6:	d402      	bmi.n	80062ee <_printf_i+0x18a>
 80062e8:	065f      	lsls	r7, r3, #25
 80062ea:	bf48      	it	mi
 80062ec:	b2ad      	uxthmi	r5, r5
 80062ee:	6031      	str	r1, [r6, #0]
 80062f0:	07d9      	lsls	r1, r3, #31
 80062f2:	bf44      	itt	mi
 80062f4:	f043 0320 	orrmi.w	r3, r3, #32
 80062f8:	6023      	strmi	r3, [r4, #0]
 80062fa:	b11d      	cbz	r5, 8006304 <_printf_i+0x1a0>
 80062fc:	2310      	movs	r3, #16
 80062fe:	e7ab      	b.n	8006258 <_printf_i+0xf4>
 8006300:	4826      	ldr	r0, [pc, #152]	@ (800639c <_printf_i+0x238>)
 8006302:	e7e9      	b.n	80062d8 <_printf_i+0x174>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	f023 0320 	bic.w	r3, r3, #32
 800630a:	6023      	str	r3, [r4, #0]
 800630c:	e7f6      	b.n	80062fc <_printf_i+0x198>
 800630e:	4616      	mov	r6, r2
 8006310:	e7bd      	b.n	800628e <_printf_i+0x12a>
 8006312:	6833      	ldr	r3, [r6, #0]
 8006314:	6825      	ldr	r5, [r4, #0]
 8006316:	1d18      	adds	r0, r3, #4
 8006318:	6961      	ldr	r1, [r4, #20]
 800631a:	6030      	str	r0, [r6, #0]
 800631c:	062e      	lsls	r6, r5, #24
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	d501      	bpl.n	8006326 <_printf_i+0x1c2>
 8006322:	6019      	str	r1, [r3, #0]
 8006324:	e002      	b.n	800632c <_printf_i+0x1c8>
 8006326:	0668      	lsls	r0, r5, #25
 8006328:	d5fb      	bpl.n	8006322 <_printf_i+0x1be>
 800632a:	8019      	strh	r1, [r3, #0]
 800632c:	2300      	movs	r3, #0
 800632e:	4616      	mov	r6, r2
 8006330:	6123      	str	r3, [r4, #16]
 8006332:	e7bc      	b.n	80062ae <_printf_i+0x14a>
 8006334:	6833      	ldr	r3, [r6, #0]
 8006336:	2100      	movs	r1, #0
 8006338:	1d1a      	adds	r2, r3, #4
 800633a:	6032      	str	r2, [r6, #0]
 800633c:	681e      	ldr	r6, [r3, #0]
 800633e:	6862      	ldr	r2, [r4, #4]
 8006340:	4630      	mov	r0, r6
 8006342:	f000 fadd 	bl	8006900 <memchr>
 8006346:	b108      	cbz	r0, 800634c <_printf_i+0x1e8>
 8006348:	1b80      	subs	r0, r0, r6
 800634a:	6060      	str	r0, [r4, #4]
 800634c:	6863      	ldr	r3, [r4, #4]
 800634e:	6123      	str	r3, [r4, #16]
 8006350:	2300      	movs	r3, #0
 8006352:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006356:	e7aa      	b.n	80062ae <_printf_i+0x14a>
 8006358:	4632      	mov	r2, r6
 800635a:	4649      	mov	r1, r9
 800635c:	4640      	mov	r0, r8
 800635e:	6923      	ldr	r3, [r4, #16]
 8006360:	47d0      	blx	sl
 8006362:	3001      	adds	r0, #1
 8006364:	d0ad      	beq.n	80062c2 <_printf_i+0x15e>
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	079b      	lsls	r3, r3, #30
 800636a:	d413      	bmi.n	8006394 <_printf_i+0x230>
 800636c:	68e0      	ldr	r0, [r4, #12]
 800636e:	9b03      	ldr	r3, [sp, #12]
 8006370:	4298      	cmp	r0, r3
 8006372:	bfb8      	it	lt
 8006374:	4618      	movlt	r0, r3
 8006376:	e7a6      	b.n	80062c6 <_printf_i+0x162>
 8006378:	2301      	movs	r3, #1
 800637a:	4632      	mov	r2, r6
 800637c:	4649      	mov	r1, r9
 800637e:	4640      	mov	r0, r8
 8006380:	47d0      	blx	sl
 8006382:	3001      	adds	r0, #1
 8006384:	d09d      	beq.n	80062c2 <_printf_i+0x15e>
 8006386:	3501      	adds	r5, #1
 8006388:	68e3      	ldr	r3, [r4, #12]
 800638a:	9903      	ldr	r1, [sp, #12]
 800638c:	1a5b      	subs	r3, r3, r1
 800638e:	42ab      	cmp	r3, r5
 8006390:	dcf2      	bgt.n	8006378 <_printf_i+0x214>
 8006392:	e7eb      	b.n	800636c <_printf_i+0x208>
 8006394:	2500      	movs	r5, #0
 8006396:	f104 0619 	add.w	r6, r4, #25
 800639a:	e7f5      	b.n	8006388 <_printf_i+0x224>
 800639c:	08006d43 	.word	0x08006d43
 80063a0:	08006d54 	.word	0x08006d54

080063a4 <__sflush_r>:
 80063a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063aa:	0716      	lsls	r6, r2, #28
 80063ac:	4605      	mov	r5, r0
 80063ae:	460c      	mov	r4, r1
 80063b0:	d454      	bmi.n	800645c <__sflush_r+0xb8>
 80063b2:	684b      	ldr	r3, [r1, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	dc02      	bgt.n	80063be <__sflush_r+0x1a>
 80063b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	dd48      	ble.n	8006450 <__sflush_r+0xac>
 80063be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063c0:	2e00      	cmp	r6, #0
 80063c2:	d045      	beq.n	8006450 <__sflush_r+0xac>
 80063c4:	2300      	movs	r3, #0
 80063c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80063ca:	682f      	ldr	r7, [r5, #0]
 80063cc:	6a21      	ldr	r1, [r4, #32]
 80063ce:	602b      	str	r3, [r5, #0]
 80063d0:	d030      	beq.n	8006434 <__sflush_r+0x90>
 80063d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	0759      	lsls	r1, r3, #29
 80063d8:	d505      	bpl.n	80063e6 <__sflush_r+0x42>
 80063da:	6863      	ldr	r3, [r4, #4]
 80063dc:	1ad2      	subs	r2, r2, r3
 80063de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80063e0:	b10b      	cbz	r3, 80063e6 <__sflush_r+0x42>
 80063e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80063e4:	1ad2      	subs	r2, r2, r3
 80063e6:	2300      	movs	r3, #0
 80063e8:	4628      	mov	r0, r5
 80063ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063ec:	6a21      	ldr	r1, [r4, #32]
 80063ee:	47b0      	blx	r6
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	89a3      	ldrh	r3, [r4, #12]
 80063f4:	d106      	bne.n	8006404 <__sflush_r+0x60>
 80063f6:	6829      	ldr	r1, [r5, #0]
 80063f8:	291d      	cmp	r1, #29
 80063fa:	d82b      	bhi.n	8006454 <__sflush_r+0xb0>
 80063fc:	4a28      	ldr	r2, [pc, #160]	@ (80064a0 <__sflush_r+0xfc>)
 80063fe:	410a      	asrs	r2, r1
 8006400:	07d6      	lsls	r6, r2, #31
 8006402:	d427      	bmi.n	8006454 <__sflush_r+0xb0>
 8006404:	2200      	movs	r2, #0
 8006406:	6062      	str	r2, [r4, #4]
 8006408:	6922      	ldr	r2, [r4, #16]
 800640a:	04d9      	lsls	r1, r3, #19
 800640c:	6022      	str	r2, [r4, #0]
 800640e:	d504      	bpl.n	800641a <__sflush_r+0x76>
 8006410:	1c42      	adds	r2, r0, #1
 8006412:	d101      	bne.n	8006418 <__sflush_r+0x74>
 8006414:	682b      	ldr	r3, [r5, #0]
 8006416:	b903      	cbnz	r3, 800641a <__sflush_r+0x76>
 8006418:	6560      	str	r0, [r4, #84]	@ 0x54
 800641a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800641c:	602f      	str	r7, [r5, #0]
 800641e:	b1b9      	cbz	r1, 8006450 <__sflush_r+0xac>
 8006420:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006424:	4299      	cmp	r1, r3
 8006426:	d002      	beq.n	800642e <__sflush_r+0x8a>
 8006428:	4628      	mov	r0, r5
 800642a:	f000 fa77 	bl	800691c <_free_r>
 800642e:	2300      	movs	r3, #0
 8006430:	6363      	str	r3, [r4, #52]	@ 0x34
 8006432:	e00d      	b.n	8006450 <__sflush_r+0xac>
 8006434:	2301      	movs	r3, #1
 8006436:	4628      	mov	r0, r5
 8006438:	47b0      	blx	r6
 800643a:	4602      	mov	r2, r0
 800643c:	1c50      	adds	r0, r2, #1
 800643e:	d1c9      	bne.n	80063d4 <__sflush_r+0x30>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0c6      	beq.n	80063d4 <__sflush_r+0x30>
 8006446:	2b1d      	cmp	r3, #29
 8006448:	d001      	beq.n	800644e <__sflush_r+0xaa>
 800644a:	2b16      	cmp	r3, #22
 800644c:	d11d      	bne.n	800648a <__sflush_r+0xe6>
 800644e:	602f      	str	r7, [r5, #0]
 8006450:	2000      	movs	r0, #0
 8006452:	e021      	b.n	8006498 <__sflush_r+0xf4>
 8006454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006458:	b21b      	sxth	r3, r3
 800645a:	e01a      	b.n	8006492 <__sflush_r+0xee>
 800645c:	690f      	ldr	r7, [r1, #16]
 800645e:	2f00      	cmp	r7, #0
 8006460:	d0f6      	beq.n	8006450 <__sflush_r+0xac>
 8006462:	0793      	lsls	r3, r2, #30
 8006464:	bf18      	it	ne
 8006466:	2300      	movne	r3, #0
 8006468:	680e      	ldr	r6, [r1, #0]
 800646a:	bf08      	it	eq
 800646c:	694b      	ldreq	r3, [r1, #20]
 800646e:	1bf6      	subs	r6, r6, r7
 8006470:	600f      	str	r7, [r1, #0]
 8006472:	608b      	str	r3, [r1, #8]
 8006474:	2e00      	cmp	r6, #0
 8006476:	ddeb      	ble.n	8006450 <__sflush_r+0xac>
 8006478:	4633      	mov	r3, r6
 800647a:	463a      	mov	r2, r7
 800647c:	4628      	mov	r0, r5
 800647e:	6a21      	ldr	r1, [r4, #32]
 8006480:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006484:	47e0      	blx	ip
 8006486:	2800      	cmp	r0, #0
 8006488:	dc07      	bgt.n	800649a <__sflush_r+0xf6>
 800648a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800648e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006492:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006496:	81a3      	strh	r3, [r4, #12]
 8006498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800649a:	4407      	add	r7, r0
 800649c:	1a36      	subs	r6, r6, r0
 800649e:	e7e9      	b.n	8006474 <__sflush_r+0xd0>
 80064a0:	dfbffffe 	.word	0xdfbffffe

080064a4 <_fflush_r>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	690b      	ldr	r3, [r1, #16]
 80064a8:	4605      	mov	r5, r0
 80064aa:	460c      	mov	r4, r1
 80064ac:	b913      	cbnz	r3, 80064b4 <_fflush_r+0x10>
 80064ae:	2500      	movs	r5, #0
 80064b0:	4628      	mov	r0, r5
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	b118      	cbz	r0, 80064be <_fflush_r+0x1a>
 80064b6:	6a03      	ldr	r3, [r0, #32]
 80064b8:	b90b      	cbnz	r3, 80064be <_fflush_r+0x1a>
 80064ba:	f7ff fafb 	bl	8005ab4 <__sinit>
 80064be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0f3      	beq.n	80064ae <_fflush_r+0xa>
 80064c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80064c8:	07d0      	lsls	r0, r2, #31
 80064ca:	d404      	bmi.n	80064d6 <_fflush_r+0x32>
 80064cc:	0599      	lsls	r1, r3, #22
 80064ce:	d402      	bmi.n	80064d6 <_fflush_r+0x32>
 80064d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064d2:	f7ff fbcc 	bl	8005c6e <__retarget_lock_acquire_recursive>
 80064d6:	4628      	mov	r0, r5
 80064d8:	4621      	mov	r1, r4
 80064da:	f7ff ff63 	bl	80063a4 <__sflush_r>
 80064de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064e0:	4605      	mov	r5, r0
 80064e2:	07da      	lsls	r2, r3, #31
 80064e4:	d4e4      	bmi.n	80064b0 <_fflush_r+0xc>
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	059b      	lsls	r3, r3, #22
 80064ea:	d4e1      	bmi.n	80064b0 <_fflush_r+0xc>
 80064ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064ee:	f7ff fbbf 	bl	8005c70 <__retarget_lock_release_recursive>
 80064f2:	e7dd      	b.n	80064b0 <_fflush_r+0xc>

080064f4 <__malloc_lock>:
 80064f4:	4801      	ldr	r0, [pc, #4]	@ (80064fc <__malloc_lock+0x8>)
 80064f6:	f7ff bbba 	b.w	8005c6e <__retarget_lock_acquire_recursive>
 80064fa:	bf00      	nop
 80064fc:	20001fb0 	.word	0x20001fb0

08006500 <__malloc_unlock>:
 8006500:	4801      	ldr	r0, [pc, #4]	@ (8006508 <__malloc_unlock+0x8>)
 8006502:	f7ff bbb5 	b.w	8005c70 <__retarget_lock_release_recursive>
 8006506:	bf00      	nop
 8006508:	20001fb0 	.word	0x20001fb0

0800650c <__sread>:
 800650c:	b510      	push	{r4, lr}
 800650e:	460c      	mov	r4, r1
 8006510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006514:	f000 f9c0 	bl	8006898 <_read_r>
 8006518:	2800      	cmp	r0, #0
 800651a:	bfab      	itete	ge
 800651c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800651e:	89a3      	ldrhlt	r3, [r4, #12]
 8006520:	181b      	addge	r3, r3, r0
 8006522:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006526:	bfac      	ite	ge
 8006528:	6563      	strge	r3, [r4, #84]	@ 0x54
 800652a:	81a3      	strhlt	r3, [r4, #12]
 800652c:	bd10      	pop	{r4, pc}

0800652e <__swrite>:
 800652e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006532:	461f      	mov	r7, r3
 8006534:	898b      	ldrh	r3, [r1, #12]
 8006536:	4605      	mov	r5, r0
 8006538:	05db      	lsls	r3, r3, #23
 800653a:	460c      	mov	r4, r1
 800653c:	4616      	mov	r6, r2
 800653e:	d505      	bpl.n	800654c <__swrite+0x1e>
 8006540:	2302      	movs	r3, #2
 8006542:	2200      	movs	r2, #0
 8006544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006548:	f000 f994 	bl	8006874 <_lseek_r>
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	4632      	mov	r2, r6
 8006550:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006554:	81a3      	strh	r3, [r4, #12]
 8006556:	4628      	mov	r0, r5
 8006558:	463b      	mov	r3, r7
 800655a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800655e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006562:	f000 b9bb 	b.w	80068dc <_write_r>

08006566 <__sseek>:
 8006566:	b510      	push	{r4, lr}
 8006568:	460c      	mov	r4, r1
 800656a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656e:	f000 f981 	bl	8006874 <_lseek_r>
 8006572:	1c43      	adds	r3, r0, #1
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	bf15      	itete	ne
 8006578:	6560      	strne	r0, [r4, #84]	@ 0x54
 800657a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800657e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006582:	81a3      	strheq	r3, [r4, #12]
 8006584:	bf18      	it	ne
 8006586:	81a3      	strhne	r3, [r4, #12]
 8006588:	bd10      	pop	{r4, pc}

0800658a <__sclose>:
 800658a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800658e:	f000 b93f 	b.w	8006810 <_close_r>

08006592 <_realloc_r>:
 8006592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006596:	4680      	mov	r8, r0
 8006598:	4615      	mov	r5, r2
 800659a:	460c      	mov	r4, r1
 800659c:	b921      	cbnz	r1, 80065a8 <_realloc_r+0x16>
 800659e:	4611      	mov	r1, r2
 80065a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065a4:	f7ff bcec 	b.w	8005f80 <_malloc_r>
 80065a8:	b92a      	cbnz	r2, 80065b6 <_realloc_r+0x24>
 80065aa:	f000 f9b7 	bl	800691c <_free_r>
 80065ae:	2400      	movs	r4, #0
 80065b0:	4620      	mov	r0, r4
 80065b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b6:	f000 f9f9 	bl	80069ac <_malloc_usable_size_r>
 80065ba:	4285      	cmp	r5, r0
 80065bc:	4606      	mov	r6, r0
 80065be:	d802      	bhi.n	80065c6 <_realloc_r+0x34>
 80065c0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80065c4:	d8f4      	bhi.n	80065b0 <_realloc_r+0x1e>
 80065c6:	4629      	mov	r1, r5
 80065c8:	4640      	mov	r0, r8
 80065ca:	f7ff fcd9 	bl	8005f80 <_malloc_r>
 80065ce:	4607      	mov	r7, r0
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d0ec      	beq.n	80065ae <_realloc_r+0x1c>
 80065d4:	42b5      	cmp	r5, r6
 80065d6:	462a      	mov	r2, r5
 80065d8:	4621      	mov	r1, r4
 80065da:	bf28      	it	cs
 80065dc:	4632      	movcs	r2, r6
 80065de:	f7ff fb48 	bl	8005c72 <memcpy>
 80065e2:	4621      	mov	r1, r4
 80065e4:	4640      	mov	r0, r8
 80065e6:	f000 f999 	bl	800691c <_free_r>
 80065ea:	463c      	mov	r4, r7
 80065ec:	e7e0      	b.n	80065b0 <_realloc_r+0x1e>

080065ee <__swbuf_r>:
 80065ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f0:	460e      	mov	r6, r1
 80065f2:	4614      	mov	r4, r2
 80065f4:	4605      	mov	r5, r0
 80065f6:	b118      	cbz	r0, 8006600 <__swbuf_r+0x12>
 80065f8:	6a03      	ldr	r3, [r0, #32]
 80065fa:	b90b      	cbnz	r3, 8006600 <__swbuf_r+0x12>
 80065fc:	f7ff fa5a 	bl	8005ab4 <__sinit>
 8006600:	69a3      	ldr	r3, [r4, #24]
 8006602:	60a3      	str	r3, [r4, #8]
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	071a      	lsls	r2, r3, #28
 8006608:	d501      	bpl.n	800660e <__swbuf_r+0x20>
 800660a:	6923      	ldr	r3, [r4, #16]
 800660c:	b943      	cbnz	r3, 8006620 <__swbuf_r+0x32>
 800660e:	4621      	mov	r1, r4
 8006610:	4628      	mov	r0, r5
 8006612:	f000 f82b 	bl	800666c <__swsetup_r>
 8006616:	b118      	cbz	r0, 8006620 <__swbuf_r+0x32>
 8006618:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800661c:	4638      	mov	r0, r7
 800661e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	6922      	ldr	r2, [r4, #16]
 8006624:	b2f6      	uxtb	r6, r6
 8006626:	1a98      	subs	r0, r3, r2
 8006628:	6963      	ldr	r3, [r4, #20]
 800662a:	4637      	mov	r7, r6
 800662c:	4283      	cmp	r3, r0
 800662e:	dc05      	bgt.n	800663c <__swbuf_r+0x4e>
 8006630:	4621      	mov	r1, r4
 8006632:	4628      	mov	r0, r5
 8006634:	f7ff ff36 	bl	80064a4 <_fflush_r>
 8006638:	2800      	cmp	r0, #0
 800663a:	d1ed      	bne.n	8006618 <__swbuf_r+0x2a>
 800663c:	68a3      	ldr	r3, [r4, #8]
 800663e:	3b01      	subs	r3, #1
 8006640:	60a3      	str	r3, [r4, #8]
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	6022      	str	r2, [r4, #0]
 8006648:	701e      	strb	r6, [r3, #0]
 800664a:	6962      	ldr	r2, [r4, #20]
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	429a      	cmp	r2, r3
 8006650:	d004      	beq.n	800665c <__swbuf_r+0x6e>
 8006652:	89a3      	ldrh	r3, [r4, #12]
 8006654:	07db      	lsls	r3, r3, #31
 8006656:	d5e1      	bpl.n	800661c <__swbuf_r+0x2e>
 8006658:	2e0a      	cmp	r6, #10
 800665a:	d1df      	bne.n	800661c <__swbuf_r+0x2e>
 800665c:	4621      	mov	r1, r4
 800665e:	4628      	mov	r0, r5
 8006660:	f7ff ff20 	bl	80064a4 <_fflush_r>
 8006664:	2800      	cmp	r0, #0
 8006666:	d0d9      	beq.n	800661c <__swbuf_r+0x2e>
 8006668:	e7d6      	b.n	8006618 <__swbuf_r+0x2a>
	...

0800666c <__swsetup_r>:
 800666c:	b538      	push	{r3, r4, r5, lr}
 800666e:	4b29      	ldr	r3, [pc, #164]	@ (8006714 <__swsetup_r+0xa8>)
 8006670:	4605      	mov	r5, r0
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	460c      	mov	r4, r1
 8006676:	b118      	cbz	r0, 8006680 <__swsetup_r+0x14>
 8006678:	6a03      	ldr	r3, [r0, #32]
 800667a:	b90b      	cbnz	r3, 8006680 <__swsetup_r+0x14>
 800667c:	f7ff fa1a 	bl	8005ab4 <__sinit>
 8006680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006684:	0719      	lsls	r1, r3, #28
 8006686:	d422      	bmi.n	80066ce <__swsetup_r+0x62>
 8006688:	06da      	lsls	r2, r3, #27
 800668a:	d407      	bmi.n	800669c <__swsetup_r+0x30>
 800668c:	2209      	movs	r2, #9
 800668e:	602a      	str	r2, [r5, #0]
 8006690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006694:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006698:	81a3      	strh	r3, [r4, #12]
 800669a:	e033      	b.n	8006704 <__swsetup_r+0x98>
 800669c:	0758      	lsls	r0, r3, #29
 800669e:	d512      	bpl.n	80066c6 <__swsetup_r+0x5a>
 80066a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066a2:	b141      	cbz	r1, 80066b6 <__swsetup_r+0x4a>
 80066a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066a8:	4299      	cmp	r1, r3
 80066aa:	d002      	beq.n	80066b2 <__swsetup_r+0x46>
 80066ac:	4628      	mov	r0, r5
 80066ae:	f000 f935 	bl	800691c <_free_r>
 80066b2:	2300      	movs	r3, #0
 80066b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80066bc:	81a3      	strh	r3, [r4, #12]
 80066be:	2300      	movs	r3, #0
 80066c0:	6063      	str	r3, [r4, #4]
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	f043 0308 	orr.w	r3, r3, #8
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	6923      	ldr	r3, [r4, #16]
 80066d0:	b94b      	cbnz	r3, 80066e6 <__swsetup_r+0x7a>
 80066d2:	89a3      	ldrh	r3, [r4, #12]
 80066d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80066d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066dc:	d003      	beq.n	80066e6 <__swsetup_r+0x7a>
 80066de:	4621      	mov	r1, r4
 80066e0:	4628      	mov	r0, r5
 80066e2:	f000 f83e 	bl	8006762 <__smakebuf_r>
 80066e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ea:	f013 0201 	ands.w	r2, r3, #1
 80066ee:	d00a      	beq.n	8006706 <__swsetup_r+0x9a>
 80066f0:	2200      	movs	r2, #0
 80066f2:	60a2      	str	r2, [r4, #8]
 80066f4:	6962      	ldr	r2, [r4, #20]
 80066f6:	4252      	negs	r2, r2
 80066f8:	61a2      	str	r2, [r4, #24]
 80066fa:	6922      	ldr	r2, [r4, #16]
 80066fc:	b942      	cbnz	r2, 8006710 <__swsetup_r+0xa4>
 80066fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006702:	d1c5      	bne.n	8006690 <__swsetup_r+0x24>
 8006704:	bd38      	pop	{r3, r4, r5, pc}
 8006706:	0799      	lsls	r1, r3, #30
 8006708:	bf58      	it	pl
 800670a:	6962      	ldrpl	r2, [r4, #20]
 800670c:	60a2      	str	r2, [r4, #8]
 800670e:	e7f4      	b.n	80066fa <__swsetup_r+0x8e>
 8006710:	2000      	movs	r0, #0
 8006712:	e7f7      	b.n	8006704 <__swsetup_r+0x98>
 8006714:	2000001c 	.word	0x2000001c

08006718 <__swhatbuf_r>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	460c      	mov	r4, r1
 800671c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006720:	4615      	mov	r5, r2
 8006722:	2900      	cmp	r1, #0
 8006724:	461e      	mov	r6, r3
 8006726:	b096      	sub	sp, #88	@ 0x58
 8006728:	da0c      	bge.n	8006744 <__swhatbuf_r+0x2c>
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	2100      	movs	r1, #0
 800672e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006732:	bf14      	ite	ne
 8006734:	2340      	movne	r3, #64	@ 0x40
 8006736:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800673a:	2000      	movs	r0, #0
 800673c:	6031      	str	r1, [r6, #0]
 800673e:	602b      	str	r3, [r5, #0]
 8006740:	b016      	add	sp, #88	@ 0x58
 8006742:	bd70      	pop	{r4, r5, r6, pc}
 8006744:	466a      	mov	r2, sp
 8006746:	f000 f873 	bl	8006830 <_fstat_r>
 800674a:	2800      	cmp	r0, #0
 800674c:	dbed      	blt.n	800672a <__swhatbuf_r+0x12>
 800674e:	9901      	ldr	r1, [sp, #4]
 8006750:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006754:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006758:	4259      	negs	r1, r3
 800675a:	4159      	adcs	r1, r3
 800675c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006760:	e7eb      	b.n	800673a <__swhatbuf_r+0x22>

08006762 <__smakebuf_r>:
 8006762:	898b      	ldrh	r3, [r1, #12]
 8006764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006766:	079d      	lsls	r5, r3, #30
 8006768:	4606      	mov	r6, r0
 800676a:	460c      	mov	r4, r1
 800676c:	d507      	bpl.n	800677e <__smakebuf_r+0x1c>
 800676e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006772:	6023      	str	r3, [r4, #0]
 8006774:	6123      	str	r3, [r4, #16]
 8006776:	2301      	movs	r3, #1
 8006778:	6163      	str	r3, [r4, #20]
 800677a:	b003      	add	sp, #12
 800677c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800677e:	466a      	mov	r2, sp
 8006780:	ab01      	add	r3, sp, #4
 8006782:	f7ff ffc9 	bl	8006718 <__swhatbuf_r>
 8006786:	9f00      	ldr	r7, [sp, #0]
 8006788:	4605      	mov	r5, r0
 800678a:	4639      	mov	r1, r7
 800678c:	4630      	mov	r0, r6
 800678e:	f7ff fbf7 	bl	8005f80 <_malloc_r>
 8006792:	b948      	cbnz	r0, 80067a8 <__smakebuf_r+0x46>
 8006794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006798:	059a      	lsls	r2, r3, #22
 800679a:	d4ee      	bmi.n	800677a <__smakebuf_r+0x18>
 800679c:	f023 0303 	bic.w	r3, r3, #3
 80067a0:	f043 0302 	orr.w	r3, r3, #2
 80067a4:	81a3      	strh	r3, [r4, #12]
 80067a6:	e7e2      	b.n	800676e <__smakebuf_r+0xc>
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80067ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b2:	81a3      	strh	r3, [r4, #12]
 80067b4:	9b01      	ldr	r3, [sp, #4]
 80067b6:	6020      	str	r0, [r4, #0]
 80067b8:	b15b      	cbz	r3, 80067d2 <__smakebuf_r+0x70>
 80067ba:	4630      	mov	r0, r6
 80067bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067c0:	f000 f848 	bl	8006854 <_isatty_r>
 80067c4:	b128      	cbz	r0, 80067d2 <__smakebuf_r+0x70>
 80067c6:	89a3      	ldrh	r3, [r4, #12]
 80067c8:	f023 0303 	bic.w	r3, r3, #3
 80067cc:	f043 0301 	orr.w	r3, r3, #1
 80067d0:	81a3      	strh	r3, [r4, #12]
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	431d      	orrs	r5, r3
 80067d6:	81a5      	strh	r5, [r4, #12]
 80067d8:	e7cf      	b.n	800677a <__smakebuf_r+0x18>

080067da <memmove>:
 80067da:	4288      	cmp	r0, r1
 80067dc:	b510      	push	{r4, lr}
 80067de:	eb01 0402 	add.w	r4, r1, r2
 80067e2:	d902      	bls.n	80067ea <memmove+0x10>
 80067e4:	4284      	cmp	r4, r0
 80067e6:	4623      	mov	r3, r4
 80067e8:	d807      	bhi.n	80067fa <memmove+0x20>
 80067ea:	1e43      	subs	r3, r0, #1
 80067ec:	42a1      	cmp	r1, r4
 80067ee:	d008      	beq.n	8006802 <memmove+0x28>
 80067f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067f8:	e7f8      	b.n	80067ec <memmove+0x12>
 80067fa:	4601      	mov	r1, r0
 80067fc:	4402      	add	r2, r0
 80067fe:	428a      	cmp	r2, r1
 8006800:	d100      	bne.n	8006804 <memmove+0x2a>
 8006802:	bd10      	pop	{r4, pc}
 8006804:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006808:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800680c:	e7f7      	b.n	80067fe <memmove+0x24>
	...

08006810 <_close_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	2300      	movs	r3, #0
 8006814:	4d05      	ldr	r5, [pc, #20]	@ (800682c <_close_r+0x1c>)
 8006816:	4604      	mov	r4, r0
 8006818:	4608      	mov	r0, r1
 800681a:	602b      	str	r3, [r5, #0]
 800681c:	f7fa f8a3 	bl	8000966 <_close>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_close_r+0x1a>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	b103      	cbz	r3, 800682a <_close_r+0x1a>
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	20001fbc 	.word	0x20001fbc

08006830 <_fstat_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	2300      	movs	r3, #0
 8006834:	4d06      	ldr	r5, [pc, #24]	@ (8006850 <_fstat_r+0x20>)
 8006836:	4604      	mov	r4, r0
 8006838:	4608      	mov	r0, r1
 800683a:	4611      	mov	r1, r2
 800683c:	602b      	str	r3, [r5, #0]
 800683e:	f7fa f89d 	bl	800097c <_fstat>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	d102      	bne.n	800684c <_fstat_r+0x1c>
 8006846:	682b      	ldr	r3, [r5, #0]
 8006848:	b103      	cbz	r3, 800684c <_fstat_r+0x1c>
 800684a:	6023      	str	r3, [r4, #0]
 800684c:	bd38      	pop	{r3, r4, r5, pc}
 800684e:	bf00      	nop
 8006850:	20001fbc 	.word	0x20001fbc

08006854 <_isatty_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	2300      	movs	r3, #0
 8006858:	4d05      	ldr	r5, [pc, #20]	@ (8006870 <_isatty_r+0x1c>)
 800685a:	4604      	mov	r4, r0
 800685c:	4608      	mov	r0, r1
 800685e:	602b      	str	r3, [r5, #0]
 8006860:	f7fa f89b 	bl	800099a <_isatty>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	d102      	bne.n	800686e <_isatty_r+0x1a>
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	b103      	cbz	r3, 800686e <_isatty_r+0x1a>
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	bd38      	pop	{r3, r4, r5, pc}
 8006870:	20001fbc 	.word	0x20001fbc

08006874 <_lseek_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4604      	mov	r4, r0
 8006878:	4608      	mov	r0, r1
 800687a:	4611      	mov	r1, r2
 800687c:	2200      	movs	r2, #0
 800687e:	4d05      	ldr	r5, [pc, #20]	@ (8006894 <_lseek_r+0x20>)
 8006880:	602a      	str	r2, [r5, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	f7fa f893 	bl	80009ae <_lseek>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_lseek_r+0x1e>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	b103      	cbz	r3, 8006892 <_lseek_r+0x1e>
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	20001fbc 	.word	0x20001fbc

08006898 <_read_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4604      	mov	r4, r0
 800689c:	4608      	mov	r0, r1
 800689e:	4611      	mov	r1, r2
 80068a0:	2200      	movs	r2, #0
 80068a2:	4d05      	ldr	r5, [pc, #20]	@ (80068b8 <_read_r+0x20>)
 80068a4:	602a      	str	r2, [r5, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	f7fa f824 	bl	80008f4 <_read>
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	d102      	bne.n	80068b6 <_read_r+0x1e>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	b103      	cbz	r3, 80068b6 <_read_r+0x1e>
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	20001fbc 	.word	0x20001fbc

080068bc <_sbrk_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	2300      	movs	r3, #0
 80068c0:	4d05      	ldr	r5, [pc, #20]	@ (80068d8 <_sbrk_r+0x1c>)
 80068c2:	4604      	mov	r4, r0
 80068c4:	4608      	mov	r0, r1
 80068c6:	602b      	str	r3, [r5, #0]
 80068c8:	f7fa f87e 	bl	80009c8 <_sbrk>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_sbrk_r+0x1a>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_sbrk_r+0x1a>
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	20001fbc 	.word	0x20001fbc

080068dc <_write_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4604      	mov	r4, r0
 80068e0:	4608      	mov	r0, r1
 80068e2:	4611      	mov	r1, r2
 80068e4:	2200      	movs	r2, #0
 80068e6:	4d05      	ldr	r5, [pc, #20]	@ (80068fc <_write_r+0x20>)
 80068e8:	602a      	str	r2, [r5, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f7fa f81f 	bl	800092e <_write>
 80068f0:	1c43      	adds	r3, r0, #1
 80068f2:	d102      	bne.n	80068fa <_write_r+0x1e>
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	b103      	cbz	r3, 80068fa <_write_r+0x1e>
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	bd38      	pop	{r3, r4, r5, pc}
 80068fc:	20001fbc 	.word	0x20001fbc

08006900 <memchr>:
 8006900:	4603      	mov	r3, r0
 8006902:	b510      	push	{r4, lr}
 8006904:	b2c9      	uxtb	r1, r1
 8006906:	4402      	add	r2, r0
 8006908:	4293      	cmp	r3, r2
 800690a:	4618      	mov	r0, r3
 800690c:	d101      	bne.n	8006912 <memchr+0x12>
 800690e:	2000      	movs	r0, #0
 8006910:	e003      	b.n	800691a <memchr+0x1a>
 8006912:	7804      	ldrb	r4, [r0, #0]
 8006914:	3301      	adds	r3, #1
 8006916:	428c      	cmp	r4, r1
 8006918:	d1f6      	bne.n	8006908 <memchr+0x8>
 800691a:	bd10      	pop	{r4, pc}

0800691c <_free_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4605      	mov	r5, r0
 8006920:	2900      	cmp	r1, #0
 8006922:	d040      	beq.n	80069a6 <_free_r+0x8a>
 8006924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006928:	1f0c      	subs	r4, r1, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	bfb8      	it	lt
 800692e:	18e4      	addlt	r4, r4, r3
 8006930:	f7ff fde0 	bl	80064f4 <__malloc_lock>
 8006934:	4a1c      	ldr	r2, [pc, #112]	@ (80069a8 <_free_r+0x8c>)
 8006936:	6813      	ldr	r3, [r2, #0]
 8006938:	b933      	cbnz	r3, 8006948 <_free_r+0x2c>
 800693a:	6063      	str	r3, [r4, #4]
 800693c:	6014      	str	r4, [r2, #0]
 800693e:	4628      	mov	r0, r5
 8006940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006944:	f7ff bddc 	b.w	8006500 <__malloc_unlock>
 8006948:	42a3      	cmp	r3, r4
 800694a:	d908      	bls.n	800695e <_free_r+0x42>
 800694c:	6820      	ldr	r0, [r4, #0]
 800694e:	1821      	adds	r1, r4, r0
 8006950:	428b      	cmp	r3, r1
 8006952:	bf01      	itttt	eq
 8006954:	6819      	ldreq	r1, [r3, #0]
 8006956:	685b      	ldreq	r3, [r3, #4]
 8006958:	1809      	addeq	r1, r1, r0
 800695a:	6021      	streq	r1, [r4, #0]
 800695c:	e7ed      	b.n	800693a <_free_r+0x1e>
 800695e:	461a      	mov	r2, r3
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	b10b      	cbz	r3, 8006968 <_free_r+0x4c>
 8006964:	42a3      	cmp	r3, r4
 8006966:	d9fa      	bls.n	800695e <_free_r+0x42>
 8006968:	6811      	ldr	r1, [r2, #0]
 800696a:	1850      	adds	r0, r2, r1
 800696c:	42a0      	cmp	r0, r4
 800696e:	d10b      	bne.n	8006988 <_free_r+0x6c>
 8006970:	6820      	ldr	r0, [r4, #0]
 8006972:	4401      	add	r1, r0
 8006974:	1850      	adds	r0, r2, r1
 8006976:	4283      	cmp	r3, r0
 8006978:	6011      	str	r1, [r2, #0]
 800697a:	d1e0      	bne.n	800693e <_free_r+0x22>
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	4408      	add	r0, r1
 8006982:	6010      	str	r0, [r2, #0]
 8006984:	6053      	str	r3, [r2, #4]
 8006986:	e7da      	b.n	800693e <_free_r+0x22>
 8006988:	d902      	bls.n	8006990 <_free_r+0x74>
 800698a:	230c      	movs	r3, #12
 800698c:	602b      	str	r3, [r5, #0]
 800698e:	e7d6      	b.n	800693e <_free_r+0x22>
 8006990:	6820      	ldr	r0, [r4, #0]
 8006992:	1821      	adds	r1, r4, r0
 8006994:	428b      	cmp	r3, r1
 8006996:	bf01      	itttt	eq
 8006998:	6819      	ldreq	r1, [r3, #0]
 800699a:	685b      	ldreq	r3, [r3, #4]
 800699c:	1809      	addeq	r1, r1, r0
 800699e:	6021      	streq	r1, [r4, #0]
 80069a0:	6063      	str	r3, [r4, #4]
 80069a2:	6054      	str	r4, [r2, #4]
 80069a4:	e7cb      	b.n	800693e <_free_r+0x22>
 80069a6:	bd38      	pop	{r3, r4, r5, pc}
 80069a8:	20001fb8 	.word	0x20001fb8

080069ac <_malloc_usable_size_r>:
 80069ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b0:	1f18      	subs	r0, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bfbc      	itt	lt
 80069b6:	580b      	ldrlt	r3, [r1, r0]
 80069b8:	18c0      	addlt	r0, r0, r3
 80069ba:	4770      	bx	lr

080069bc <_init>:
 80069bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069be:	bf00      	nop
 80069c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c2:	bc08      	pop	{r3}
 80069c4:	469e      	mov	lr, r3
 80069c6:	4770      	bx	lr

080069c8 <_fini>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	bf00      	nop
 80069cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ce:	bc08      	pop	{r3}
 80069d0:	469e      	mov	lr, r3
 80069d2:	4770      	bx	lr
